%!PS-Adobe-3.1 EPSF-3.0
%ADO_DSC_Encoding: Windows Cyrillic
%%Title: 1512.m10.i306.n036.S.c10.298837898 Tourist tents vector set in flat style.eps
%%Creator: Adobe Illustrator(R) 19.1
%%For: Andrey Magda
%%CreationDate: 12/15/2015
%%BoundingBox: 0 0 450 400
%%HiResBoundingBox: 0 0 450 400
%%CropBox: 0 0 450 400
%%LanguageLevel: 2
%%DocumentData: Clean7Bit
%ADOBeginClientInjection: DocumentHeader "AI11EPS"
%%AI8_CreatorVersion: 19.1.1%AI9_PrintingDataBegin%ADO_BuildNumber: Adobe Illustrator(R) 19.1.1 x35 R agm 4.7731 ct 5.3840%ADO_ContainsXMP: MainFirst%AI7_Thumbnail: 128 116 8%%BeginData: 11262 Hex Bytes%0000330000660000990000CC0033000033330033660033990033CC0033FF
%0066000066330066660066990066CC0066FF009900009933009966009999
%0099CC0099FF00CC0000CC3300CC6600CC9900CCCC00CCFF00FF3300FF66
%00FF9900FFCC3300003300333300663300993300CC3300FF333300333333
%3333663333993333CC3333FF3366003366333366663366993366CC3366FF
%3399003399333399663399993399CC3399FF33CC0033CC3333CC6633CC99
%33CCCC33CCFF33FF0033FF3333FF6633FF9933FFCC33FFFF660000660033
%6600666600996600CC6600FF6633006633336633666633996633CC6633FF
%6666006666336666666666996666CC6666FF669900669933669966669999
%6699CC6699FF66CC0066CC3366CC6666CC9966CCCC66CCFF66FF0066FF33
%66FF6666FF9966FFCC66FFFF9900009900339900669900999900CC9900FF
%9933009933339933669933999933CC9933FF996600996633996666996699
%9966CC9966FF9999009999339999669999999999CC9999FF99CC0099CC33
%99CC6699CC9999CCCC99CCFF99FF0099FF3399FF6699FF9999FFCC99FFFF
%CC0000CC0033CC0066CC0099CC00CCCC00FFCC3300CC3333CC3366CC3399
%CC33CCCC33FFCC6600CC6633CC6666CC6699CC66CCCC66FFCC9900CC9933
%CC9966CC9999CC99CCCC99FFCCCC00CCCC33CCCC66CCCC99CCCCCCCCCCFF
%CCFF00CCFF33CCFF66CCFF99CCFFCCCCFFFFFF0033FF0066FF0099FF00CC
%FF3300FF3333FF3366FF3399FF33CCFF33FFFF6600FF6633FF6666FF6699
%FF66CCFF66FFFF9900FF9933FF9966FF9999FF99CCFF99FFFFCC00FFCC33
%FFCC66FFCC99FFCCCCFFCCFFFFFF33FFFF66FFFF99FFFFCC110000001100
%000011111111220000002200000022222222440000004400000044444444
%550000005500000055555555770000007700000077777777880000008800
%000088888888AA000000AA000000AAAAAAAABB000000BB000000BBBBBBBB
%DD000000DD000000DDDDDDDDEE000000EE000000EEEEEEEE0000000000FF
%00FF0000FFFFFF0000FF00FFFFFF00FFFFFF
%524C45FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD5BFFCFFD7DFFCFC6FEC7FD
%7CFFC7FEC6FECEFD4EFFC9CEFD2BFFCCC6CCA5ADFD1CFF84FD30FFCFCDC6
%CFFD2AFFCDCC848B85AFAFFD19FFA98560FD2EFFCFCDC6C6C6FD23FFA8FF
%A8FFA8FFA8FF84858485848584FD0DFF84AF84AF84AF84AF84AF84858485
%368BAEFD2BFFCEC7CCC6C6C8FD21FFA8AFA8FFA8AFA8FF848585AF858B85
%8BAFFD0BFFAFAF84AF8AAF84AF8AAF8AAF858B8585608BFD2AFFCEC7CDFD
%04C6C8FD1EFFA8A8AFA8AFA8AFA8AFA8FF845A608B8485608584FD0BFFAF
%FFAFFFAFFFAFFFAE8B8485848560615A85A8FD27FFCFC7CDC7FD05C6C9FD
%1DFFA8FFA8AFA8AFA8AFA8AFA8FF843559AFAFAFA9FD15FF8585847E858B
%6061606184FD1CFFA8AFA9AFA8AFA9AFA9CFC7CDC7FD07C6A7AFA9AFA8AF
%A9AFA8AFA9FD11FFA8AFA8A8A8AFA8A8A8AFA8A8A8FF532E2EAFFD10FFAF
%AF84AF84AF84858484528584855A605A6084FD1AFFA9AFAFAFA9AFAFAFA9
%CFC7CDC8CCC6C6C0CCFD04C6A7AFA9AFAFAFA9AFAFAFFD10FFA8FFA8AFA8
%84FD04597EAFA8FFAF842E2F2FFD10FFAF84AF8AAF848B858B8452858B85
%8560616061AFFD1AFFAFFFAFFFA8AFA9CEC7CDC8C7C6C69EC0FD06C6A6AF
%A9FFAFFFAFFD12FFA9A8AFA87E0C2F2E2E2E2F7DAEA8FF842F2E2F59FD11
%FFA8FFAFAF6085857E27A9858584615A603685FD1FFFA8CECCCDC8CDC6C6
%C6C19EFD07C6C7FD17FFA8FFA8AF592F2E592E2F2E59A8AFA884352F2E5A
%FD14FF8585848B594B84AF858B606160615AFD1DFFAF84C7C7CDC7C7FD04
%C67475C0FD07C69EA8A9FD13FFA8AFA8A884592E2F2E2F2E2F2FA8A8AE59
%592E2E2FAFFD10FFA8FF848584858559207E858584855A605A605AAFA8AF
%A8AFA8FD16FF84A9C9CCC6C7FD04C6C07575C6C6CCFD05C6CEA8A9FD14FF
%AFFFA8AF532F2E592E59597DA8AFA88459592E59AFFD0FFF8BAFAF8B858B
%858B522659AF858B858B6061606184AF84AF8AAFFD15FF7DFFFFFFCAC7FD
%04C6C0C07475C0FD05C6C0CFFFFFA8A8A8FD11FFA9FFA8A8A8592E2F2E2F
%2E5953A8A8AF59592F2E2FAFAFFD0FFFAEA96085848584522058AF8B8485
%84855A60366084AFA8AFAFFD12FFA8FF84FD05FFA7FD05C6C0754BC0C0C6
%C6C6C0CEAFFD04FFA8A8FFCFFD0DFFAFFFA8FFA8AF2F2F2E2F2E595959A8
%AFA87E2E5A2E59AFFD11FF8585848B85854B2752AF858B85858461606136
%85FD16FFA17EFD05FFA9AFA5C6C0C09EC04B4B98C0C0C6C0C7A9AF84AFFF
%FFFFA87DFD0DFFA9AFFFAFA8AFA8592E2F2E2F2E5953A8A8AF592E352F2F
%FFA9FD0DFFA1FF8485848560855A4B205185AF84858485606035603585FD
%15FFA8CFFD07FFCFC6C69EC09E514BC1C0C0C0C6C9FD07FFA8CAFD0EFFAF
%CFA8FFA8AF2F352E592E595959A8FFA8842E5A2F59AEAFAECFA8FD0AFFA8
%848B858B858B85844B4B27AFAF8B608B858B5959366036AFA8FD14FFA1FD
%07FFCFC7C6C098C0274B98C0C0C6C0FD07FFCBA8FD0EFFA9AD7AA7A8AFA8
%590C2F2E592F5953A8A8FF592E2F5A2E818283808182FD08FFCF7DFD0684
%8B5951275184855A608484845935603560357DAEFD12FFA7A682ADA6A682
%ADA6A7A5C7A4C79E7B519F9EC7A4C782ADA6A682ADA6A67CADFD0AFFAEFF
%CFAF81A582A883A858592E592E592E5983A883832E58595881A682A681AD
%FD08FF828181817B817B8157817B815781578157817B817BFD04818281A6
%CFFD10FFA8817A817A817A817A817A817B8181817B8181817B817B817A81
%7A817A817A817AFD09FFA7817B8283817B817B8156817B8157817B815781
%578156817A837B81A8FFA8FD0BFFA6A57A817A817A8156817B8156817B81
%7A817B817B817A817BA6A8FD12FFCFCFAECFAECFAECFAECFAECFAECFAECF
%AECFAECFAECFAECFAECFAECFAECFA8FD0AFFCF81A682A781A681A681A681
%A681A681A681A681A681A681A682A6A6FD10FFCFA6AC81A581A5818181A5
%818181A5818181A682ADA7FD40FFAEFFCFFFAEFFCFFFAEFFCFFFAEFFCFFF
%AEFFCFFFAEFFCFFFA8FD15FFA8AEA7ADA6A682A7A6A7A6ADA7CFA8FDFCFF
%FDFCFFFDFCFFFDFCFFFD3CFF7DFD7EFF83277DFD7DFF582752AEFD3DFFAE
%AE8AFD3BFF7D052D0559FD3CFF843B183A3AAEA88383FD35FFAFFD052DA8
%FD3AFFAE65FD053A3B123A5FFD2BFFCAA1CAA8FFCAFFA8FFA85227522752
%A8FD1DFFAFFD05FFA0CAFD15FFAEFD043A123A3A34113AFD2BFFC39A93BC
%9ABC9AC39ABC9ABC9ABC6F847D83FD1AFF84AFA8FFFFFFA0BAC9FD15FFAE
%653A3A3A3B3A3B3A3A5FFD2BFFC3939A6F9A939A939A939A939A9376272D
%2DFD17FF848484AF848BA8C9989898C2CFFD15FF5F3B3A3A1189833A58FD
%2CFF9A9A999A939A9A9A939A9A9A939A9A522D2D58FD15FFA8AF84AF84A8
%A09F9299989975C9FD16FF5F653A8AFFFF7DAF84AFA8AFA8FD26FFCABC93
%9A939A6F9A939A6F9A6F9A6F9A4B2D272D83FD13FFA88484AF84A06E9892
%9898C14B7698CFFD14FF835F7CA8FFA87DFD0484AFFD0584AFFD22FFCABC
%C39A9A939A9A9A6F9A939A6F9A9A762D2E2DAEFD14FF84AFAFA898999899
%98C1C15152C1C1FD15FFA8A1A8A984AF84AF84AF84AF84AF848459AFFD21
%FFC3BC9A9A939A6F9A6F4C4B704B70939A6F2D272D58FD15FFAFFFA09874
%99989998C14B52C1BAA0FD15FFA8FD0484AF84A984AF84A984AF848459AF
%FD20FFC3BCC3FD049A9376284C284C4C9A939A2D2E2D2D83FD15FFCA9998
%9998C199C1985151C298C1C2FD14FFA884AF84AF84AF522E84AF84AF84AF
%848459FD1FFFCAFD049A6F9A939A6F4C274C274C6F9A93520B2D2D7DFD14
%FFCA996E9998C198C19899052EA0C198BB98C2A8FFFFFFCFFD0CFFAF7D84
%84AF84AF8427F85984AF848484AF848484FD1EFFC3BD709BFD049A939A4C
%704C764C7693BC752E2D52A8FD13FFC99998C199C199C199C1992E27C2C1
%C199C198C1C1C9CAFD0DFF848484AF84AF8484272752AF84AF84AF84AF84
%84FD1EFFC39A4C70BD939A939A939A939A6F9A939A939A2D2D0558FD10FF
%A8A775746EC198C198C198C198990528A0C298C198C198C198CFFD0CFFA8
%FD0484AF84AF7D27055984AF84A984AF848459FD1EFFBCBD2876BCBC939A
%9A9A939A9A9A939A9A9A93762D2E0483FD0EFFA7986E746E9999C198C199
%C198C1752805A0C2C198C199C198C2FD0DFFAF848484AF84AF84A8272759
%AF84AF84AF84AF8484A8FD1CFFA1BC704C4BBD9A9A6F9A939A6F9A939A6F
%9A939A6F2D275858FD0FFF75746E756E9998C198C198C19875050575C89F
%BB98C198BA7CAFFD0CFFA8847DAF848484AF7D27F859848484AFFD04845A
%83A7CFFD19FFCAC3BC762876BCC3FD049A939A9A9A939A9A9A93BC512D58
%FD10FFC96E996E9974C199C199C199C15128057CC2C8C1C199C199AF85FD
%0CFFAF84A884AF84AFAFA8272759AF84AF84AF84AF8484568181A6FD17FF
%A8C39ABD4C4C279BBCBC6F9A939A6F9A939A6F9A939A939A2D2D7DFD10FF
%996E756E7598C198C198C19875050551C8C2C299C198A085AF84FD0AFFCF
%838484AF84A984AF8427F859AF8584AF84A984AF578182ADA7FD16FFA8A1
%BDBD9A4C4C4C70C3BC9A6F9A949A939A9A9A939A949A93762D83FD0EFFCF
%CF7B9974996E99BBC198C1BBC127280552C2C8C29998C1A6AE84FD0BFF81
%8283AE84AF84AFA9A8272759FF85AF84AF84AE838181FD19FF827BA07B7B
%517B577B7B9F757B757B7B7B567B7B7B567B757B75A7FD0EFFA7817A817A
%7B567B509F7A9F749F74512D57519F747B749F7A817AA7FD0AFFA8827A81
%568157827B825757507B82837C82578157817A8181A6A8FD16FF82A58181
%81A5FD1381A6CFFD0EFFAD81A581A6FD068157FD078157FD0481A681A581
%FD0DFFA7ADA6AC81A581A682A6FD0581A581A581A6818181FD18FFAEA781
%817BFD0F817BA6A8FFAEFD0FFFA78181817A8181817B8181817B8181817B
%8181817B8181817B817AA6FD12FFCFFFCFCF82817B8181817B8181817A81
%81AEFD19FFA8A5818181A5818181A5818181A5818181A58181A6FD13FFA8
%ADA7AD82A681A681A5818181A5818181A5818181A682A6A6CFFD16FFA7A6
%82A681A681A681A6A6ADA7FD1CFFA8CFA8CFA7CFA8CFA7CFA8CFA7CFA8CF
%A7CFA7FD19FFA8FFAECFA8CFA7ADA7ADA7ADA7AEA7CFA8FD1DFFAEFFA8FF
%AEFFA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD66FF59A8FD59FFCACFC9FD
%21FF7D2D2EFD25FFA8AFFD31FFC7C6C6C6C7CFFD1FFF582D2D7DFD25FFA8
%FD2CFFAE82A8FFC7C6C6C7C6C6C6CFFFFFCAFD1AFF7D052D272EA8FD23FF
%A8AFA8FD26FFCFFD04FFAD80A6C9C6C6C69FC7C6C6C7CAC2C9C3FD19FF7D
%2D2D2D2EFFFF83FD1EFF84FF84A8A8AFAFFD22FFC8C7C6C7C7FFFFFF7B81
%5780C6C79E9F9EC6C6C29FC2A0C29FCFFD16FFA858052D052D83830483FD
%1CFF845A59605A605A60AFFD20FFC8C6C6C7C6C6C7FFA7A581A557A5C6A0
%7CC7C6C8C2C8A0A0C2C8C2FD16FF7D2D2E2D5F592E2D2E2DFD1BFFA9615A
%6160615A615A85FD1FFFC9C6C6C67BC6C6C6C8827B81818156A4C6A0A4C6
%C2C2A0A0A0C2A0C2CAFD15FF522E2D2D60842D2D272D84FD15FFC9CEC9CE
%A7A77C827CA77CA67CA67CA7A8FFA8FD1BFFCDC6C7A4A6C6C6C6A581A581
%A6818156C79FC6C6C8C2A076A1C2C2C2CFFD15FFA8272E2D8B60582D2E27
%7DFD15FFFD0EC6FE9EFD0484FD1AFFC7C69EA075C6C6C67B817B817B817B
%7B569FC6C69FC2C2A076C2C2C2A8FD15FF2D2D0559848B2E2D272D2DA8FD
%14FFC7FD0EC6C0755A355A84FD19FFCEC6C6A4A0C6C6A5A6818281A681A5
%7B817ACEFFCAC2C8A0A1C2C2C2FD15FF582D2D2E5F8B8A842D2E2D58FD15
%FFCDC6C7C6C6C6C7C6C6C6C7C6C6C6FE9EBB7C6059AFA9FD18FFCAC6C6C6
%7BC6C6817B8157817B818181567B7BFFFFC9C1A09AC2C2CFFD14FFA85750
%512D8A848B602E272D057DFD14FFC8FD0EC69F98C15235A8A82FFD18FFC9
%C6C6A0C6A581A57B82818181A68181567B81FFFFCFA1A1C9FD14FFA7A7FF
%57575082848A848B58512D512DFD14FFCDC6C6C6C7C6FEFD08C6989998C1
%515A592F2FFD18FFCACD7CC87A818181578181817B817B7B567A7BFFFFA8
%A1FD14FFA72C5657562C575F8B5F8460842C572C57A8FD13FFC8C6C6C69E
%7CA4FEC6FEFD05C6986E9998C175FD042EFD19FFA8A78181A67B8281A581
%A681A57B817B8182FFCAA8FD14FF7C5656575057588B8484608B84825057
%508283FD12FFCEC6C6C6FE767CA5FEFEFEC6C7C6C6989998C198C1752F2E
%A9FD19FF7D817B81817B57A581817B8181815681567A82A8A1FD13FF7C57
%2C5750562C8A848B5984848B60572C572C56A8FD11FFC8FD04C6A0527675
%A5A4C69EC6C699929998C198A77EA8FD18FFAE5982818181A6578181A681
%8181A681817A817A81335883FD11FF825650572C575683848B8B59598B84
%8B5F5750575057A7FD10FFCDFD04C6757C7676527CA4C6C6C6989998C199
%C1CAFD18FF83582D3456FD04817B57817B8181817B817A7B567B2D2D2D34
%58FD10FFA72C57507B7A836084608B2E59848A608B828156572C57A8FD0F
%FFC7FD04C6765176517675C69EC6C69F929998C198CAFD17FF83582E5857
%A581A681AC577C81A681A581A681817A81572E2D58343483FD0FFFA7577B
%A581AD848B848B8B592EAF848B848B82A5818150A7FD0EFFCFC7C6FEC6C7
%767C767C767CA4C6C6FEC099989999C1A7FD16FFA8342D5833817AA58181
%817B51A581A5818181A5818156342D342D582DA8FD0FFFCF7BA58182608B
%608460AF272E8A8B608A608BFD0481A8FD0DFFA781A4A49EC69E7C517C75
%7C75A59EC69E9F7499749F989EA7FD15FFA82D582E8281817B8257585158
%577C57827B8181A681572D5834582D7DFD10FF828181A6848B848B84AF84
%2E278B8B8B848B608A81A581A6FD0DFFCF81A682A6FD04817B8181817B81
%81817B8181A681A681CFFD15FFA8582D342D582D2E2D2E2D2D2D2E2D2D2D
%2E2D332D572D2E2D582D59A8FD0FFFA7817B82608B608B608B8B59F82759
%AF848B608B608A81817AAEFD0EFFA8FFFFFFA78181817B8181817B818181
%82FFFFFFAEFD18FFA88358582E582DFD04585934582E582E582D582D582D
%5858A8FD11FFCF81A582FD04838A83AE585227598A8A8384838383828181
%AEFD11FFCFAD81A581A681A581A681A581ACCFFD1EFFA8AEA8A8A8FFAEFF
%AEA82D342D582D342D342E5983FD14FFAD81817A81567B56815681578157
%7B5681567B56817A81A6FD11FFA7817A8181817B8181817B8181817B8181
%82AEFD25FF8358583459588384FD19FFA7A681A581817A8181817A818181
%7B8181A682ADCFFD12FFCF81A681A681A681A681A681A681A681A682FD28
%FFA8AFA8FD1EFFCFA8CFA7A7A6A782A782ADA7ADA7CFA8FD17FFAEFFA8FF
%AEFFA8FFAEFFA8FFAEFFA8FDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFDFCFFFD
%26FFFF
%%EndData
%ADOEndClientInjection: DocumentHeader "AI11EPS"
%%Pages: 1
%%DocumentNeededResources: 
%%DocumentSuppliedResources: procset Adobe_AGM_Image 1.0 0
%%+ procset Adobe_CoolType_Utility_T42 1.0 0
%%+ procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%+ procset Adobe_CoolType_Core 2.31 0
%%+ procset Adobe_AGM_Core 2.0 0
%%+ procset Adobe_AGM_Utils 1.0 0
%%DocumentFonts: 
%%DocumentNeededFonts: 
%%DocumentNeededFeatures: 
%%DocumentSuppliedFeatures: 
%%DocumentProcessColors:  Cyan Magenta Yellow Black
%%DocumentCustomColors: 
%%CMYKCustomColor: 
%%RGBCustomColor: 
%%EndComments
                                                                                                                                                                                                               
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
                                                                                                                                                                                                                                                         
%%BeginDefaults
%%ViewingOrientation: 1 0 0 1
%%EndDefaults
%%BeginProlog
%%BeginResource: procset Adobe_AGM_Utils 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{currentpacking	true setpacking}if
userdict/Adobe_AGM_Utils 75 dict dup begin put
/bdf
{bind def}bind def
/nd{null def}bdf
/xdf
{exch def}bdf
/ldf 
{load def}bdf
/ddf
{put}bdf	
/xddf
{3 -1 roll put}bdf	
/xpt
{exch put}bdf
/ndf
{
	exch dup where{
		pop pop pop
	}{
		xdf
	}ifelse
}def
/cdndf
{
	exch dup currentdict exch known{
		pop pop
	}{
		exch def
	}ifelse
}def
/gx
{get exec}bdf
/ps_level
	/languagelevel where{
		pop systemdict/languagelevel gx
	}{
		1
	}ifelse
def
/level2 
	ps_level 2 ge
def
/level3 
	ps_level 3 ge
def
/ps_version
	{version cvr}stopped{-1}if
def
/set_gvm
{currentglobal exch setglobal}bdf
/reset_gvm
{setglobal}bdf
/makereadonlyarray
{
	/packedarray where{pop packedarray
	}{
		array astore readonly}ifelse
}bdf
/map_reserved_ink_name
{
	dup type/stringtype eq{
		dup/Red eq{
			pop(_Red_)
		}{
			dup/Green eq{
				pop(_Green_)
			}{
				dup/Blue eq{
					pop(_Blue_)
				}{
					dup()cvn eq{
						pop(Process)
					}if
				}ifelse
			}ifelse
		}ifelse
	}if
}bdf
/AGMUTIL_GSTATE 22 dict def
/get_gstate
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_clr_spc currentcolorspace def
	/AGMUTIL_GSTATE_clr_indx 0 def
	/AGMUTIL_GSTATE_clr_comps 12 array def
	mark currentcolor counttomark
		{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 3 -1 roll put
		/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 add def}repeat pop
	/AGMUTIL_GSTATE_fnt rootfont def
	/AGMUTIL_GSTATE_lw currentlinewidth def
	/AGMUTIL_GSTATE_lc currentlinecap def
	/AGMUTIL_GSTATE_lj currentlinejoin def
	/AGMUTIL_GSTATE_ml currentmiterlimit def
	currentdash/AGMUTIL_GSTATE_do xdf/AGMUTIL_GSTATE_da xdf
	/AGMUTIL_GSTATE_sa currentstrokeadjust def
	/AGMUTIL_GSTATE_clr_rnd currentcolorrendering def
	/AGMUTIL_GSTATE_op currentoverprint def
	/AGMUTIL_GSTATE_bg currentblackgeneration cvlit def
	/AGMUTIL_GSTATE_ucr currentundercolorremoval cvlit def
	currentcolortransfer cvlit/AGMUTIL_GSTATE_gy_xfer xdf cvlit/AGMUTIL_GSTATE_b_xfer xdf
		cvlit/AGMUTIL_GSTATE_g_xfer xdf cvlit/AGMUTIL_GSTATE_r_xfer xdf
	/AGMUTIL_GSTATE_ht currenthalftone def
	/AGMUTIL_GSTATE_flt currentflat def
	end
}def
/set_gstate
{
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_clr_spc setcolorspace
	AGMUTIL_GSTATE_clr_indx{AGMUTIL_GSTATE_clr_comps AGMUTIL_GSTATE_clr_indx 1 sub get
	/AGMUTIL_GSTATE_clr_indx AGMUTIL_GSTATE_clr_indx 1 sub def}repeat setcolor
	AGMUTIL_GSTATE_fnt setfont
	AGMUTIL_GSTATE_lw setlinewidth
	AGMUTIL_GSTATE_lc setlinecap
	AGMUTIL_GSTATE_lj setlinejoin
	AGMUTIL_GSTATE_ml setmiterlimit
	AGMUTIL_GSTATE_da AGMUTIL_GSTATE_do setdash
	AGMUTIL_GSTATE_sa setstrokeadjust
	AGMUTIL_GSTATE_clr_rnd setcolorrendering
	AGMUTIL_GSTATE_op setoverprint
	AGMUTIL_GSTATE_bg cvx setblackgeneration
	AGMUTIL_GSTATE_ucr cvx setundercolorremoval
	AGMUTIL_GSTATE_r_xfer cvx AGMUTIL_GSTATE_g_xfer cvx AGMUTIL_GSTATE_b_xfer cvx
		AGMUTIL_GSTATE_gy_xfer cvx setcolortransfer
	AGMUTIL_GSTATE_ht/HalftoneType get dup 9 eq exch 100 eq or
		{
		currenthalftone/HalftoneType get AGMUTIL_GSTATE_ht/HalftoneType get ne
			{
			 mark AGMUTIL_GSTATE_ht{sethalftone}stopped cleartomark
			}if
		}{
		AGMUTIL_GSTATE_ht sethalftone
		}ifelse
	AGMUTIL_GSTATE_flt setflat
	end
}def
/get_gstate_and_matrix
{
	AGMUTIL_GSTATE begin
	/AGMUTIL_GSTATE_ctm matrix currentmatrix def
	end
	get_gstate
}def
/set_gstate_and_matrix
{
	set_gstate
	AGMUTIL_GSTATE begin
	AGMUTIL_GSTATE_ctm setmatrix
	end
}def
/AGMUTIL_str256 256 string def
/AGMUTIL_src256 256 string def
/AGMUTIL_dst64 64 string def
/AGMUTIL_srcLen nd
/AGMUTIL_ndx nd
/AGMUTIL_cpd nd
/capture_cpd{
	//Adobe_AGM_Utils/AGMUTIL_cpd currentpagedevice ddf
}def
/thold_halftone
{
	level3
		{sethalftone currenthalftone}
		{
			dup/HalftoneType get 3 eq
			{
				sethalftone currenthalftone
			}{
				begin
				Width Height mul{
					Thresholds read{pop}if
				}repeat
				end
				currenthalftone
			}ifelse
		}ifelse
}def 
/rdcmntline
{
	currentfile AGMUTIL_str256 readline pop
	(%)anchorsearch{pop}if
}bdf
/filter_cmyk
{	
	dup type/filetype ne{
		exch()/SubFileDecode filter
	}{
		exch pop
	}
	ifelse
	[
	exch
	{
		AGMUTIL_src256 readstring pop
		dup length/AGMUTIL_srcLen exch def
		/AGMUTIL_ndx 0 def
		AGMCORE_plate_ndx 4 AGMUTIL_srcLen 1 sub{
			1 index exch get
			AGMUTIL_dst64 AGMUTIL_ndx 3 -1 roll put
			/AGMUTIL_ndx AGMUTIL_ndx 1 add def
		}for
		pop
		AGMUTIL_dst64 0 AGMUTIL_ndx getinterval
	}
	bind
	/exec cvx
	]cvx
}bdf
/filter_indexed_devn
{
	cvi Names length mul names_index add Lookup exch get
}bdf
/filter_devn
{	
	4 dict begin
	/srcStr xdf
	/dstStr xdf
	dup type/filetype ne{
		0()/SubFileDecode filter
	}if
	[
	exch
		[
			/devicen_colorspace_dict/AGMCORE_gget cvx/begin cvx
			currentdict/srcStr get/readstring cvx/pop cvx
			/dup cvx/length cvx 0/gt cvx[
				Adobe_AGM_Utils/AGMUTIL_ndx 0/ddf cvx
				names_index Names length currentdict/srcStr get length 1 sub{
					1/index cvx/exch cvx/get cvx
					currentdict/dstStr get/AGMUTIL_ndx/load cvx 3 -1/roll cvx/put cvx
					Adobe_AGM_Utils/AGMUTIL_ndx/AGMUTIL_ndx/load cvx 1/add cvx/ddf cvx
				}for
				currentdict/dstStr get 0/AGMUTIL_ndx/load cvx/getinterval cvx
			]cvx/if cvx
			/end cvx
		]cvx
		bind
		/exec cvx
	]cvx
	end
}bdf
/AGMUTIL_imagefile nd
/read_image_file
{
	AGMUTIL_imagefile 0 setfileposition
	10 dict begin
	/imageDict xdf
	/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
	/imbufIdx 0 def
	/origDataSource imageDict/DataSource get def
	/origMultipleDataSources imageDict/MultipleDataSources get def
	/origDecode imageDict/Decode get def
	/dstDataStr imageDict/Width get colorSpaceElemCnt mul string def
	imageDict/MultipleDataSources known{MultipleDataSources}{false}ifelse
	{
		/imbufCnt imageDict/DataSource get length def
		/imbufs imbufCnt array def
		0 1 imbufCnt 1 sub{
			/imbufIdx xdf
			imbufs imbufIdx imbufLen string put
			imageDict/DataSource get imbufIdx[AGMUTIL_imagefile imbufs imbufIdx get/readstring cvx/pop cvx]cvx put
		}for
		DeviceN_PS2{
			imageDict begin
		 	/DataSource[DataSource/devn_sep_datasource cvx]cvx def
			/MultipleDataSources false def
			/Decode[0 1]def
			end
		}if
	}{
		/imbuf imbufLen string def
		Indexed_DeviceN level3 not and DeviceN_NoneName or{
			/srcDataStrs[imageDict begin
				currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
				{
					Width Decode length 2 div mul cvi string
				}repeat
				end]def		
			imageDict begin
		 	/DataSource[AGMUTIL_imagefile Decode BitsPerComponent false 1/filter_indexed_devn load dstDataStr srcDataStrs devn_alt_datasource/exec cvx]cvx def
			/Decode[0 1]def
			end
		}{
			imageDict/DataSource[1 string dup 0 AGMUTIL_imagefile Decode length 2 idiv string/readstring cvx/pop cvx names_index/get cvx/put cvx]cvx put
			imageDict/Decode[0 1]put
		}ifelse
	}ifelse
	imageDict exch
	load exec
	imageDict/DataSource origDataSource put
	imageDict/MultipleDataSources origMultipleDataSources put
	imageDict/Decode origDecode put	
	end
}bdf
/write_image_file
{
	begin
	{(AGMUTIL_imagefile)(w+)file}stopped{
		false
	}{
		Adobe_AGM_Utils/AGMUTIL_imagefile xddf 
		2 dict begin
		/imbufLen Width BitsPerComponent mul 7 add 8 idiv def
		MultipleDataSources{DataSource 0 get}{DataSource}ifelse type/filetype eq{
			/imbuf imbufLen string def
		}if
		1 1 Height MultipleDataSources not{Decode length 2 idiv mul}if{
			pop
			MultipleDataSources{
			 	0 1 DataSource length 1 sub{
					DataSource type dup
					/arraytype eq{
						pop DataSource exch gx
					}{
						/filetype eq{
							DataSource exch get imbuf readstring pop
						}{
							DataSource exch get
						}ifelse
					}ifelse
					AGMUTIL_imagefile exch writestring
				}for
			}{
				DataSource type dup
				/arraytype eq{
					pop DataSource exec
				}{
					/filetype eq{
						DataSource imbuf readstring pop
					}{
						DataSource
					}ifelse
				}ifelse
				AGMUTIL_imagefile exch writestring
			}ifelse
		}for
		end
		true
	}ifelse
	end
}bdf
/close_image_file
{
	AGMUTIL_imagefile closefile(AGMUTIL_imagefile)deletefile
}def
statusdict/product known userdict/AGMP_current_show known not and{
	/pstr statusdict/product get def
	pstr(HP LaserJet 2200)eq 	
	pstr(HP LaserJet 4000 Series)eq or
	pstr(HP LaserJet 4050 Series )eq or
	pstr(HP LaserJet 8000 Series)eq or
	pstr(HP LaserJet 8100 Series)eq or
	pstr(HP LaserJet 8150 Series)eq or
	pstr(HP LaserJet 5000 Series)eq or
	pstr(HP LaserJet 5100 Series)eq or
	pstr(HP Color LaserJet 4500)eq or
	pstr(HP Color LaserJet 4600)eq or
	pstr(HP LaserJet 5Si)eq or
	pstr(HP LaserJet 1200 Series)eq or
	pstr(HP LaserJet 1300 Series)eq or
	pstr(HP LaserJet 4100 Series)eq or 
	{
 		userdict/AGMP_current_show/show load put
		userdict/show{
		 currentcolorspace 0 get
		 /Pattern eq
		 {false charpath f}
		 {AGMP_current_show}ifelse
		}put
	}if
	currentdict/pstr undef
}if
/consumeimagedata
{
	begin
	AGMIMG_init_common
	currentdict/MultipleDataSources known not
		{/MultipleDataSources false def}if
	MultipleDataSources
		{
		DataSource 0 get type
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width cvi string def
			1 1 Height cvi
				{
				pop
				0 1 DataSource length 1 sub
					{
					DataSource exch get
					flushbuffer readstring pop pop
					}for
				}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or DataSource 0 get xcheck and
			{
			Width Height mul cvi
				{
				0 1 DataSource length 1 sub
					{dup DataSource exch gx length exch 0 ne{pop}if}for
				dup 0 eq
					{pop exit}if
				sub dup 0 le
					{exit}if
				}loop
			pop
			}if		
		}
		{
		/DataSource load type 
		dup/filetype eq
			{
			1 dict begin
			/flushbuffer Width Decode length 2 idiv mul cvi string def
			1 1 Height{pop DataSource flushbuffer readstring pop pop}for
			end
			}if
		dup/arraytype eq exch/packedarraytype eq or/DataSource load xcheck and
			{
				Height Width BitsPerComponent mul 8 BitsPerComponent sub add 8 idiv Decode length 2 idiv mul mul
					{
					DataSource length dup 0 eq
						{pop exit}if
					sub dup 0 le
						{exit}if
					}loop
				pop
			}if
		}ifelse
	end
}bdf
/addprocs
{
	 2{/exec load}repeat
	 3 1 roll
	 [5 1 roll]bind cvx
}def
/modify_halftone_xfer
{
	currenthalftone dup length dict copy begin
	 currentdict 2 index known{
	 	1 index load dup length dict copy begin
		currentdict/TransferFunction known{
			/TransferFunction load
		}{
			currenttransfer
		}ifelse
		 addprocs/TransferFunction xdf 
		 currentdict end def
		currentdict end sethalftone
	}{
		currentdict/TransferFunction known{
			/TransferFunction load 
		}{
			currenttransfer
		}ifelse
		addprocs/TransferFunction xdf
		currentdict end sethalftone		
		pop
	}ifelse
}def
/clonearray
{
	dup xcheck exch
	dup length array exch
	Adobe_AGM_Core/AGMCORE_tmp -1 ddf 
	{
	Adobe_AGM_Core/AGMCORE_tmp 2 copy get 1 add ddf 
	dup type/dicttype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get
			exch
			clonedict
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	dup type/arraytype eq
		{
			Adobe_AGM_Core/AGMCORE_tmp get exch
			clonearray
			Adobe_AGM_Core/AGMCORE_tmp 4 -1 roll ddf 
		}if
	exch dup
	Adobe_AGM_Core/AGMCORE_tmp get 4 -1 roll put
	}forall
	exch{cvx}if
}bdf
/clonedict
{
	dup length dict
	begin
	{
		dup type/dicttype eq
			{clonedict}if
		dup type/arraytype eq
			{clonearray}if
		def
	}forall
	currentdict
	end
}bdf
/DeviceN_PS2
{
	/currentcolorspace AGMCORE_gget 0 get/DeviceN eq level3 not and
}bdf
/Indexed_DeviceN
{
	/indexed_colorspace_dict AGMCORE_gget dup null ne{
		dup/CSDBase known{
			/CSDBase get/CSD get_res/Names known 
		}{
			pop false
		}ifelse
	}{
		pop false
	}ifelse
}bdf
/DeviceN_NoneName
{	
	/Names where{
		pop
		false Names
		{
			(None)eq or
		}forall
	}{
		false
	}ifelse
}bdf
/DeviceN_PS2_inRip_seps
{
	/AGMCORE_in_rip_sep where
	{
		pop dup type dup/arraytype eq exch/packedarraytype eq or
		{
			dup 0 get/DeviceN eq level3 not and AGMCORE_in_rip_sep and
			{
				/currentcolorspace exch AGMCORE_gput
				false
			}{
				true
			}ifelse
		}{
			true
		}ifelse
	}{
		true
	}ifelse
}bdf
/base_colorspace_type
{
	dup type/arraytype eq{0 get}if
}bdf
/currentdistillerparams where{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
{
	/pdfmark_5{cleartomark}bind def
}{
	/pdfmark_5{pdfmark}bind def
}ifelse
/ReadBypdfmark_5
{
	currentfile exch 0 exch/SubFileDecode filter
	/currentdistillerparams where 
	{pop currentdistillerparams/CoreDistVersion get 5000 lt}{true}ifelse
	{flushfile cleartomark}
	{/PUT pdfmark}ifelse 	
}bdf
/ReadBypdfmark_5_string
{
	2 dict begin
	/makerString exch def string/tmpString exch def
	{
		currentfile tmpString readline not{pop exit}if
		makerString anchorsearch
		{
			pop pop cleartomark exit
		}{
			3 copy/PUT pdfmark_5 pop 2 copy(\n)/PUT pdfmark_5
		}ifelse
	}loop
	end
}bdf
/xpdfm
{
	{
		dup 0 get/Label eq
		{
			aload length[exch 1 add 1 roll/PAGELABEL
		}{
			aload pop
			[{ThisPage}<<5 -2 roll>>/PUT
		}ifelse
		pdfmark_5
	}forall
}bdf
/lmt{
	dup 2 index le{exch}if pop dup 2 index ge{exch}if pop
}bdf
/int{
	dup 2 index sub 3 index 5 index sub div 6 -2 roll sub mul exch pop add exch pop
}bdf
/ds{
	Adobe_AGM_Utils begin
}bdf
/dt{
	currentdict Adobe_AGM_Utils eq{
		end
	}if
}bdf
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_AGM_Core 2.0 0
%%Version: 2.0 0
%%Copyright: Copyright(C)1997-2007 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Core 209 dict dup begin put
/Adobe_AGM_Core_Id/Adobe_AGM_Core_2.0_0 def
/AGMCORE_str256 256 string def
/AGMCORE_save nd
/AGMCORE_graphicsave nd
/AGMCORE_c 0 def
/AGMCORE_m 0 def
/AGMCORE_y 0 def
/AGMCORE_k 0 def
/AGMCORE_cmykbuf 4 array def
/AGMCORE_screen[currentscreen]cvx def
/AGMCORE_tmp 0 def
/AGMCORE_&setgray nd
/AGMCORE_&setcolor nd
/AGMCORE_&setcolorspace nd
/AGMCORE_&setcmykcolor nd
/AGMCORE_cyan_plate nd
/AGMCORE_magenta_plate nd
/AGMCORE_yellow_plate nd
/AGMCORE_black_plate nd
/AGMCORE_plate_ndx nd
/AGMCORE_get_ink_data nd
/AGMCORE_is_cmyk_sep nd
/AGMCORE_host_sep nd
/AGMCORE_avoid_L2_sep_space nd
/AGMCORE_distilling nd
/AGMCORE_composite_job nd
/AGMCORE_producing_seps nd
/AGMCORE_ps_level -1 def
/AGMCORE_ps_version -1 def
/AGMCORE_environ_ok nd
/AGMCORE_CSD_cache 0 dict def
/AGMCORE_currentoverprint false def
/AGMCORE_deltaX nd
/AGMCORE_deltaY nd
/AGMCORE_name nd
/AGMCORE_sep_special nd
/AGMCORE_err_strings 4 dict def
/AGMCORE_cur_err nd
/AGMCORE_current_spot_alias false def
/AGMCORE_inverting false def
/AGMCORE_feature_dictCount nd
/AGMCORE_feature_opCount nd
/AGMCORE_feature_ctm nd
/AGMCORE_ConvertToProcess false def
/AGMCORE_Default_CTM matrix def
/AGMCORE_Default_PageSize nd
/AGMCORE_Default_flatness nd
/AGMCORE_currentbg nd
/AGMCORE_currentucr nd
/AGMCORE_pattern_paint_type 0 def
/knockout_unitsq nd
currentglobal true setglobal
[/CSA/Gradient/Procedure]
{
	/Generic/Category findresource dup length dict copy/Category defineresource pop
}forall
setglobal
/AGMCORE_key_known
{
	where{
		/Adobe_AGM_Core_Id known
	}{
		false
	}ifelse
}ndf
/flushinput
{
	save
	2 dict begin
	/CompareBuffer 3 -1 roll def
	/readbuffer 256 string def
	mark
	{
	currentfile readbuffer{readline}stopped
		{cleartomark mark}
		{
		not
			{pop exit}
		if
		CompareBuffer eq
			{exit}
		if
		}ifelse
	}loop
	cleartomark
	end
	restore
}bdf
/getspotfunction
{
	AGMCORE_screen exch pop exch pop
	dup type/dicttype eq{
		dup/HalftoneType get 1 eq{
			/SpotFunction get
		}{
			dup/HalftoneType get 2 eq{
				/GraySpotFunction get
			}{
				pop
				{
					abs exch abs 2 copy add 1 gt{
						1 sub dup mul exch 1 sub dup mul add 1 sub
					}{
						dup mul exch dup mul add 1 exch sub
					}ifelse
				}bind
			}ifelse
		}ifelse
	}if
}def
/np
{newpath}bdf
/clp_npth
{clip np}def
/eoclp_npth
{eoclip np}def
/npth_clp
{np clip}def
/graphic_setup
{
	/AGMCORE_graphicsave save store
	concat
	0 setgray
	0 setlinecap
	0 setlinejoin
	1 setlinewidth
	[]0 setdash
	10 setmiterlimit
	np
	false setoverprint
	false setstrokeadjust
	//Adobe_AGM_Core/spot_alias gx
	/Adobe_AGM_Image where{
		pop
		Adobe_AGM_Image/spot_alias 2 copy known{
			gx
		}{
			pop pop
		}ifelse
	}if
	/sep_colorspace_dict null AGMCORE_gput
	100 dict begin
	/dictstackcount countdictstack def
	/showpage{}def
	mark
}def
/graphic_cleanup
{
	cleartomark
	dictstackcount 1 countdictstack 1 sub{end}for
	end
	AGMCORE_graphicsave restore
}def
/compose_error_msg
{
	grestoreall initgraphics	
	/Helvetica findfont 10 scalefont setfont
	/AGMCORE_deltaY 100 def
	/AGMCORE_deltaX 310 def
	clippath pathbbox np pop pop 36 add exch 36 add exch moveto
	0 AGMCORE_deltaY rlineto AGMCORE_deltaX 0 rlineto
	0 AGMCORE_deltaY neg rlineto AGMCORE_deltaX neg 0 rlineto closepath
	0 AGMCORE_&setgray
	gsave 1 AGMCORE_&setgray fill grestore 
	1 setlinewidth gsave stroke grestore
	currentpoint AGMCORE_deltaY 15 sub add exch 8 add exch moveto
	/AGMCORE_deltaY 12 def
	/AGMCORE_tmp 0 def
	AGMCORE_err_strings exch get
		{
		dup 32 eq
			{
			pop
			AGMCORE_str256 0 AGMCORE_tmp getinterval
			stringwidth pop currentpoint pop add AGMCORE_deltaX 28 add gt
				{
				currentpoint AGMCORE_deltaY sub exch pop
				clippath pathbbox pop pop pop 44 add exch moveto
				}if
			AGMCORE_str256 0 AGMCORE_tmp getinterval show( )show
			0 1 AGMCORE_str256 length 1 sub
				{
				AGMCORE_str256 exch 0 put
				}for
			/AGMCORE_tmp 0 def
			}{
				AGMCORE_str256 exch AGMCORE_tmp xpt
				/AGMCORE_tmp AGMCORE_tmp 1 add def
			}ifelse
		}forall
}bdf
/AGMCORE_CMYKDeviceNColorspaces[
	[/Separation/None/DeviceCMYK{0 0 0}]
	[/Separation(Black)/DeviceCMYK{0 0 0 4 -1 roll}bind]
	[/Separation(Yellow)/DeviceCMYK{0 0 3 -1 roll 0}bind]
	[/DeviceN[(Yellow)(Black)]/DeviceCMYK{0 0 4 2 roll}bind]
	[/Separation(Magenta)/DeviceCMYK{0 exch 0 0}bind]
	[/DeviceN[(Magenta)(Black)]/DeviceCMYK{0 3 1 roll 0 exch}bind]
	[/DeviceN[(Magenta)(Yellow)]/DeviceCMYK{0 3 1 roll 0}bind]
	[/DeviceN[(Magenta)(Yellow)(Black)]/DeviceCMYK{0 4 1 roll}bind]
	[/Separation(Cyan)/DeviceCMYK{0 0 0}]
	[/DeviceN[(Cyan)(Black)]/DeviceCMYK{0 0 3 -1 roll}bind]
	[/DeviceN[(Cyan)(Yellow)]/DeviceCMYK{0 exch 0}bind]
	[/DeviceN[(Cyan)(Yellow)(Black)]/DeviceCMYK{0 3 1 roll}bind]
	[/DeviceN[(Cyan)(Magenta)]/DeviceCMYK{0 0}]
	[/DeviceN[(Cyan)(Magenta)(Black)]/DeviceCMYK{0 exch}bind]
	[/DeviceN[(Cyan)(Magenta)(Yellow)]/DeviceCMYK{0}]
	[/DeviceCMYK]
]def
/ds{
	Adobe_AGM_Core begin
	/currentdistillerparams where
		{
		pop currentdistillerparams/CoreDistVersion get 5000 lt
			{<</DetectBlends false>>setdistillerparams}if
		}if	
	/AGMCORE_ps_version xdf
	/AGMCORE_ps_level xdf
	errordict/AGM_handleerror known not{
		errordict/AGM_handleerror errordict/handleerror get put
		errordict/handleerror{
			Adobe_AGM_Core begin
			$error/newerror get AGMCORE_cur_err null ne and{
				$error/newerror false put
				AGMCORE_cur_err compose_error_msg
			}if
			$error/newerror true put
			end
			errordict/AGM_handleerror get exec
			}bind put
		}if
	/AGMCORE_environ_ok 
		ps_level AGMCORE_ps_level ge
		ps_version AGMCORE_ps_version ge and 
		AGMCORE_ps_level -1 eq or
	def
	AGMCORE_environ_ok not
		{/AGMCORE_cur_err/AGMCORE_bad_environ def}if
	/AGMCORE_&setgray systemdict/setgray get def
	level2{
		/AGMCORE_&setcolor systemdict/setcolor get def
		/AGMCORE_&setcolorspace systemdict/setcolorspace get def
	}if
	/AGMCORE_currentbg currentblackgeneration def
	/AGMCORE_currentucr currentundercolorremoval def
	/AGMCORE_Default_flatness currentflat def
	/AGMCORE_distilling
		/product where{
			pop systemdict/setdistillerparams known product(Adobe PostScript Parser)ne and
		}{
			false
		}ifelse
	def
	/AGMCORE_GSTATE AGMCORE_key_known not{
		/AGMCORE_GSTATE 21 dict def
		/AGMCORE_tmpmatrix matrix def
		/AGMCORE_gstack 64 array def
		/AGMCORE_gstackptr 0 def
		/AGMCORE_gstacksaveptr 0 def
		/AGMCORE_gstackframekeys 14 def
		/AGMCORE_&gsave/gsave ldf
		/AGMCORE_&grestore/grestore ldf
		/AGMCORE_&grestoreall/grestoreall ldf
		/AGMCORE_&save/save ldf
		/AGMCORE_&setoverprint/setoverprint ldf
		/AGMCORE_gdictcopy{
			begin
			{def}forall
			end
		}def
		/AGMCORE_gput{
			AGMCORE_gstack AGMCORE_gstackptr get
			3 1 roll
			put
		}def
		/AGMCORE_gget{
			AGMCORE_gstack AGMCORE_gstackptr get
			exch
			get
		}def
		/gsave{
			AGMCORE_&gsave
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/grestore{
			AGMCORE_&grestore
			AGMCORE_gstackptr 1 sub
			dup AGMCORE_gstacksaveptr lt{1 add}if
			dup AGMCORE_gstack exch get dup/AGMCORE_currentoverprint known
				{/AGMCORE_currentoverprint get setoverprint}{pop}ifelse
			/AGMCORE_gstackptr exch store
		}def
		/grestoreall{
			AGMCORE_&grestoreall
			/AGMCORE_gstackptr AGMCORE_gstacksaveptr store 
		}def
		/save{
			AGMCORE_&save
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gstackptr 1 add
			dup 64 ge{limitcheck}if
			/AGMCORE_gstackptr exch store
			/AGMCORE_gstacksaveptr AGMCORE_gstackptr store
			AGMCORE_gstack AGMCORE_gstackptr get
			AGMCORE_gdictcopy
		}def
		/setoverprint{
			dup/AGMCORE_currentoverprint exch AGMCORE_gput AGMCORE_&setoverprint
		}def	
		0 1 AGMCORE_gstack length 1 sub{
				AGMCORE_gstack exch AGMCORE_gstackframekeys dict put
		}for
	}if
	level3/AGMCORE_&sysshfill AGMCORE_key_known not and
	{
		/AGMCORE_&sysshfill systemdict/shfill get def
		/AGMCORE_&sysmakepattern systemdict/makepattern get def
		/AGMCORE_&usrmakepattern/makepattern load def
	}if
	/currentcmykcolor[0 0 0 0]AGMCORE_gput
	/currentstrokeadjust false AGMCORE_gput
	/currentcolorspace[/DeviceGray]AGMCORE_gput
	/sep_tint 0 AGMCORE_gput
	/devicen_tints[0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0 0]AGMCORE_gput
	/sep_colorspace_dict null AGMCORE_gput
	/devicen_colorspace_dict null AGMCORE_gput
	/indexed_colorspace_dict null AGMCORE_gput
	/currentcolor_intent()AGMCORE_gput
	/customcolor_tint 1 AGMCORE_gput
	/absolute_colorimetric_crd null AGMCORE_gput
	/relative_colorimetric_crd null AGMCORE_gput
	/saturation_crd null AGMCORE_gput
	/perceptual_crd null AGMCORE_gput
	currentcolortransfer cvlit/AGMCore_gray_xfer xdf cvlit/AGMCore_b_xfer xdf
		 cvlit/AGMCore_g_xfer xdf cvlit/AGMCore_r_xfer xdf
	<<
	/MaxPatternItem currentsystemparams/MaxPatternCache get
	>>
	setuserparams
	end
}def
/ps
{
	/setcmykcolor where{
		pop
		Adobe_AGM_Core/AGMCORE_&setcmykcolor/setcmykcolor load put
	}if
	Adobe_AGM_Core begin
	/setcmykcolor
	{
		4 copy AGMCORE_cmykbuf astore/currentcmykcolor exch AGMCORE_gput
		1 sub 4 1 roll
		3{
			3 index add neg dup 0 lt{
				pop 0
			}if
			3 1 roll
		}repeat
		setrgbcolor pop
	}ndf
	/currentcmykcolor
	{
		/currentcmykcolor AGMCORE_gget aload pop
	}ndf
	/setoverprint
	{pop}ndf
	/currentoverprint
	{false}ndf
	/AGMCORE_cyan_plate 1 0 0 0 test_cmyk_color_plate def
	/AGMCORE_magenta_plate 0 1 0 0 test_cmyk_color_plate def
	/AGMCORE_yellow_plate 0 0 1 0 test_cmyk_color_plate def
	/AGMCORE_black_plate 0 0 0 1 test_cmyk_color_plate def
	/AGMCORE_plate_ndx 
		AGMCORE_cyan_plate{
			0
		}{
			AGMCORE_magenta_plate{
				1
			}{
				AGMCORE_yellow_plate{
					2
				}{
					AGMCORE_black_plate{
						3
					}{
						4
					}ifelse
				}ifelse
			}ifelse
		}ifelse
		def
	/AGMCORE_have_reported_unsupported_color_space false def
	/AGMCORE_report_unsupported_color_space
	{
		AGMCORE_have_reported_unsupported_color_space false eq
		{
			(Warning: Job contains content that cannot be separated with on-host methods. This content appears on the black plate, and knocks out all other plates.)==
			Adobe_AGM_Core/AGMCORE_have_reported_unsupported_color_space true ddf
		}if
	}def
	/AGMCORE_composite_job
		AGMCORE_cyan_plate AGMCORE_magenta_plate and AGMCORE_yellow_plate and AGMCORE_black_plate and def
	/AGMCORE_in_rip_sep
		/AGMCORE_in_rip_sep where{
			pop AGMCORE_in_rip_sep
		}{
			AGMCORE_distilling 
			{
				false
			}{
				userdict/Adobe_AGM_OnHost_Seps known{
					false
				}{
					level2{
						currentpagedevice/Separations 2 copy known{
							get
						}{
							pop pop false
						}ifelse
					}{
						false
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	def
	/AGMCORE_producing_seps AGMCORE_composite_job not AGMCORE_in_rip_sep or def
	/AGMCORE_host_sep AGMCORE_producing_seps AGMCORE_in_rip_sep not and def
	/AGM_preserve_spots 
		/AGM_preserve_spots where{
			pop AGM_preserve_spots
		}{
			AGMCORE_distilling AGMCORE_producing_seps or
		}ifelse
	def
	/AGM_is_distiller_preserving_spotimages
	{
		currentdistillerparams/PreserveOverprintSettings known
		{
			currentdistillerparams/PreserveOverprintSettings get
				{
					currentdistillerparams/ColorConversionStrategy known
					{
						currentdistillerparams/ColorConversionStrategy get
						/sRGB ne
					}{
						true
					}ifelse
				}{
					false
				}ifelse
		}{
			false
		}ifelse
	}def
	/convert_spot_to_process where{pop}{
		/convert_spot_to_process
		{
			//Adobe_AGM_Core begin
			dup map_alias{
				/Name get exch pop
			}if
			dup dup(None)eq exch(All)eq or
				{
				pop false
				}{
				AGMCORE_host_sep
				{
					gsave
					1 0 0 0 setcmykcolor currentgray 1 exch sub
					0 1 0 0 setcmykcolor currentgray 1 exch sub
					0 0 1 0 setcmykcolor currentgray 1 exch sub
					0 0 0 1 setcmykcolor currentgray 1 exch sub
					add add add 0 eq
					{
						pop false
					}{
						false setoverprint
						current_spot_alias false set_spot_alias
						1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
						set_spot_alias
						currentgray 1 ne
					}ifelse
					grestore
				}{
					AGMCORE_distilling
					{
						pop AGM_is_distiller_preserving_spotimages not
					}{
						//Adobe_AGM_Core/AGMCORE_name xddf
						false
						//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 0 eq
						AGMUTIL_cpd/OverrideSeparations known and
						{
							AGMUTIL_cpd/OverrideSeparations get
							{
								/HqnSpots/ProcSet resourcestatus
								{
									pop pop pop true
								}if
							}if
						}if					
						{
							AGMCORE_name/HqnSpots/ProcSet findresource/TestSpot gx not
						}{
							gsave
							[/Separation AGMCORE_name/DeviceGray{}]AGMCORE_&setcolorspace
							false
							AGMUTIL_cpd/SeparationColorNames 2 copy known
							{
								get
								{AGMCORE_name eq or}forall
								not
							}{
								pop pop pop true
							}ifelse
							grestore
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			end
		}def
	}ifelse
	/convert_to_process where{pop}{
		/convert_to_process
		{
			dup length 0 eq
				{
				pop false
				}{
				AGMCORE_host_sep
				{
				dup true exch
					{
					dup(Cyan)eq exch
					dup(Magenta)eq 3 -1 roll or exch
					dup(Yellow)eq 3 -1 roll or exch
					dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process and}ifelse
					}
				forall
					{
					true exch
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						(Black)eq or and
						}forall
						not
					}{pop false}ifelse
				}{
				false exch
					{
					/PhotoshopDuotoneList where{pop false}{true}ifelse
						{
						dup(Cyan)eq exch
						dup(Magenta)eq 3 -1 roll or exch
						dup(Yellow)eq 3 -1 roll or exch
						dup(Black)eq 3 -1 roll or
						{pop}
						{convert_spot_to_process or}ifelse
						}
						{
						convert_spot_to_process or
						}
					ifelse
					}
				forall
				}ifelse
			}ifelse
		}def
	}ifelse	
	/AGMCORE_avoid_L2_sep_space 
		version cvr 2012 lt 
		level2 and 
		AGMCORE_producing_seps not and
	def
	/AGMCORE_is_cmyk_sep
		AGMCORE_cyan_plate AGMCORE_magenta_plate or AGMCORE_yellow_plate or AGMCORE_black_plate or
	def
	/AGM_avoid_0_cmyk where{
		pop AGM_avoid_0_cmyk
	}{
		AGM_preserve_spots 
		userdict/Adobe_AGM_OnHost_Seps known 
		userdict/Adobe_AGM_InRip_Seps known or
		not and
	}ifelse
	{
		/setcmykcolor[
			{
				4 copy add add add 0 eq currentoverprint and{
					pop 0.0005
				}if
			}/exec cvx
			/AGMCORE_&setcmykcolor load dup type/operatortype ne{
				/exec cvx
			}if
		]cvx def
	}if
	/AGMCORE_IsSeparationAProcessColor
		{
		dup(Cyan)eq exch dup(Magenta)eq exch dup(Yellow)eq exch(Black)eq or or or
		}def
	AGMCORE_host_sep{
		/setcolortransfer
		{
			AGMCORE_cyan_plate{
				pop pop pop
			}{
			 	AGMCORE_magenta_plate{
			 		4 3 roll pop pop pop
			 	}{
			 		AGMCORE_yellow_plate{
			 			4 2 roll pop pop pop
			 		}{
			 			4 1 roll pop pop pop
			 		}ifelse
			 	}ifelse
			}ifelse
			settransfer 
		}	
		def
		/AGMCORE_get_ink_data
			AGMCORE_cyan_plate{
				{pop pop pop}
			}{
			 	AGMCORE_magenta_plate{
			 		{4 3 roll pop pop pop}
			 	}{
			 		AGMCORE_yellow_plate{
			 			{4 2 roll pop pop pop}
			 		}{
			 			{4 1 roll pop pop pop}
			 		}ifelse
			 	}ifelse
			}ifelse
		def
		/AGMCORE_RemoveProcessColorNames
			{
			1 dict begin
			/filtername
				{
				dup/Cyan eq 1 index(Cyan)eq or
					{pop(_cyan_)}if
				dup/Magenta eq 1 index(Magenta)eq or
					{pop(_magenta_)}if
				dup/Yellow eq 1 index(Yellow)eq or
					{pop(_yellow_)}if
				dup/Black eq 1 index(Black)eq or
					{pop(_black_)}if
				}def
			dup type/arraytype eq
				{[exch{filtername}forall]}
				{filtername}ifelse
			end
			}def
		level3{
			/AGMCORE_IsCurrentColor
				{
				dup AGMCORE_IsSeparationAProcessColor
					{
					AGMCORE_plate_ndx 0 eq
						{dup(Cyan)eq exch/Cyan eq or}if
					AGMCORE_plate_ndx 1 eq
						{dup(Magenta)eq exch/Magenta eq or}if
					AGMCORE_plate_ndx 2 eq
						{dup(Yellow)eq exch/Yellow eq or}if
					AGMCORE_plate_ndx 3 eq
						{dup(Black)eq exch/Black eq or}if
					AGMCORE_plate_ndx 4 eq
						{pop false}if
					}{
					gsave
					false setoverprint
					current_spot_alias false set_spot_alias
					1 1 1 1 6 -1 roll findcmykcustomcolor 1 setcustomcolor
					set_spot_alias
					currentgray 1 ne
					grestore
					}ifelse
				}def
			/AGMCORE_filter_functiondatasource
				{	
				5 dict begin
				/data_in xdf
				data_in type/stringtype eq
					{
					/ncomp xdf
					/comp xdf
					/string_out data_in length ncomp idiv string def
					0 ncomp data_in length 1 sub
						{
						string_out exch dup ncomp idiv exch data_in exch ncomp getinterval comp get 255 exch sub put
						}for
					string_out
					}{
					string/string_in xdf
					/string_out 1 string def
					/component xdf
					[
					data_in string_in/readstring cvx
						[component/get cvx 255/exch cvx/sub cvx string_out/exch cvx 0/exch cvx/put cvx string_out]cvx
						[/pop cvx()]cvx/ifelse cvx
					]cvx/ReusableStreamDecode filter
				}ifelse
				end
				}def
			/AGMCORE_separateShadingFunction
				{
				2 dict begin
				/paint? xdf
				/channel xdf
				dup type/dicttype eq
					{
					begin
					FunctionType 0 eq
						{
						/DataSource channel Range length 2 idiv DataSource AGMCORE_filter_functiondatasource def
						currentdict/Decode known
							{/Decode Decode channel 2 mul 2 getinterval def}if
						paint? not
							{/Decode[1 1]def}if
						}if
					FunctionType 2 eq
						{
						paint?
							{
							/C0[C0 channel get 1 exch sub]def
							/C1[C1 channel get 1 exch sub]def
							}{
							/C0[1]def
							/C1[1]def
							}ifelse			
						}if
					FunctionType 3 eq
						{
						/Functions[Functions{channel paint? AGMCORE_separateShadingFunction}forall]def			
						}if
					currentdict/Range known
						{/Range[0 1]def}if
					currentdict
					end}{
					channel get 0 paint? AGMCORE_separateShadingFunction
					}ifelse
				end
				}def
			/AGMCORE_separateShading
				{
				3 -1 roll begin
				currentdict/Function known
					{
					currentdict/Background known
						{[1 index{Background 3 index get 1 exch sub}{1}ifelse]/Background xdf}if
					Function 3 1 roll AGMCORE_separateShadingFunction/Function xdf
					/ColorSpace[/DeviceGray]def
					}{
					ColorSpace dup type/arraytype eq{0 get}if/DeviceCMYK eq
						{
						/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
						}{
						ColorSpace dup 1 get AGMCORE_RemoveProcessColorNames 1 exch put
						}ifelse
					ColorSpace 0 get/Separation eq
						{
							{
								[1/exch cvx/sub cvx]cvx
							}{
								[/pop cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll put
							pop
						}{
							{
								[exch ColorSpace 1 get length 1 sub exch sub/index cvx 1/exch cvx/sub cvx ColorSpace 1 get length 1 add 1/roll cvx ColorSpace 1 get length{/pop cvx}repeat]cvx
							}{
								pop[ColorSpace 1 get length{/pop cvx}repeat cvx 1]cvx
							}ifelse
							ColorSpace 3 3 -1 roll bind put
						}ifelse
					ColorSpace 2/DeviceGray put																		
					}ifelse
				end
				}def
			/AGMCORE_separateShadingDict
				{
				dup/ColorSpace get
				dup type/arraytype ne
					{[exch]}if
				dup 0 get/DeviceCMYK eq
					{
					exch begin 
					currentdict
					AGMCORE_cyan_plate
						{0 true}if
					AGMCORE_magenta_plate
						{1 true}if
					AGMCORE_yellow_plate
						{2 true}if
					AGMCORE_black_plate
						{3 true}if
					AGMCORE_plate_ndx 4 eq
						{0 false}if		
					dup not currentoverprint and
						{/AGMCORE_ignoreshade true def}if
					AGMCORE_separateShading
					currentdict
					end exch
					}if
				dup 0 get/Separation eq
					{
					exch begin
					ColorSpace 1 get dup/None ne exch/All ne and
						{
						ColorSpace 1 get AGMCORE_IsCurrentColor AGMCORE_plate_ndx 4 lt and ColorSpace 1 get AGMCORE_IsSeparationAProcessColor not and
							{
							ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
								{
								/ColorSpace
									[
									/Separation
									ColorSpace 1 get
									/DeviceGray
										[
										ColorSpace 3 get/exec cvx
										4 AGMCORE_plate_ndx sub -1/roll cvx
										4 1/roll cvx
										3[/pop cvx]cvx/repeat cvx
										1/exch cvx/sub cvx
										]cvx									
									]def
								}{
								AGMCORE_report_unsupported_color_space
								AGMCORE_black_plate not
									{
									currentdict 0 false AGMCORE_separateShading
									}if
								}ifelse
							}{
							currentdict ColorSpace 1 get AGMCORE_IsCurrentColor
							0 exch 
							dup not currentoverprint and
								{/AGMCORE_ignoreshade true def}if
							AGMCORE_separateShading
							}ifelse	
						}if			
					currentdict
					end exch
					}if
				dup 0 get/DeviceN eq
					{
					exch begin
					ColorSpace 1 get convert_to_process
						{
						ColorSpace 2 get dup type/arraytype eq{0 get}if/DeviceCMYK eq 
							{
							/ColorSpace
								[
								/DeviceN
								ColorSpace 1 get
								/DeviceGray
									[
									ColorSpace 3 get/exec cvx
									4 AGMCORE_plate_ndx sub -1/roll cvx
									4 1/roll cvx
									3[/pop cvx]cvx/repeat cvx
									1/exch cvx/sub cvx
									]cvx									
								]def
							}{
							AGMCORE_report_unsupported_color_space
							AGMCORE_black_plate not
								{
								currentdict 0 false AGMCORE_separateShading
								/ColorSpace[/DeviceGray]def
								}if
							}ifelse
						}{
						currentdict
						false -1 ColorSpace 1 get
							{
							AGMCORE_IsCurrentColor
								{
								1 add
								exch pop true exch exit
								}if
							1 add
							}forall
						exch 
						dup not currentoverprint and
							{/AGMCORE_ignoreshade true def}if
						AGMCORE_separateShading
						}ifelse
					currentdict
					end exch
					}if
				dup 0 get dup/DeviceCMYK eq exch dup/Separation eq exch/DeviceN eq or or not
					{
					exch begin
					ColorSpace dup type/arraytype eq
						{0 get}if
					/DeviceGray ne
						{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate not
							{
							ColorSpace 0 get/CIEBasedA eq
								{
								/ColorSpace[/Separation/_ciebaseda_/DeviceGray{}]def
								}if
							ColorSpace 0 get dup/CIEBasedABC eq exch dup/CIEBasedDEF eq exch/DeviceRGB eq or or
								{
								/ColorSpace[/DeviceN[/_red_/_green_/_blue_]/DeviceRGB{}]def
								}if
							ColorSpace 0 get/CIEBasedDEFG eq
								{
								/ColorSpace[/DeviceN[/_cyan_/_magenta_/_yellow_/_black_]/DeviceCMYK{}]def
								}if
							currentdict 0 false AGMCORE_separateShading
							}if
						}if
					currentdict
					end exch
					}if
				pop
				dup/AGMCORE_ignoreshade known
					{
					begin
					/ColorSpace[/Separation(None)/DeviceGray{}]def
					currentdict end
					}if
				}def
			/shfill
				{
				AGMCORE_separateShadingDict 
				dup/AGMCORE_ignoreshade known
					{pop}
					{AGMCORE_&sysshfill}ifelse
				}def
			/makepattern
				{
				exch
				dup/PatternType get 2 eq
					{
					clonedict
					begin
					/Shading Shading AGMCORE_separateShadingDict def
					Shading/AGMCORE_ignoreshade known
					currentdict end exch
					{pop<</PatternType 1/PaintProc{pop}/BBox[0 0 1 1]/XStep 1/YStep 1/PaintType 1/TilingType 3>>}if
					exch AGMCORE_&sysmakepattern
					}{
					exch AGMCORE_&usrmakepattern
					}ifelse
				}def
		}if
	}if
	AGMCORE_in_rip_sep{
		/setcustomcolor
		{
			exch aload pop
			dup 7 1 roll inRip_spot_has_ink not	{
				4{4 index mul 4 1 roll}
				repeat
				/DeviceCMYK setcolorspace
				6 -2 roll pop pop
			}{
				//Adobe_AGM_Core begin
					/AGMCORE_k xdf/AGMCORE_y xdf/AGMCORE_m xdf/AGMCORE_c xdf
				end
				[/Separation 4 -1 roll/DeviceCMYK
				{dup AGMCORE_c mul exch dup AGMCORE_m mul exch dup AGMCORE_y mul exch AGMCORE_k mul}
				]
				setcolorspace
			}ifelse
			setcolor
		}ndf
		/setseparationgray
		{
			[/Separation(All)/DeviceGray{}]setcolorspace_opt
			1 exch sub setcolor
		}ndf
	}{
		/setseparationgray
		{
			AGMCORE_&setgray
		}ndf
	}ifelse
	/findcmykcustomcolor
	{
		5 makereadonlyarray
	}ndf
	/setcustomcolor
	{
		exch aload pop pop
		4{4 index mul 4 1 roll}repeat
		setcmykcolor pop
	}ndf
	/has_color
		/colorimage where{
			AGMCORE_producing_seps{
				pop true
			}{
				systemdict eq
			}ifelse
		}{
			false
		}ifelse
	def
	/map_index
	{
		1 index mul exch getinterval{255 div}forall
	}bdf
	/map_indexed_devn
	{
		Lookup Names length 3 -1 roll cvi map_index
	}bdf
	/n_color_components
	{
		base_colorspace_type
		dup/DeviceGray eq{
			pop 1
		}{
			/DeviceCMYK eq{
				4
			}{
				3
			}ifelse
		}ifelse
	}bdf
	level2{
		/mo/moveto ldf
		/li/lineto ldf
		/cv/curveto ldf
		/knockout_unitsq
		{
			1 setgray
			0 0 1 1 rectfill
		}def
		level2/setcolorspace AGMCORE_key_known not and{
			/AGMCORE_&&&setcolorspace/setcolorspace ldf
			/AGMCORE_ReplaceMappedColor
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					/AGMCORE_SpotAliasAry2 where{
						begin
						dup 0 get dup/Separation eq
						{
							pop
							dup length array copy
							dup dup 1 get
							current_spot_alias
							{
								dup map_alias
								{
									false set_spot_alias
									dup 1 exch setsepcolorspace
									true set_spot_alias
									begin
									/sep_colorspace_dict currentdict AGMCORE_gput
									pop pop	pop
									[
										/Separation Name 
										CSA map_csa
										MappedCSA 
										/sep_colorspace_proc load
									]
									dup Name
									end
								}if
							}if
							map_reserved_ink_name 1 xpt
						}{
							/DeviceN eq 
							{
								dup length array copy
								dup dup 1 get[
									exch{
										current_spot_alias{
											dup map_alias{
												/Name get exch pop
											}if
										}if
										map_reserved_ink_name
									}forall 
								]1 xpt
							}if
						}ifelse
						end
					}if
				}if
			}def
			/setcolorspace
			{
				dup type dup/arraytype eq exch/packedarraytype eq or
				{
					dup 0 get/Indexed eq
					{
						AGMCORE_distilling
						{
							/PhotoshopDuotoneList where
							{
								pop false
							}{
								true
							}ifelse
						}{
							true
						}ifelse
						{
							aload pop 3 -1 roll
							AGMCORE_ReplaceMappedColor
							3 1 roll 4 array astore
						}if
					}{
						AGMCORE_ReplaceMappedColor
					}ifelse
				}if
				DeviceN_PS2_inRip_seps{AGMCORE_&&&setcolorspace}if
			}def
		}if	
	}{
		/adj
		{
			currentstrokeadjust{
				transform
				0.25 sub round 0.25 add exch
				0.25 sub round 0.25 add exch
				itransform
			}if
		}def
		/mo{
			adj moveto
		}def
		/li{
			adj lineto
		}def
		/cv{
			6 2 roll adj
			6 2 roll adj
			6 2 roll adj curveto
		}def
		/knockout_unitsq
		{
			1 setgray
			8 8 1[8 0 0 8 0 0]{<ffffffffffffffff>}image
		}def
		/currentstrokeadjust{
			/currentstrokeadjust AGMCORE_gget
		}def
		/setstrokeadjust{
			/currentstrokeadjust exch AGMCORE_gput
		}def
		/setcolorspace
		{
			/currentcolorspace exch AGMCORE_gput
		}def
		/currentcolorspace
		{
			/currentcolorspace AGMCORE_gget
		}def
		/setcolor_devicecolor
		{
			base_colorspace_type
			dup/DeviceGray eq{
				pop setgray
			}{
				/DeviceCMYK eq{
					setcmykcolor
				}{
					setrgbcolor
				}ifelse
			}ifelse
		}def
		/setcolor
		{
			currentcolorspace 0 get
			dup/DeviceGray ne{
				dup/DeviceCMYK ne{
					dup/DeviceRGB ne{
						dup/Separation eq{
							pop
							currentcolorspace 3 gx
							currentcolorspace 2 get
						}{
							dup/Indexed eq{
								pop
								currentcolorspace 3 get dup type/stringtype eq{
									currentcolorspace 1 get n_color_components
									3 -1 roll map_index
								}{
									exec
								}ifelse
								currentcolorspace 1 get
							}{
								/AGMCORE_cur_err/AGMCORE_invalid_color_space def
								AGMCORE_invalid_color_space
							}ifelse
						}ifelse
					}if
				}if
			}if
			setcolor_devicecolor
		}def
	}ifelse
	/sop/setoverprint ldf
	/lw/setlinewidth ldf
	/lc/setlinecap ldf
	/lj/setlinejoin ldf
	/ml/setmiterlimit ldf
	/dsh/setdash ldf
	/sadj/setstrokeadjust ldf
	/gry/setgray ldf
	/rgb/setrgbcolor ldf
	/cmyk[
		/currentcolorspace[/DeviceCMYK]/AGMCORE_gput cvx
		/setcmykcolor load dup type/operatortype ne{/exec cvx}if
	]cvx bdf
	level3 AGMCORE_host_sep not and{
		/nzopmsc{
			6 dict begin
			/kk exch def
			/yy exch def
			/mm exch def
			/cc exch def
			/sum 0 def
			cc 0 ne{/sum sum 2#1000 or def cc}if
			mm 0 ne{/sum sum 2#0100 or def mm}if
			yy 0 ne{/sum sum 2#0010 or def yy}if
			kk 0 ne{/sum sum 2#0001 or def kk}if
			AGMCORE_CMYKDeviceNColorspaces sum get setcolorspace
			sum 0 eq{0}if
			end
			setcolor
		}bdf
	}{
		/nzopmsc/cmyk ldf
	}ifelse
	/sep/setsepcolor ldf
	/devn/setdevicencolor ldf
	/idx/setindexedcolor ldf
	/colr/setcolor ldf
	/csacrd/set_csa_crd ldf
	/sepcs/setsepcolorspace ldf
	/devncs/setdevicencolorspace ldf
	/idxcs/setindexedcolorspace ldf
	/cp/closepath ldf
	/clp/clp_npth ldf
	/eclp/eoclp_npth ldf
	/f/fill ldf
	/ef/eofill ldf
	/@/stroke ldf
	/nclp/npth_clp ldf
	/gset/graphic_setup ldf
	/gcln/graphic_cleanup ldf
	/ct/concat ldf
	/cf/currentfile ldf
	/fl/filter ldf
	/rs/readstring ldf
	/AGMCORE_def_ht currenthalftone def
	/clonedict Adobe_AGM_Utils begin/clonedict load end def
	/clonearray Adobe_AGM_Utils begin/clonearray load end def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
	/getrampcolor
	{
		/indx exch def
		0 1 NumComp 1 sub
		{
			dup
			Samples exch get
			dup type/stringtype eq{indx get}if
			exch
			Scaling exch get aload pop
			3 1 roll
			mul add
		}for
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse
	}bdf
	/sssetbackground{
		aload pop 
		ColorSpaceFamily/Separation eq 
		{sep}
		{
			ColorSpaceFamily/DeviceN eq
			{devn}{setcolor}ifelse
		}ifelse	
	}bdf
	/RadialShade
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/r2 xdf
		/c2y xdf
		/c2x xdf
		/r1 xdf
		/c1y xdf
		/c1x xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		c1x c2x eq
		{
			c1y c2y lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope c2y c1y sub c2x c1x sub div def
			/theta slope 1 atan def
			c2x c1x lt c2y c1y ge and{/theta theta 180 sub def}if
			c2x c1x lt c2y c1y lt and{/theta theta 180 add def}if
		}ifelse
		gsave
		clippath
		c1x c1y translate
		theta rotate
		-90 rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax xdf
		/xMax xdf
		/yMin xdf
		/xMin xdf
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			/max{2 copy gt{pop}{exch pop}ifelse}bdf
			/min{2 copy lt{pop}{exch pop}ifelse}bdf
			rampdict begin
			40 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			c1x c1y translate
			theta rotate
			-90 rotate
			/c2y c1x c2x sub dup mul c1y c2y sub dup mul add sqrt def
			/c1y 0 def
			/c1x 0 def
			/c2x 0 def
			ext0
			{
				0 getrampcolor
				c2y r2 add r1 sub 0.0001 lt
				{
					c1x c1y r1 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2y r1 add r2 le
					{
						c1x c1y r1 0 360 arc
						fill
					}
					{
						c2x c2y r2 0 360 arc fill
						r1 r2 eq
						{
							/p1x r1 neg def
							/p1y c1y def
							/p2x r1 def
							/p2y c1y def
							p1x p1y moveto p2x p2y lineto p2x yMin lineto p1x yMin lineto
							fill
						}{
							/AA r2 r1 sub c2y div def
							AA -1 eq
							{/theta 89.99 def}
							{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
							ifelse
							/SS1 90 theta add dup sin exch cos div def
							/p1x r1 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
							/p1y p1x SS1 div neg def
							/SS2 90 theta sub dup sin exch cos div def
							/p2x r1 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
							/p2y p2x SS2 div neg def
							r1 r2 gt
							{
								/L1maxX p1x yMin p1y sub SS1 div add def
								/L2maxX p2x yMin p2y sub SS2 div add def
							}{
								/L1maxX 0 def
								/L2maxX 0 def
							}ifelse
							p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
							L1maxX L1maxX p1x sub SS1 mul p1y add lineto
							fill
						}ifelse
					}ifelse
				}ifelse
			}if
		c1x c2x sub dup mul
		c1y c2y sub dup mul
		add 0.5 exp
		0 dtransform
		dup mul exch dup mul add 0.5 exp 72 div
		0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
		1 index 1 index lt{exch}if pop
		/hires xdf
		hires mul
		/numpix xdf
		/numsteps NumSamples def
		/rampIndxInc 1 def
		/subsampling false def
		numpix 0 ne
		{
			NumSamples numpix div 0.5 gt
			{
				/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
				/rampIndxInc NumSamples 1 sub numsteps div def
				/subsampling true def
			}if
		}if
		/xInc c2x c1x sub numsteps div def
		/yInc c2y c1y sub numsteps div def
		/rInc r2 r1 sub numsteps div def
		/cx c1x def
		/cy c1y def
		/radius r1 def
		np
		xInc 0 eq yInc 0 eq rInc 0 eq and and
		{
			0 getrampcolor
			cx cy radius 0 360 arc
			stroke
			NumSamples 1 sub getrampcolor
			cx cy radius 72 hires div add 0 360 arc
			0 setlinewidth
			stroke
		}{
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				cx cy radius 0 360 arc
				/cx cx xInc add def
				/cy cy yInc add def
				/radius radius rInc add def
				cx cy radius 360 0 arcn
				eofill
				rampIndxInc add
			}repeat
			pop
		}ifelse
		ext1
		{
			c2y r2 add r1 lt
			{
				c2x c2y r2 0 360 arc
				fill
			}{
				c2y r1 add r2 sub 0.0001 le
				{
					c2x c2y r2 360 0 arcn
					pathbbox
					/aymax exch def
					/axmax exch def
					/aymin exch def
					/axmin exch def
					/bxMin xMin axmin min def
					/byMin yMin aymin min def
					/bxMax xMax axmax max def
					/byMax yMax aymax max def
					bxMin byMin moveto
					bxMax byMin lineto
					bxMax byMax lineto
					bxMin byMax lineto
					bxMin byMin lineto
					eofill
				}{
					c2x c2y r2 0 360 arc fill
					r1 r2 eq
					{
						/p1x r2 neg def
						/p1y c2y def
						/p2x r2 def
						/p2y c2y def
						p1x p1y moveto p2x p2y lineto p2x yMax lineto p1x yMax lineto
						fill
					}{
						/AA r2 r1 sub c2y div def
						AA -1 eq
						{/theta 89.99 def}
						{/theta AA 1 AA dup mul sub sqrt div 1 atan def}
						ifelse
						/SS1 90 theta add dup sin exch cos div def
						/p1x r2 SS1 SS1 mul SS1 SS1 mul 1 add div sqrt mul neg def
						/p1y c2y p1x SS1 div sub def
						/SS2 90 theta sub dup sin exch cos div def
						/p2x r2 SS2 SS2 mul SS2 SS2 mul 1 add div sqrt mul def
						/p2y c2y p2x SS2 div sub def
						r1 r2 lt
						{
							/L1maxX p1x yMax p1y sub SS1 div add def
							/L2maxX p2x yMax p2y sub SS2 div add def
						}{
							/L1maxX 0 def
							/L2maxX 0 def
						}ifelse
						p1x p1y moveto p2x p2y lineto L2maxX L2maxX p2x sub SS2 mul p2y add lineto
						L1maxX L1maxX p1x sub SS1 mul p1y add lineto
						fill
					}ifelse
				}ifelse
			}ifelse
		}if
		grestore
		grestore
		end
		end
		end
		}ifelse
	}bdf
	/GenStrips
	{
		40 dict begin
		/ColorSpaceFamily xdf
		/background xdf
		/ext1 xdf
		/ext0 xdf
		/BBox xdf
		/y2 xdf
		/x2 xdf
		/y1 xdf
		/x1 xdf
		/rampdict xdf
		/setinkoverprint where{pop/setinkoverprint{pop}def}if
		gsave
		BBox length 0 gt
		{
			np
			BBox 0 get BBox 1 get moveto
			BBox 2 get BBox 0 get sub 0 rlineto
			0 BBox 3 get BBox 1 get sub rlineto
			BBox 2 get BBox 0 get sub neg 0 rlineto
			closepath
			clip
			np
		}if
		x1 x2 eq
		{
			y1 y2 lt{/theta 90 def}{/theta 270 def}ifelse
		}{
			/slope y2 y1 sub x2 x1 sub div def
			/theta slope 1 atan def
			x2 x1 lt y2 y1 ge and{/theta theta 180 sub def}if
			x2 x1 lt y2 y1 lt and{/theta theta 180 add def}if
		}
		ifelse
		gsave
		clippath
		x1 y1 translate
		theta rotate
		{pathbbox}stopped
		{0 0 0 0}if
		/yMax exch def
		/xMax exch def
		/yMin exch def
		/xMin exch def
		grestore
		xMax xMin eq yMax yMin eq or
		{
			grestore
			end
		}{
			rampdict begin
			20 dict begin
			background length 0 gt{background sssetbackground gsave clippath fill grestore}if
			gsave
			x1 y1 translate
			theta rotate
			/xStart 0 def
			/xEnd x2 x1 sub dup mul y2 y1 sub dup mul add 0.5 exp def
			/ySpan yMax yMin sub def
			/numsteps NumSamples def
			/rampIndxInc 1 def
			/subsampling false def
			xStart 0 transform
			xEnd 0 transform
			3 -1 roll
			sub dup mul
			3 1 roll
			sub dup mul
			add 0.5 exp 72 div
			0 72 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			72 0 matrix defaultmatrix dtransform dup mul exch dup mul add sqrt
			1 index 1 index lt{exch}if pop
			mul
			/numpix xdf
			numpix 0 ne
			{
				NumSamples numpix div 0.5 gt
				{
					/numsteps numpix 2 div round cvi dup 1 le{pop 2}if def
					/rampIndxInc NumSamples 1 sub numsteps div def
					/subsampling true def
				}if
			}if
			ext0
			{
				0 getrampcolor
				xMin xStart lt
				{
					xMin yMin xMin neg ySpan rectfill
				}if
			}if
			/xInc xEnd xStart sub numsteps div def
			/x xStart def
			0
			numsteps
			{
				dup
				subsampling{round cvi}if
				getrampcolor
				x yMin xInc ySpan rectfill
				/x x xInc add def
				rampIndxInc add
			}repeat
			pop
			ext1{
				xMax xEnd gt
				{
					xEnd yMin xMax xEnd sub ySpan rectfill
				}if
			}if
			grestore
			grestore
			end
			end
			end
		}ifelse
	}bdf
}def
/pt
{
	end
}def
/dt{
}def
/pgsv{
	//Adobe_AGM_Core/AGMCORE_save save put
}def
/pgrs{
	//Adobe_AGM_Core/AGMCORE_save get restore
}def
systemdict/findcolorrendering known{
	/findcolorrendering systemdict/findcolorrendering get def
}if
systemdict/setcolorrendering known{
	/setcolorrendering systemdict/setcolorrendering get def
}if
/test_cmyk_color_plate
{
	gsave
	setcmykcolor currentgray 1 ne
	grestore
}def
/inRip_spot_has_ink
{
	dup//Adobe_AGM_Core/AGMCORE_name xddf
	convert_spot_to_process not
}def
/map255_to_range
{
	1 index sub
	3 -1 roll 255 div mul add
}def
/set_csa_crd
{
	/sep_colorspace_dict null AGMCORE_gput
	begin
		CSA get_csa_by_name setcolorspace_opt
		set_crd
	end
}
def
/map_csa
{
	currentdict/MappedCSA known{MappedCSA null ne}{false}ifelse
	{pop}{get_csa_by_name/MappedCSA xdf}ifelse
}def
/setsepcolor
{
	/sep_colorspace_dict AGMCORE_gget begin
		dup/sep_tint exch AGMCORE_gput
		TintProc
	end
}def
/setdevicencolor
{
	/devicen_colorspace_dict AGMCORE_gget begin
		Names length copy
		Names length 1 sub -1 0
		{
			/devicen_tints AGMCORE_gget 3 1 roll xpt
		}for
		TintProc
	end
}def
/sep_colorspace_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	currentdict/Components known{
		Components aload pop 
		TintMethod/Lab eq{
			2{AGMCORE_tmp mul NComponents 1 roll}repeat
			LMax sub AGMCORE_tmp mul LMax add NComponents 1 roll
		}{
			TintMethod/Subtractive eq{
				NComponents{
					AGMCORE_tmp mul NComponents 1 roll
				}repeat
			}{
				NComponents{
					1 sub AGMCORE_tmp mul 1 add NComponents 1 roll
				}repeat
			}ifelse
		}ifelse
	}{
		ColorLookup AGMCORE_tmp ColorLookup length 1 sub mul round cvi get
		aload pop
	}ifelse
	end
}def
/sep_colorspace_gray_proc
{
	/AGMCORE_tmp exch store
	/sep_colorspace_dict AGMCORE_gget begin
	GrayLookup AGMCORE_tmp GrayLookup length 1 sub mul round cvi get
	end
}def
/sep_proc_name
{
	dup 0 get 
	dup/DeviceRGB eq exch/DeviceCMYK eq or level2 not and has_color not and{
		pop[/DeviceGray]
		/sep_colorspace_gray_proc
	}{
		/sep_colorspace_proc
	}ifelse
}def
/setsepcolorspace
{
	current_spot_alias{
		dup begin
			Name map_alias{
				exch pop
			}if
		end
	}if
	dup/sep_colorspace_dict exch AGMCORE_gput
	begin
	CSA map_csa
	/AGMCORE_sep_special Name dup()eq exch(All)eq or store
	AGMCORE_avoid_L2_sep_space{
		[/Indexed MappedCSA sep_proc_name 255 exch 
			{255 div}/exec cvx 3 -1 roll[4 1 roll load/exec cvx]cvx 
		]setcolorspace_opt
		/TintProc{
			255 mul round cvi setcolor
		}bdf
	}{
		MappedCSA 0 get/DeviceCMYK eq 
		currentdict/Components known and 
		AGMCORE_sep_special not and{
			/TintProc[
				Components aload pop Name findcmykcustomcolor 
				/exch cvx/setcustomcolor cvx
			]cvx bdf
		}{
 			AGMCORE_host_sep Name(All)eq and{
 				/TintProc{
					1 exch sub setseparationgray 
				}bdf
 			}{
				AGMCORE_in_rip_sep MappedCSA 0 get/DeviceCMYK eq and 
				AGMCORE_host_sep or
				Name()eq and{
					/TintProc[
						MappedCSA sep_proc_name exch 0 get/DeviceCMYK eq{
							cvx/setcmykcolor cvx
						}{
							cvx/setgray cvx
						}ifelse
					]cvx bdf
				}{
					AGMCORE_producing_seps MappedCSA 0 get dup/DeviceCMYK eq exch/DeviceGray eq or and AGMCORE_sep_special not and{
	 					/TintProc[
							/dup cvx
							MappedCSA sep_proc_name cvx exch
							0 get/DeviceGray eq{
								1/exch cvx/sub cvx 0 0 0 4 -1/roll cvx
							}if
							/Name cvx/findcmykcustomcolor cvx/exch cvx
							AGMCORE_host_sep{
								AGMCORE_is_cmyk_sep
								/Name cvx 
								/AGMCORE_IsSeparationAProcessColor load/exec cvx
								/not cvx/and cvx 
							}{
								Name inRip_spot_has_ink not
							}ifelse
							[
		 						/pop cvx 1
							]cvx/if cvx
							/setcustomcolor cvx
						]cvx bdf
 					}{
						/TintProc{setcolor}bdf
						[/Separation Name MappedCSA sep_proc_name load]setcolorspace_opt
					}ifelse
				}ifelse
			}ifelse
		}ifelse
	}ifelse
	set_crd
	setsepcolor
	end
}def
/additive_blend
{
 	3 dict begin
 	/numarrays xdf
 	/numcolors xdf
 	0 1 numcolors 1 sub
 		{
 		/c1 xdf
 		1
 		0 1 numarrays 1 sub
 			{
			1 exch add/index cvx
 			c1/get cvx/mul cvx
 			}for
 		numarrays 1 add 1/roll cvx 
 		}for
 	numarrays[/pop cvx]cvx/repeat cvx
 	end
}def
/subtractive_blend
{
	3 dict begin
	/numarrays xdf
	/numcolors xdf
	0 1 numcolors 1 sub
		{
		/c1 xdf
		1 1
		0 1 numarrays 1 sub
			{
			1 3 3 -1 roll add/index cvx 
			c1/get cvx/sub cvx/mul cvx
			}for
		/sub cvx
		numarrays 1 add 1/roll cvx
		}for
	numarrays[/pop cvx]cvx/repeat cvx
	end
}def
/exec_tint_transform
{
	/TintProc[
		/TintTransform cvx/setcolor cvx
	]cvx bdf
	MappedCSA setcolorspace_opt
}bdf
/devn_makecustomcolor
{
	2 dict begin
	/names_index xdf
	/Names xdf
	1 1 1 1 Names names_index get findcmykcustomcolor
	/devicen_tints AGMCORE_gget names_index get setcustomcolor
	Names length{pop}repeat
	end
}bdf
/setdevicencolorspace
{
	dup/AliasedColorants known{false}{true}ifelse 
	current_spot_alias and{
		7 dict begin
		/names_index 0 def
		dup/names_len exch/Names get length def
		/new_names names_len array def
		/new_LookupTables names_len array def
		/alias_cnt 0 def
		dup/Names get
		{
			dup map_alias{
				exch pop
				dup/ColorLookup known{
					dup begin
					new_LookupTables names_index ColorLookup put
					end
				}{
					dup/Components known{
						dup begin
						new_LookupTables names_index Components put
						end
					}{
						dup begin
						new_LookupTables names_index[null null null null]put
						end
					}ifelse
				}ifelse
				new_names names_index 3 -1 roll/Name get put
				/alias_cnt alias_cnt 1 add def 
			}{
				/name xdf				
				new_names names_index name put
				dup/LookupTables known{
					dup begin
					new_LookupTables names_index LookupTables names_index get put
					end
				}{
					dup begin
					new_LookupTables names_index[null null null null]put
					end
				}ifelse
			}ifelse
			/names_index names_index 1 add def 
		}forall
		alias_cnt 0 gt{
			/AliasedColorants true def
			/lut_entry_len new_LookupTables 0 get dup length 256 ge{0 get length}{length}ifelse def
			0 1 names_len 1 sub{
				/names_index xdf
				new_LookupTables names_index get dup length 256 ge{0 get length}{length}ifelse lut_entry_len ne{
					/AliasedColorants false def
					exit
				}{
					new_LookupTables names_index get 0 get null eq{
						dup/Names get names_index get/name xdf
						name(Cyan)eq name(Magenta)eq name(Yellow)eq name(Black)eq
						or or or not{
							/AliasedColorants false def
							exit
						}if
					}if
				}ifelse
			}for
			lut_entry_len 1 eq{
				/AliasedColorants false def
			}if
			AliasedColorants{
				dup begin
				/Names new_names def
				/LookupTables new_LookupTables def
				/AliasedColorants true def
				/NComponents lut_entry_len def
				/TintMethod NComponents 4 eq{/Subtractive}{/Additive}ifelse def
				/MappedCSA TintMethod/Additive eq{/DeviceRGB}{/DeviceCMYK}ifelse def
				currentdict/TTTablesIdx known not{
					/TTTablesIdx -1 def
				}if
				end
			}if
		}if
		end
	}if
	dup/devicen_colorspace_dict exch AGMCORE_gput
	begin
	currentdict/AliasedColorants known{
		AliasedColorants
	}{
		false
	}ifelse
	dup not{
		CSA map_csa
	}if
	/TintTransform load type/nulltype eq or{
		/TintTransform[
			0 1 Names length 1 sub
				{
				/TTTablesIdx TTTablesIdx 1 add def
				dup LookupTables exch get dup 0 get null eq
					{
					1 index
					Names exch get
					dup(Cyan)eq
						{
						pop exch
						LookupTables length exch sub
						/index cvx
						0 0 0
						}
						{
						dup(Magenta)eq
							{
							pop exch
							LookupTables length exch sub
							/index cvx
							0/exch cvx 0 0
							}{
							(Yellow)eq
								{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 3 -1/roll cvx 0
								}{
								exch
								LookupTables length exch sub
								/index cvx
								0 0 0 4 -1/roll cvx
								}ifelse
							}ifelse
						}ifelse
					5 -1/roll cvx/astore cvx
					}{
					dup length 1 sub
					LookupTables length 4 -1 roll sub 1 add
					/index cvx/mul cvx/round cvx/cvi cvx/get cvx
					}ifelse
					Names length TTTablesIdx add 1 add 1/roll cvx
				}for
			Names length[/pop cvx]cvx/repeat cvx
			NComponents Names length
 			TintMethod/Subtractive eq
 				{
 				subtractive_blend
 				}{
 				additive_blend
 				}ifelse
		]cvx bdf
	}if
	AGMCORE_host_sep{
		Names convert_to_process{
			exec_tint_transform
		}
		{	
			currentdict/AliasedColorants known{
				AliasedColorants not
			}{
				false
			}ifelse
			5 dict begin
			/AvoidAliasedColorants xdf
			/painted? false def
			/names_index 0 def
			/names_len Names length def
			AvoidAliasedColorants{
				/currentspotalias current_spot_alias def
				false set_spot_alias
			}if
			Names{
				AGMCORE_is_cmyk_sep{
					dup(Cyan)eq AGMCORE_cyan_plate and exch
					dup(Magenta)eq AGMCORE_magenta_plate and exch
					dup(Yellow)eq AGMCORE_yellow_plate and exch
					(Black)eq AGMCORE_black_plate and or or or{
						/devicen_colorspace_dict AGMCORE_gget/TintProc[
							Names names_index/devn_makecustomcolor cvx
						]cvx ddf
						/painted? true def
					}if
					painted?{exit}if
				}{
					0 0 0 0 5 -1 roll findcmykcustomcolor 1 setcustomcolor currentgray 0 eq{
					/devicen_colorspace_dict AGMCORE_gget/TintProc[
						Names names_index/devn_makecustomcolor cvx
					]cvx ddf
					/painted? true def
					exit
					}if
				}ifelse
				/names_index names_index 1 add def
			}forall
			AvoidAliasedColorants{
				currentspotalias set_spot_alias
			}if
			painted?{
				/devicen_colorspace_dict AGMCORE_gget/names_index names_index put
			}{
				/devicen_colorspace_dict AGMCORE_gget/TintProc[
					names_len[/pop cvx]cvx/repeat cvx 1/setseparationgray cvx
 					0 0 0 0/setcmykcolor cvx
				]cvx ddf
			}ifelse
			end
		}ifelse
	}
	{
		AGMCORE_in_rip_sep{
			Names convert_to_process not
		}{
			level3
		}ifelse
		{
			[/DeviceN Names MappedCSA/TintTransform load]setcolorspace_opt
			/TintProc level3 not AGMCORE_in_rip_sep and{
				[
					Names/length cvx[/pop cvx]cvx/repeat cvx
				]cvx bdf
			}{
				{setcolor}bdf
			}ifelse
		}{
			exec_tint_transform
		}ifelse
	}ifelse
	set_crd
	/AliasedColorants false def
	end
}def
/setindexedcolorspace
{
	dup/indexed_colorspace_dict exch AGMCORE_gput
	begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				currentdict devncs
			}{
				1 currentdict sepcs
			}ifelse
			AGMCORE_host_sep{
				4 dict begin
				/compCnt/Names where{pop Names length}{1}ifelse def
				/NewLookup HiVal 1 add string def
				0 1 HiVal{
					/tableIndex xdf
					Lookup dup type/stringtype eq{
						compCnt tableIndex map_index
					}{
						exec
					}ifelse
					/Names where{
						pop setdevicencolor
					}{
						setsepcolor
					}ifelse
					currentgray
					tableIndex exch
					255 mul cvi 
					NewLookup 3 1 roll put
				}for
				[/Indexed currentcolorspace HiVal NewLookup]setcolorspace_opt
				end
			}{
				level3
				{
					currentdict/Names known{
						[/Indexed[/DeviceN Names MappedCSA/TintTransform load]HiVal Lookup]setcolorspace_opt
					}{
						[/Indexed[/Separation Name MappedCSA sep_proc_name load]HiVal Lookup]setcolorspace_opt
					}ifelse
				}{
				[/Indexed MappedCSA HiVal
					[
					currentdict/Names known{
						Lookup dup type/stringtype eq
							{/exch cvx CSDBase/CSD get_res/Names get length dup/mul cvx exch/getinterval cvx{255 div}/forall cvx}
							{/exec cvx}ifelse
							/TintTransform load/exec cvx
					}{
						Lookup dup type/stringtype eq
							{/exch cvx/get cvx 255/div cvx}
							{/exec cvx}ifelse
							CSDBase/CSD get_res/MappedCSA get sep_proc_name exch pop/load cvx/exec cvx
					}ifelse
					]cvx
				]setcolorspace_opt
				}ifelse
			}ifelse
			end
			set_crd
		}
		{
			CSA map_csa
			AGMCORE_host_sep level2 not and{
				0 0 0 0 setcmykcolor
			}{
				[/Indexed MappedCSA 
				level2 not has_color not and{
					dup 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or{
						pop[/DeviceGray]
					}if
					HiVal GrayLookup
				}{
					HiVal 
					currentdict/RangeArray known{
						{
							/indexed_colorspace_dict AGMCORE_gget begin
							Lookup exch 
							dup HiVal gt{
								pop HiVal
							}if
							NComponents mul NComponents getinterval{}forall
							NComponents 1 sub -1 0{
								RangeArray exch 2 mul 2 getinterval aload pop map255_to_range
								NComponents 1 roll
							}for
							end
						}bind
					}{
						Lookup
					}ifelse
				}ifelse
				]setcolorspace_opt
				set_crd
			}ifelse
		}ifelse
	end
}def
/setindexedcolor
{
	AGMCORE_host_sep{
		/indexed_colorspace_dict AGMCORE_gget
		begin
		currentdict/CSDBase known{
			CSDBase/CSD get_res begin
			currentdict/Names known{
				map_indexed_devn
				devn
			}
			{
				Lookup 1 3 -1 roll map_index
				sep
			}ifelse
			end
		}{
			Lookup MappedCSA/DeviceCMYK eq{4}{1}ifelse 3 -1 roll
			map_index
			MappedCSA/DeviceCMYK eq{setcmykcolor}{setgray}ifelse
		}ifelse
		end
	}{
		level3 not AGMCORE_in_rip_sep and/indexed_colorspace_dict AGMCORE_gget/CSDBase known and{
			/indexed_colorspace_dict AGMCORE_gget/CSDBase get/CSD get_res begin
			map_indexed_devn
			devn
			end
		}
		{
			setcolor
		}ifelse
	}ifelse
}def
/ignoreimagedata
{
	currentoverprint not{
		gsave
		dup clonedict begin
		1 setgray
		/Decode[0 1]def
		/DataSource<FF>def
		/MultipleDataSources false def
		/BitsPerComponent 8 def
		currentdict end
		systemdict/image gx
		grestore
		}if
	consumeimagedata
}def
/add_res
{
	dup/CSD eq{
		pop 
		//Adobe_AGM_Core begin
		/AGMCORE_CSD_cache load 3 1 roll put
		end
	}{
		defineresource pop
	}ifelse
}def
/del_res
{
	{
		aload pop exch
		dup/CSD eq{
			pop 
			{//Adobe_AGM_Core/AGMCORE_CSD_cache get exch undef}forall
		}{
			exch
			{1 index undefineresource}forall
			pop
		}ifelse
	}forall
}def
/get_res
{
	dup/CSD eq{
		pop
		dup type dup/nametype eq exch/stringtype eq or{
			AGMCORE_CSD_cache exch get
		}if
	}{
		findresource
	}ifelse
}def
/get_csa_by_name
{
	dup type dup/nametype eq exch/stringtype eq or{
		/CSA get_res
	}if
}def
/paintproc_buf_init
{
	/count get 0 0 put
}def
/paintproc_buf_next
{
	dup/count get dup 0 get
	dup 3 1 roll
	1 add 0 xpt
	get				
}def
/cachepaintproc_compress
{
	5 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	/string_size 16000 def
	/readbuffer string_size string def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	/LZWFilter 
	{
		exch
		dup length 0 eq{
			pop
		}{
			ppdict dup length 1 sub 3 -1 roll put
		}ifelse
		{string_size}{0}ifelse string
	}/LZWEncode filter def
	{		
		ReadFilter readbuffer readstring
		exch LZWFilter exch writestring
		not{exit}if
	}loop
	LZWFilter closefile
	ppdict				
	end
}def
/cachepaintproc
{
	2 dict begin
	currentfile exch 0 exch/SubFileDecode filter/ReadFilter exch def
	/ppdict 20 dict def
	currentglobal true setglobal 
	ppdict 1 array dup 0 1 put/count xpt
	setglobal
	{
		ReadFilter 16000 string readstring exch
		ppdict dup length 1 sub 3 -1 roll put
		not{exit}if
	}loop
	ppdict dup dup length 1 sub()put					
	end	
}def
/make_pattern
{
	exch clonedict exch
	dup matrix currentmatrix matrix concatmatrix 0 0 3 2 roll itransform
	exch 3 index/XStep get 1 index exch 2 copy div cvi mul sub sub
	exch 3 index/YStep get 1 index exch 2 copy div cvi mul sub sub
	matrix translate exch matrix concatmatrix
			 1 index begin
		BBox 0 get XStep div cvi XStep mul/xshift exch neg def
		BBox 1 get YStep div cvi YStep mul/yshift exch neg def
		BBox 0 get xshift add
		BBox 1 get yshift add
		BBox 2 get xshift add
		BBox 3 get yshift add
		4 array astore
		/BBox exch def
		[xshift yshift/translate load null/exec load]dup
		3/PaintProc load put cvx/PaintProc exch def
		end
	gsave 0 setgray
	makepattern
	grestore
}def
/set_pattern
{
	dup/PatternType get 1 eq{
		dup/PaintType get 1 eq{
			currentoverprint sop[/DeviceGray]setcolorspace 0 setgray
		}if
	}if
	setpattern
}def
/setcolorspace_opt
{
	dup currentcolorspace eq{pop}{setcolorspace}ifelse
}def
/updatecolorrendering
{
	currentcolorrendering/RenderingIntent known{
		currentcolorrendering/RenderingIntent get
	}
	{
		Intent/AbsoluteColorimetric eq 
		{
			/absolute_colorimetric_crd AGMCORE_gget dup null eq
		}
		{
			Intent/RelativeColorimetric eq
			{
				/relative_colorimetric_crd AGMCORE_gget dup null eq
			}
			{
				Intent/Saturation eq
				{
					/saturation_crd AGMCORE_gget dup null eq
				}
				{
					/perceptual_crd AGMCORE_gget dup null eq
				}ifelse
			}ifelse
		}ifelse
		{
			pop null	
		}
		{
			/RenderingIntent known{null}{Intent}ifelse
		}ifelse
	}ifelse
	Intent ne{
		Intent/ColorRendering{findresource}stopped
		{
			pop pop systemdict/findcolorrendering known
			{
 				Intent findcolorrendering
 				{
 					/ColorRendering findresource true exch
 				}
 				{
 					/ColorRendering findresource
					product(Xerox Phaser 5400)ne
					exch
 				}ifelse
				dup Intent/AbsoluteColorimetric eq 
				{
					/absolute_colorimetric_crd exch AGMCORE_gput
				}
				{
					Intent/RelativeColorimetric eq
					{
						/relative_colorimetric_crd exch AGMCORE_gput
					}
					{
						Intent/Saturation eq
						{
							/saturation_crd exch AGMCORE_gput
						}
						{
							Intent/Perceptual eq
							{
								/perceptual_crd exch AGMCORE_gput
							}
							{
								pop
							}ifelse
						}ifelse
					}ifelse
				}ifelse
				1 index{exch}{pop}ifelse
			}
			{false}ifelse
		}
		{true}ifelse
		{
			dup begin
			currentdict/TransformPQR known{
				currentdict/TransformPQR get aload pop
				3{{}eq 3 1 roll}repeat or or
			}
			{true}ifelse
			currentdict/MatrixPQR known{
				currentdict/MatrixPQR get aload pop
				1.0 eq 9 1 roll 0.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 1.0 eq 9 1 roll 0.0 eq 9 1 roll
				0.0 eq 9 1 roll 0.0 eq 9 1 roll 1.0 eq
				and and and and and and and and
			}
			{true}ifelse
			end
			or
			{
				clonedict begin
				/TransformPQR[
					{4 -1 roll 3 get dup 3 1 roll sub 5 -1 roll 3 get 3 -1 roll sub div
					3 -1 roll 3 get 3 -1 roll 3 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 4 get dup 3 1 roll sub 5 -1 roll 4 get 3 -1 roll sub div
					3 -1 roll 4 get 3 -1 roll 4 get dup 4 1 roll sub mul add}bind
					{4 -1 roll 5 get dup 3 1 roll sub 5 -1 roll 5 get 3 -1 roll sub div
					3 -1 roll 5 get 3 -1 roll 5 get dup 4 1 roll sub mul add}bind
				]def
				/MatrixPQR[0.8951 -0.7502 0.0389 0.2664 1.7135 -0.0685 -0.1614 0.0367 1.0296]def
				/RangePQR[-0.3227950745 2.3229645538 -1.5003771057 3.5003465881 -0.1369979095 2.136967392]def
				currentdict end
			}if
			setcolorrendering_opt
		}if		
	}if
}def
/set_crd
{
	AGMCORE_host_sep not level2 and{
		currentdict/ColorRendering known{
			ColorRendering/ColorRendering{findresource}stopped not{setcolorrendering_opt}if
		}{
			currentdict/Intent known{
				updatecolorrendering
			}if
		}ifelse
		currentcolorspace dup type/arraytype eq
			{0 get}if
		/DeviceRGB eq
			{
			currentdict/UCR known
				{/UCR}{/AGMCORE_currentucr}ifelse
			load setundercolorremoval
			currentdict/BG known 
				{/BG}{/AGMCORE_currentbg}ifelse
			load setblackgeneration
			}if
	}if
}def
/set_ucrbg
{
	dup null eq {pop /AGMCORE_currentbg load}{/Procedure get_res}ifelse
	dup currentblackgeneration eq {pop}{setblackgeneration}ifelse
	dup null eq {pop /AGMCORE_currentucr load}{/Procedure get_res}ifelse
	dup currentundercolorremoval eq {pop}{setundercolorremoval}ifelse
}def
/setcolorrendering_opt
{
	dup currentcolorrendering eq{
		pop
	}{
		product(HP Color LaserJet 2605)anchorsearch{
			pop pop pop
		}{
			pop
			clonedict
			begin
				/Intent Intent def
				currentdict
			end
			setcolorrendering
		}ifelse
	}ifelse
}def
/cpaint_gcomp
{
	convert_to_process//Adobe_AGM_Core/AGMCORE_ConvertToProcess xddf
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get not
	{
		(%end_cpaint_gcomp)flushinput
	}if
}def
/cpaint_gsep
{
	//Adobe_AGM_Core/AGMCORE_ConvertToProcess get
	{	
		(%end_cpaint_gsep)flushinput
	}if
}def
/cpaint_gend
{np}def
/T1_path
{
	currentfile token pop currentfile token pop mo
	{
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 exch rlineto 
		currentfile token pop dup type/stringtype eq
			{pop exit}if 
		0 rlineto
	}loop
}def
/T1_gsave
	level3
	{/clipsave}
	{/gsave}ifelse
	load def
/T1_grestore
	level3
	{/cliprestore}
	{/grestore}ifelse 
	load def
/set_spot_alias_ary
{
	dup inherit_aliases
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry xddf
}def
/set_spot_normalization_ary
{
	dup inherit_aliases
	dup length
	/AGMCORE_SpotAliasAry where{pop AGMCORE_SpotAliasAry length add}if
	array
	//Adobe_AGM_Core/AGMCORE_SpotAliasAry2 xddf
	/AGMCORE_SpotAliasAry where{
		pop
		AGMCORE_SpotAliasAry2 0 AGMCORE_SpotAliasAry putinterval
		AGMCORE_SpotAliasAry length
	}{0}ifelse
	AGMCORE_SpotAliasAry2 3 1 roll exch putinterval
	true set_spot_alias
}def
/inherit_aliases
{
	{dup/Name get map_alias{/CSD put}{pop}ifelse}forall
}def
/set_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias 3 -1 roll put
	}{
		pop
	}ifelse
}def
/current_spot_alias
{
	/AGMCORE_SpotAliasAry2 where{
		/AGMCORE_current_spot_alias get
	}{
		false
	}ifelse
}def
/map_alias
{
	/AGMCORE_SpotAliasAry2 where{
		begin
			/AGMCORE_name xdf
			false	
			AGMCORE_SpotAliasAry2{
				dup/Name get AGMCORE_name eq{
					/CSD get/CSD get_res
					exch pop true
					exit
				}{
					pop
				}ifelse
			}forall
		end
	}{
		pop false
	}ifelse
}bdf
/spot_alias
{
	true set_spot_alias
	/AGMCORE_&setcustomcolor AGMCORE_key_known not{
		//Adobe_AGM_Core/AGMCORE_&setcustomcolor/setcustomcolor load put
	}if
	/customcolor_tint 1 AGMCORE_gput
	//Adobe_AGM_Core begin
	/setcustomcolor
	{
		//Adobe_AGM_Core begin
		dup/customcolor_tint exch AGMCORE_gput
		1 index aload pop pop 1 eq exch 1 eq and exch 1 eq and exch 1 eq and not
		current_spot_alias and{1 index 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/sep_colorspace_dict AGMCORE_gget null ne
			{/sep_colorspace_dict AGMCORE_gget/ForeignContent known not}{false}ifelse
			3 1 roll 2 index{
				exch pop/sep_tint AGMCORE_gget exch
			}if
			mark 3 1 roll
			setsepcolorspace
			counttomark 0 ne{
				setsepcolor
			}if
			pop
			not{/sep_tint 1.0 AGMCORE_gput/sep_colorspace_dict AGMCORE_gget/ForeignContent true put}if
			pop
			true set_spot_alias
		}{
			AGMCORE_&setcustomcolor
		}ifelse
		end
	}bdf
	end
}def
/begin_feature
{
	Adobe_AGM_Core/AGMCORE_feature_dictCount countdictstack put
	count Adobe_AGM_Core/AGMCORE_feature_opCount 3 -1 roll put
	{Adobe_AGM_Core/AGMCORE_feature_ctm matrix currentmatrix put}if
}def
/end_feature
{
	2 dict begin
	/spd/setpagedevice load def
	/setpagedevice{get_gstate spd set_gstate}def
	stopped{$error/newerror false put}if
	end
	count Adobe_AGM_Core/AGMCORE_feature_opCount get sub dup 0 gt{{pop}repeat}{pop}ifelse
	countdictstack Adobe_AGM_Core/AGMCORE_feature_dictCount get sub dup 0 gt{{end}repeat}{pop}ifelse
	{Adobe_AGM_Core/AGMCORE_feature_ctm get setmatrix}if
}def
/set_negative
{
	//Adobe_AGM_Core begin
	/AGMCORE_inverting exch def
	level2{
		currentpagedevice/NegativePrint known AGMCORE_distilling not and{
			currentpagedevice/NegativePrint get//Adobe_AGM_Core/AGMCORE_inverting get ne{
				true begin_feature true{
						<</NegativePrint//Adobe_AGM_Core/AGMCORE_inverting get>>setpagedevice
				}end_feature
			}if
			/AGMCORE_inverting false def
		}if
	}if
	AGMCORE_inverting{
		[{1 exch sub}/exec load dup currenttransfer exch]cvx bind settransfer
 		AGMCORE_distilling{
 			erasepage
 		}{
 			gsave np clippath 1/setseparationgray where{pop setseparationgray}{setgray}ifelse
 			/AGMIRS_&fill where{pop AGMIRS_&fill}{fill}ifelse grestore
 		}ifelse
	}if
	end
}def
/lw_save_restore_override{
	/md where{
		pop
		md begin
		initializepage
		/initializepage{}def
		/pmSVsetup{}def
		/endp{}def
		/pse{}def
		/psb{}def
		/orig_showpage where
			{pop}
			{/orig_showpage/showpage load def}
		ifelse
		/showpage{orig_showpage gR}def
		end
	}if
}def
/pscript_showpage_override{
	/NTPSOct95 where
	{
		begin
		showpage
		save
		/showpage/restore load def
		/restore{exch pop}def
		end
	}if
}def
/driver_media_override
{
	/md where{
		pop
		md/initializepage known{
			md/initializepage{}put
		}if
		md/rC known{
			md/rC{4{pop}repeat}put
		}if
	}if
	/mysetup where{
		/mysetup[1 0 0 1 0 0]put
	}if
	Adobe_AGM_Core/AGMCORE_Default_CTM matrix currentmatrix put
	level2
		{Adobe_AGM_Core/AGMCORE_Default_PageSize currentpagedevice/PageSize get put}if
}def
/capture_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup Pscript_Win_Data/mysetup get put
		}if
	}if
}def
/restore_mysetup
{
	/Pscript_Win_Data where{
		pop
		Pscript_Win_Data/mysetup known{
			Adobe_AGM_Core/save_mysetup known{
				Pscript_Win_Data/mysetup Adobe_AGM_Core/save_mysetup get put
				Adobe_AGM_Core/save_mysetup undef
			}if
		}if
	}if
}def
/driver_check_media_override
{
 	/PrepsDict where
 		{pop}
		{
		Adobe_AGM_Core/AGMCORE_Default_CTM get matrix currentmatrix ne
		Adobe_AGM_Core/AGMCORE_Default_PageSize get type/arraytype eq
			{
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 0 get currentpagedevice/PageSize get 0 get eq and
			Adobe_AGM_Core/AGMCORE_Default_PageSize get 1 get currentpagedevice/PageSize get 1 get eq and
			}if
			{
			Adobe_AGM_Core/AGMCORE_Default_CTM get setmatrix
			}if
		}ifelse
}def
AGMCORE_err_strings begin
	/AGMCORE_bad_environ(Environment not satisfactory for this job. Ensure that the PPD is correct or that the PostScript level requested is supported by this printer. )def
	/AGMCORE_color_space_onhost_seps(This job contains colors that will not separate with on-host methods. )def
	/AGMCORE_invalid_color_space(This job contains an invalid color space. )def
end
/set_def_ht
{AGMCORE_def_ht sethalftone}def
/set_def_flat
{AGMCORE_Default_flatness setflat}def
end
systemdict/setpacking known
{setpacking}if
%%EndResource
%%BeginResource: procset Adobe_CoolType_Core 2.31 0
%%Copyright: Copyright 1997-2006 Adobe Systems Incorporated. All Rights Reserved.
%%Version: 2.31 0
10 dict begin
/Adobe_CoolType_Passthru currentdict def
/Adobe_CoolType_Core_Defined userdict/Adobe_CoolType_Core known def
Adobe_CoolType_Core_Defined
	{/Adobe_CoolType_Core userdict/Adobe_CoolType_Core get def}
if
userdict/Adobe_CoolType_Core 70 dict dup begin put
/Adobe_CoolType_Version 2.31 def
/Level2?
	systemdict/languagelevel known dup
		{pop systemdict/languagelevel get 2 ge}
	if def
Level2? not
	{
	/currentglobal false def
	/setglobal/pop load def
	/gcheck{pop false}bind def
	/currentpacking false def
	/setpacking/pop load def
	/SharedFontDirectory 0 dict def
	}
if
currentpacking
true setpacking
currentglobal false setglobal
userdict/Adobe_CoolType_Data 2 copy known not
	{2 copy 10 dict put}
if
get
	 begin
	/@opStackCountByLevel 32 dict def
	/@opStackLevel 0 def
	/@dictStackCountByLevel 32 dict def
	/@dictStackLevel 0 def
	 end
setglobal
currentglobal true setglobal
userdict/Adobe_CoolType_GVMFonts known not
	{userdict/Adobe_CoolType_GVMFonts 10 dict put}
if
setglobal
currentglobal false setglobal
userdict/Adobe_CoolType_LVMFonts known not
	{userdict/Adobe_CoolType_LVMFonts 10 dict put}
if
setglobal
/ct_VMDictPut
	{
	dup gcheck{Adobe_CoolType_GVMFonts}{Adobe_CoolType_LVMFonts}ifelse
	3 1 roll put
	}bind def
/ct_VMDictUndef
	{
	dup Adobe_CoolType_GVMFonts exch known
		{Adobe_CoolType_GVMFonts exch undef}
		{
			dup Adobe_CoolType_LVMFonts exch known
			{Adobe_CoolType_LVMFonts exch undef}
			{pop}
			ifelse
		}ifelse
	}bind def
/ct_str1 1 string def
/ct_xshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_yshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			_ct_x _ct_y moveto
			0 exch
			rmoveto
		}
		ifelse
		/_ct_i _ct_i 1 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/ct_xyshow
{
	/_ct_na exch def
	/_ct_i 0 def
	currentpoint
	/_ct_y exch def
	/_ct_x exch def
	{
		pop pop
		ct_str1 exch 0 exch put
		ct_str1 show
		{_ct_na _ct_i get}stopped 
		{pop pop}
		{
			{_ct_na _ct_i 1 add get}stopped 
			{pop pop pop}
			{
				_ct_x _ct_y moveto
				rmoveto
			}
			ifelse
		}
		ifelse
		/_ct_i _ct_i 2 add def
		currentpoint
		/_ct_y exch def
		/_ct_x exch def
	}
	exch
	@cshow
}bind def
/xsh{{@xshow}stopped{Adobe_CoolType_Data begin ct_xshow end}if}bind def
/ysh{{@yshow}stopped{Adobe_CoolType_Data begin ct_yshow end}if}bind def
/xysh{{@xyshow}stopped{Adobe_CoolType_Data begin ct_xyshow end}if}bind def
currentglobal true setglobal
/ct_T3Defs
{
/BuildChar
{
	1 index/Encoding get exch get
	1 index/BuildGlyph get exec
}bind def
/BuildGlyph
{
	exch begin
	GlyphProcs exch get exec
	end
}bind def
}bind def
setglobal
/@_SaveStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@vmState currentglobal def false setglobal
		@opStackCountByLevel
		@opStackLevel
		2 copy known not
			{
			2 copy
			3 dict dup/args
			7 index
			5 add array put
			put get
			}
			{
			get dup/args get dup length 3 index lt
				{
				dup length 5 add array exch
				1 index exch 0 exch putinterval
				1 index exch/args exch put
				}
				{pop}
			ifelse
			}
		ifelse
			begin
			count 1 sub
			1 index lt
				{pop count}
			if
			dup/argCount exch def
			dup 0 gt
				{
				args exch 0 exch getinterval 
			astore pop
				}
				{pop}
			ifelse
			count
			/restCount exch def
			end
		/@opStackLevel @opStackLevel 1 add def
		countdictstack 1 sub
		@dictStackCountByLevel exch @dictStackLevel exch put
		/@dictStackLevel @dictStackLevel 1 add def
		@vmState setglobal
		end
	}bind def
/@_RestoreStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		@opStackCountByLevel @opStackLevel get
			begin
			count restCount sub dup 0 gt
				{{pop}repeat}
				{pop}
			ifelse
			args 0 argCount getinterval{}forall
			end
		/@dictStackLevel @dictStackLevel 1 sub def
		@dictStackCountByLevel @dictStackLevel get
		end
	countdictstack exch sub dup 0 gt
		{{end}repeat}
		{pop}
	ifelse
	}bind def
/@_PopStackLevels
	{
	Adobe_CoolType_Data
		begin
		/@opStackLevel @opStackLevel 1 sub def
		/@dictStackLevel @dictStackLevel 1 sub def
		end
	}bind def
/@Raise
	{
	exch cvx exch errordict exch get exec
	stop
	}bind def
/@ReRaise
	{
	cvx $error/errorname get errordict exch get exec
	stop
	}bind def
/@Stopped
	{
	0 @#Stopped
	}bind def
/@#Stopped
	{
	@_SaveStackLevels
	stopped
		{@_RestoreStackLevels true}
		{@_PopStackLevels false}
	ifelse
	}bind def
/@Arg
	{
	Adobe_CoolType_Data
		begin
		@opStackCountByLevel @opStackLevel 1 sub get
		begin
		args exch
		argCount 1 sub exch sub get
		end
		end
	}bind def
currentglobal true setglobal
/CTHasResourceForAllBug
	Level2?
		{
		1 dict dup
				/@shouldNotDisappearDictValue true def
				Adobe_CoolType_Data exch/@shouldNotDisappearDict exch put
				begin
				count @_SaveStackLevels
					{(*){pop stop}128 string/Category resourceforall}
				stopped pop
				@_RestoreStackLevels
				currentdict Adobe_CoolType_Data/@shouldNotDisappearDict get dup 3 1 roll ne dup 3 1 roll
					{
						 /@shouldNotDisappearDictValue known
								{
										 {
												end
												currentdict 1 index eq
													{pop exit}
												if
										 }
									 loop
								}
						 if
					}
					{
						 pop
						 end
					}
				ifelse
		}
		{false}
	ifelse
	def
true setglobal
/CTHasResourceStatusBug
	Level2?
		{
		mark
			{/steveamerige/Category resourcestatus}
		stopped
			{cleartomark true}
			{cleartomark currentglobal not}
		ifelse
		}
		{false}
	ifelse
	def
setglobal
/CTResourceStatus
		{
		mark 3 1 roll
		/Category findresource
			begin
			({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
				{cleartomark false}
				{{3 2 roll pop true}{cleartomark false}ifelse}
			ifelse
			end
		}bind def
/CTWorkAroundBugs
	{
	Level2?
		{
		/cid_PreLoad/ProcSet resourcestatus
			{
			pop pop
			currentglobal
			mark
				{
				(*)
					{
					dup/CMap CTHasResourceStatusBug
						{CTResourceStatus}
						{resourcestatus}
					ifelse
						{
						pop dup 0 eq exch 1 eq or
							{
							dup/CMap findresource gcheck setglobal
							/CMap undefineresource
							}
							{
							pop CTHasResourceForAllBug
								{exit}
								{stop}
							ifelse
							}
						ifelse
						}
						{pop}
					ifelse
					}
				128 string/CMap resourceforall
				}
			stopped
				{cleartomark}
			stopped pop
			setglobal
			}
		if
		}
	if
	}bind def
/ds
	{
	Adobe_CoolType_Core
		begin
		CTWorkAroundBugs
		/mo/moveto load def
		/nf/newencodedfont load def
		/msf{makefont setfont}bind def
		/uf{dup undefinefont ct_VMDictUndef}bind def
		/ur/undefineresource load def
		/chp/charpath load def
		/awsh/awidthshow load def
		/wsh/widthshow load def
		/ash/ashow load def
		/@xshow/xshow load def
		/@yshow/yshow load def
		/@xyshow/xyshow load def
		/@cshow/cshow load def
		/sh/show load def
		/rp/repeat load def
		/.n/.notdef def
		end
		currentglobal false setglobal
	 userdict/Adobe_CoolType_Data 2 copy known not
		 {2 copy 10 dict put}
		if
		get
		begin
		/AddWidths? false def
		/CC 0 def
		/charcode 2 string def
		/@opStackCountByLevel 32 dict def
		/@opStackLevel 0 def
		/@dictStackCountByLevel 32 dict def
		/@dictStackLevel 0 def
		/InVMFontsByCMap 10 dict def
		/InVMDeepCopiedFonts 10 dict def
		end
		setglobal
	}bind def
/dt
	{
	currentdict Adobe_CoolType_Core eq
		{end}
	if
	}bind def
/ps
	{
	Adobe_CoolType_Core begin
	Adobe_CoolType_GVMFonts begin
	Adobe_CoolType_LVMFonts begin
	SharedFontDirectory begin
	}bind def
/pt
	{
	end
	end
	end
	end
	}bind def
/unload
	{
	systemdict/languagelevel known
		{
		systemdict/languagelevel get 2 ge
			{
			userdict/Adobe_CoolType_Core 2 copy known
				{undef}
				{pop pop}
			ifelse
			}
		if
		}
	if
	}bind def
/ndf
	{
	1 index where
		{pop pop pop}
		{dup xcheck{bind}if def}
	ifelse
	}def
/findfont systemdict
	begin
	userdict
		begin
		/globaldict where{/globaldict get begin}if
			dup where pop exch get
		/globaldict where{pop end}if
		end
	end
Adobe_CoolType_Core_Defined
	{/systemfindfont exch def}
	{
	/findfont 1 index def
	/systemfindfont exch def
	}
ifelse
/undefinefont
	{pop}ndf
/copyfont
	{
	currentglobal 3 1 roll
	1 index gcheck setglobal
	dup null eq{0}{dup length}ifelse
	2 index length add 1 add dict
		begin
		exch
			{
			1 index/FID eq
				{pop pop}
				{def}
			ifelse
			}
		forall
		dup null eq
			{pop}
			{{def}forall}
		ifelse
		currentdict
		end
	exch setglobal
	}bind def
/copyarray
	{
	currentglobal exch
	dup gcheck setglobal
	dup length array copy
	exch setglobal
	}bind def
/newencodedfont
	{
	currentglobal
		{
		SharedFontDirectory 3 index known
			{SharedFontDirectory 3 index get/FontReferenced known}
			{false}
		ifelse
		}
		{
		FontDirectory 3 index known
			{FontDirectory 3 index get/FontReferenced known}
			{
			SharedFontDirectory 3 index known
				{SharedFontDirectory 3 index get/FontReferenced known}
				{false}
			ifelse
			}
		ifelse
		}
	ifelse
	dup
		{
		3 index findfont/FontReferenced get
		2 index dup type/nametype eq
			{findfont}
		if ne
			{pop false}
		if
		}
	if
	dup
		{
		1 index dup type/nametype eq
			{findfont}
		 if
		dup/CharStrings known
			{
			/CharStrings get length
			4 index findfont/CharStrings get length
			ne
				{
				pop false
				}
			if 
			}
			{pop}
			ifelse
		}
	if
		{
		pop
		1 index findfont
		/Encoding get exch
		0 1 255
			{2 copy get 3 index 3 1 roll put}
		for
		pop pop pop
		}
		{
		currentglobal
	 4 1 roll
		dup type/nametype eq
		 {findfont}
	 if
	 dup gcheck setglobal
		dup dup maxlength 2 add dict
			begin
			exch
				{
				1 index/FID ne
				2 index/Encoding ne and
					{def}
					{pop pop}
				ifelse
				}
			forall
			/FontReferenced exch def
			/Encoding exch dup length array copy def
			/FontName 1 index dup type/stringtype eq{cvn}if def dup
			currentdict
			end
		definefont ct_VMDictPut
		setglobal
		}
	ifelse
	}bind def
/SetSubstituteStrategy
	{
	$SubstituteFont
		begin
		dup type/dicttype ne
			{0 dict}
		if
		currentdict/$Strategies known
			{
			exch $Strategies exch 
			2 copy known
				{
				get
				2 copy maxlength exch maxlength add dict
					begin
					{def}forall
					{def}forall
					currentdict
					dup/$Init known
						{dup/$Init get exec}
					if
					end
				/$Strategy exch def
				}
				{pop pop pop}
			ifelse
			}
			{pop pop}
		ifelse
		end
	}bind def
/scff
	{
	$SubstituteFont
		begin
		dup type/stringtype eq
			{dup length exch}
			{null}
		ifelse
		/$sname exch def
		/$slen exch def
		/$inVMIndex
			$sname null eq
				{
				1 index $str cvs
				dup length $slen sub $slen getinterval cvn
				}
				{$sname}
			ifelse def
		end
		{findfont}
	@Stopped
		{
		dup length 8 add string exch
		1 index 0(BadFont:)putinterval
		1 index exch 8 exch dup length string cvs putinterval cvn
			{findfont}
		@Stopped
			{pop/Courier findfont}
		if
		}
	if
	$SubstituteFont
		begin
		/$sname null def
		/$slen 0 def
		/$inVMIndex null def
		end
	}bind def
/isWidthsOnlyFont
	{
	dup/WidthsOnly known
		{pop pop true}
		{
		dup/FDepVector known
			{/FDepVector get{isWidthsOnlyFont dup{exit}if}forall}
			{
			dup/FDArray known
				{/FDArray get{isWidthsOnlyFont dup{exit}if}forall}
				{pop}
			ifelse
			}
		ifelse
		}
	ifelse
	}bind def
/ct_StyleDicts 4 dict dup begin
		 /Adobe-Japan1 4 dict dup begin
					 Level2?
								{
								/Serif
								/HeiseiMin-W3-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMin-W3}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMin-W3/CIDFont resourcestatus
								{pop pop/HeiseiMin-W3}
								{/Ryumin-Light}
								ifelse
							}
							{/Ryumin-Light}
							ifelse
								}
								ifelse
								def
								/SansSerif
								/HeiseiKakuGo-W5-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiKakuGo-W5/CIDFont resourcestatus
								{pop pop/HeiseiKakuGo-W5}
								{/GothicBBB-Medium}
								ifelse
							}
							{/GothicBBB-Medium}
							ifelse
								}
								ifelse
								def
								/HeiseiMaruGo-W4-83pv-RKSJ-H/Font resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
							/CIDFont/Category resourcestatus
							{
								pop pop
								/HeiseiMaruGo-W4/CIDFont resourcestatus
								{pop pop/HeiseiMaruGo-W4}
								{
									/Jun101-Light-RKSJ-H/Font resourcestatus
									{pop pop/Jun101-Light}
									{SansSerif}
									ifelse
								}
								ifelse
							}
							{
								/Jun101-Light-RKSJ-H/Font resourcestatus
								{pop pop/Jun101-Light}
								{SansSerif}
								ifelse
							}
							ifelse
								}
								ifelse
								/RoundSansSerif exch def
								/Default Serif def
								}
								{
								/Serif/Ryumin-Light def
								/SansSerif/GothicBBB-Medium def
								{
								(fonts/Jun101-Light-83pv-RKSJ-H)status
								}stopped
								{pop}{
										 {pop pop pop pop/Jun101-Light}
										 {SansSerif}
										 ifelse
										 /RoundSansSerif exch def
								}ifelse
								/Default Serif def
								}
					 ifelse
		 end
		 def
		 /Adobe-Korea1 4 dict dup begin
					/Serif/HYSMyeongJo-Medium def
					/SansSerif/HYGoThic-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-GB1 4 dict dup begin
					/Serif/STSong-Light def
					/SansSerif/STHeiti-Regular def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
		 /Adobe-CNS1 4 dict dup begin
					/Serif/MKai-Medium def
					/SansSerif/MHei-Medium def
					/RoundSansSerif SansSerif def
					/Default Serif def
		 end
		 def
end
def
Level2?{currentglobal true setglobal}if
/ct_BoldRomanWidthProc 
	{
	stringwidth 1 index 0 ne{exch .03 add exch}if setcharwidth
	0 0
	}bind def
/ct_Type0WidthProc 
	{
	 dup stringwidth 0 0 moveto 
	 2 index true charpath pathbbox
	 0 -1 
	 7 index 2 div .88 
	 setcachedevice2
	 pop
	0 0
	}bind def
/ct_Type0WMode1WidthProc 
	{
	 dup stringwidth 
	 pop 2 div neg -0.88
	2 copy
	moveto 
	0 -1
	 5 -1 roll true charpath pathbbox
	 setcachedevice
	}bind def
/cHexEncoding
[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
/ct_BoldBaseFont 
	 11 dict begin
		/FontType 3 def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/Encoding cHexEncoding def 
		/_setwidthProc/ct_BoldRomanWidthProc load def
		/_bcstr1 1 string def
		/BuildChar
		{
			exch begin
				_basefont setfont
				_bcstr1 dup 0 4 -1 roll put
				dup 
				_setwidthProc
				3 copy 
				moveto				
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
systemdict/composefont known
{
/ct_DefineIdentity-H
{
	/Identity-H/CMap resourcestatus
	{
		pop pop
	}
	{
		/CIDInit/ProcSet findresource begin
		 12 dict begin
		 begincmap
		 /CIDSystemInfo 3 dict dup begin
			 /Registry(Adobe)def
			 /Ordering(Identity)def
			 /Supplement 0 def
		 end def
		 /CMapName/Identity-H def
		 /CMapVersion 1.000 def
		 /CMapType 1 def
		 1 begincodespacerange
		 <0000><FFFF>
		 endcodespacerange
		 1 begincidrange
		 <0000><FFFF>0
		 endcidrange
		 endcmap
		 CMapName currentdict/CMap defineresource pop
		 end
		 end
	 }
	 ifelse
}
def
/ct_BoldBaseCIDFont 
	 11 dict begin
		/CIDFontType 1 def
		/CIDFontName/ct_BoldBaseCIDFont def
		/FontMatrix[1 0 0 1 0 0]def
		/FontBBox[0 0 1 1]def
		/_setwidthProc/ct_Type0WidthProc load def
		/_bcstr2 2 string def
		/BuildGlyph
		{
			exch begin		 
				_basefont setfont
				_bcstr2 1 2 index 256 mod put
				_bcstr2 0 3 -1 roll 256 idiv put
				_bcstr2 dup _setwidthProc		 
				3 copy 
				moveto
				show
				_basefonto setfont
				moveto
				show
			end
		}bind def
		 currentdict
	 end 
def
}if
Level2?{setglobal}if
/ct_CopyFont{
	{
		1 index/FID ne 2 index/UniqueID ne and
		{def}{pop pop}ifelse
	}forall
}bind def
/ct_Type0CopyFont 
{
	exch
	dup length dict
	begin
	ct_CopyFont
	[
	exch
	FDepVector 
	{
		 dup/FontType get 0 eq
		{	
		1 index ct_Type0CopyFont 
		/_ctType0 exch definefont
		}
		{
		/_ctBaseFont exch
		2 index exec
		}
		 ifelse 
		 exch
	}
	forall 
	pop
	]				
	/FDepVector exch def
	currentdict
	end
}bind def
/ct_MakeBoldFont
{
	 dup/ct_SyntheticBold known
	{
		dup length 3 add dict begin 
		ct_CopyFont 
		/ct_StrokeWidth .03 0 FontMatrix idtransform pop def 
		/ct_SyntheticBold true def
		currentdict 
		end 
		definefont
	}
	{
		dup dup length 3 add dict
		begin
			ct_CopyFont
			/PaintType 2 def
			/StrokeWidth .03 0 FontMatrix idtransform pop def
			/dummybold currentdict
		end
		definefont
		dup/FontType get dup 9 ge exch 11 le and 
		{
			ct_BoldBaseCIDFont
			dup length 3 add dict copy begin
			dup/CIDSystemInfo get/CIDSystemInfo exch def
			ct_DefineIdentity-H
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefont exch def
			/_Type0Identity/Identity-H 3 -1 roll[exch]composefont
			/_basefonto exch def
			currentdict
			end
			/CIDFont defineresource
		}
		{
			ct_BoldBaseFont
			dup length 3 add dict copy begin
			/_basefont exch def
			/_basefonto exch def
			currentdict
			end
			definefont
		}
		ifelse
	}
	ifelse
}bind def
/ct_MakeBold{
	1 index 
	1 index
	findfont
	currentglobal 5 1 roll
	dup gcheck setglobal
		dup
		 /FontType get 0 eq
			{
				dup/WMode known{dup/WMode get 1 eq}{false}ifelse
				version length 4 ge
				and
					{version 0 4 getinterval cvi 2015 ge}
					{true}
				ifelse 
					{/ct_Type0WidthProc}
					{/ct_Type0WMode1WidthProc}
				ifelse
				ct_BoldBaseFont/_setwidthProc 3 -1 roll load put
						{ct_MakeBoldFont}ct_Type0CopyFont definefont
			}
			{
				dup/_fauxfont known not 1 index/SubstMaster known not and
				{
					 ct_BoldBaseFont/_setwidthProc /ct_BoldRomanWidthProc load put
					 ct_MakeBoldFont 
				}
				{
				2 index 2 index eq
					{exch pop	}
					{
						dup length dict begin
						ct_CopyFont
						currentdict
						end
						definefont 
					}
				ifelse
				}
			ifelse
			}
		 ifelse
		 pop pop pop
		 setglobal
}bind def
/?str1 256 string def
/?set
	{
	$SubstituteFont
		begin
		/$substituteFound false def
		/$fontname 1 index def
		/$doSmartSub false def
		end
	dup
	 findfont
	$SubstituteFont
		begin
		$substituteFound
			{false}
			{
			dup/FontName known
				{
				dup/FontName get $fontname eq
				1 index/DistillerFauxFont known not and
				/currentdistillerparams where
					{pop false 2 index isWidthsOnlyFont not and}
				if
				}
				{false}
			ifelse
			}
		ifelse
		exch pop
		/$doSmartSub true def
		end
		{
		5 1 roll pop pop pop pop
		findfont
		}
		{
		1 index
		findfont
		dup/FontType get 3 eq
		{
			6 1 roll pop pop pop pop pop false
		}
		{pop true}
		ifelse
		{
		$SubstituteFont
		begin
		pop pop
		/$styleArray 1 index def
		/$regOrdering 2 index def
		pop pop
		0 1 $styleArray length 1 sub
		{
			$styleArray exch get
			ct_StyleDicts $regOrdering
			2 copy known
			{
				get
				exch 2 copy known not
				{pop/Default}
				if
				get
				dup type/nametype eq
				{
				?str1 cvs length dup 1 add exch
				?str1 exch(-)putinterval
				exch dup length exch ?str1 exch 3 index exch putinterval
				add ?str1 exch 0 exch getinterval cvn
				}
				{
				pop pop/Unknown
				}
				ifelse
			}
			{
				pop pop pop pop/Unknown
			}
			ifelse
		}
		for
		end
		findfont 
		}if
		}
	ifelse
	currentglobal false setglobal 3 1 roll
	null copyfont definefont pop
	setglobal
	}bind def
setpacking
userdict/$SubstituteFont 25 dict put
1 dict
	begin
	/SubstituteFont
		dup $error exch 2 copy known
			{get}
			{pop pop{pop/Courier}bind}
		ifelse def
	/currentdistillerparams where dup
		{
		pop pop
		currentdistillerparams/CannotEmbedFontPolicy 2 copy known
			{get/Error eq}
			{pop pop false}
		ifelse
		}
	if not
		{
		countdictstack array dictstack 0 get
			begin
			userdict
				begin
				$SubstituteFont
					begin
					/$str 128 string def
					/$fontpat 128 string def
					/$slen 0 def
					/$sname null def
					/$match false def
					/$fontname null def
					/$substituteFound false def
					/$inVMIndex null def
					/$doSmartSub true def
					/$depth 0 def
					/$fontname null def
					/$italicangle 26.5 def
					/$dstack null def
					/$Strategies 10 dict dup
						begin
						/$Type3Underprint
							{
							currentglobal exch false setglobal
							11 dict
								begin
								/UseFont exch
									$WMode 0 ne
										{
										dup length dict copy
										dup/WMode $WMode put
										/UseFont exch definefont
										}
									if def
								/FontName $fontname dup type/stringtype eq{cvn}if def
								/FontType 3 def
								/FontMatrix[.001 0 0 .001 0 0]def
								/Encoding 256 array dup 0 1 255{/.notdef put dup}for pop def
								/FontBBox[0 0 0 0]def
								/CCInfo 7 dict dup
									begin
									/cc null def
									/x 0 def
									/y 0 def
									end def
								/BuildChar
									{
									exch
										begin
										CCInfo
											begin
											1 string dup 0 3 index put exch pop
											/cc exch def
											UseFont 1000 scalefont setfont
											cc stringwidth/y exch def/x exch def
											x y setcharwidth
											$SubstituteFont/$Strategy get/$Underprint get exec
											0 0 moveto cc show
											x y moveto
											end
										end
									}bind def
								currentdict
								end
							exch setglobal
							}bind def
						/$GetaTint
							2 dict dup
								begin
								/$BuildFont
									{
									dup/WMode known
										{dup/WMode get}
										{0}
									ifelse
									/$WMode exch def
									$fontname exch
									dup/FontName known
										{
										dup/FontName get
										dup type/stringtype eq{cvn}if
										}
										{/unnamedfont}
									ifelse
									exch
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
									1 index/FontName get known
										{
										pop
										Adobe_CoolType_Data/InVMDeepCopiedFonts get
										1 index get
										null copyfont
										}
										{$deepcopyfont}
									ifelse
									exch 1 index exch/FontBasedOn exch put
									dup/FontName $fontname dup type/stringtype eq{cvn}if put
									definefont
									Adobe_CoolType_Data/InVMDeepCopiedFonts get
										begin
										dup/FontBasedOn get 1 index def
										end
									}bind def
								/$Underprint
									{
									gsave
									x abs y abs gt
										{/y 1000 def}
										{/x -1000 def 500 120 translate}
									ifelse
									Level2?
										{
										[/Separation(All)/DeviceCMYK{0 0 0 1 pop}]
										setcolorspace
										}
										{0 setgray}
									ifelse
									10 setlinewidth
									x .8 mul
									[7 3]
										{
										y mul 8 div 120 sub x 10 div exch moveto
										0 y 4 div neg rlineto
										dup 0 rlineto
										0 y 4 div rlineto
										closepath
										gsave
										Level2?
											{.2 setcolor}
											{.8 setgray}
										ifelse
										fill grestore
										stroke
										}
									forall
									pop
									grestore
									}bind def
								end def
						/$Oblique
							1 dict dup
								begin
								/$BuildFont
									{
									currentglobal exch dup gcheck setglobal
									null copyfont
										begin
										/FontBasedOn
										currentdict/FontName known
											{
											FontName
											dup type/stringtype eq{cvn}if
											}
											{/unnamedfont}
										ifelse
										def
										/FontName $fontname dup type/stringtype eq{cvn}if def
										/currentdistillerparams where
											{pop}
											{
											/FontInfo currentdict/FontInfo known
												{FontInfo null copyfont}
												{2 dict}
											ifelse
											dup
												begin
												/ItalicAngle $italicangle def
												/FontMatrix FontMatrix
												[1 0 ItalicAngle dup sin exch cos div 1 0 0]
												matrix concatmatrix readonly
												end
											4 2 roll def
											def
											}
										ifelse
										FontName currentdict
										end
									definefont
									exch setglobal
									}bind def
								end def
						/$None
							1 dict dup
								begin
								/$BuildFont{}bind def
								end def
						end def
					/$Oblique SetSubstituteStrategy
					/$findfontByEnum
						{
						dup type/stringtype eq{cvn}if
						dup/$fontname exch def
						$sname null eq
							{$str cvs dup length $slen sub $slen getinterval}
							{pop $sname}
						ifelse
						$fontpat dup 0(fonts/*)putinterval exch 7 exch putinterval
						/$match false def
						$SubstituteFont/$dstack countdictstack array dictstack put
						mark
							{
							$fontpat 0 $slen 7 add getinterval
								{/$match exch def exit}
							$str filenameforall
							}
						stopped
							{
							cleardictstack
							currentdict
							true
							$SubstituteFont/$dstack get
								{
								exch
									{
									1 index eq
										{pop false}
										{true}
									ifelse
									}
									{begin false}
								ifelse
								}
							forall
							pop
							}
						if
						cleartomark
						/$slen 0 def
						$match false ne
							{$match(fonts/)anchorsearch pop pop cvn}
							{/Courier}
						ifelse
						}bind def
					/$ROS 1 dict dup
						begin
						/Adobe 4 dict dup
							begin
							/Japan1 [/Ryumin-Light/HeiseiMin-W3
										 /GothicBBB-Medium/HeiseiKakuGo-W5
										 /HeiseiMaruGo-W4/Jun101-Light]def
							/Korea1 [/HYSMyeongJo-Medium/HYGoThic-Medium]def
							/GB1	 [/STSong-Light/STHeiti-Regular]def
							/CNS1	[/MKai-Medium/MHei-Medium]def
							end def
						end def
					/$cmapname null def
					/$deepcopyfont
						{
						dup/FontType get 0 eq
							{
							1 dict dup/FontName/copied put copyfont
								begin
								/FDepVector FDepVector copyarray
								0 1 2 index length 1 sub
									{
									2 copy get $deepcopyfont
									dup/FontName/copied put
									/copied exch definefont
									3 copy put pop pop
									}
								for
								def
								currentdict
								end
							}
							{$Strategies/$Type3Underprint get exec}
						ifelse
						}bind def
					/$buildfontname
						{
						dup/CIDFont findresource/CIDSystemInfo get
							begin
							Registry length Ordering length Supplement 8 string cvs
							3 copy length 2 add add add string
							dup 5 1 roll dup 0 Registry putinterval
							dup 4 index(-)putinterval
							dup 4 index 1 add Ordering putinterval
							4 2 roll add 1 add 2 copy(-)putinterval
							end
						1 add 2 copy 0 exch getinterval $cmapname $fontpat cvs exch
						anchorsearch
							{pop pop 3 2 roll putinterval cvn/$cmapname exch def}
							{pop pop pop pop pop}
						ifelse
						length
						$str 1 index(-)putinterval 1 add
						$str 1 index $cmapname $fontpat cvs putinterval
						$cmapname length add
						$str exch 0 exch getinterval cvn
						}bind def
					/$findfontByROS
						{
						/$fontname exch def
						$ROS Registry 2 copy known
							{
							get Ordering 2 copy known
								{get}
								{pop pop[]}
							ifelse
							}
							{pop pop[]}
						ifelse
						false exch
							{
							dup/CIDFont resourcestatus
								{
								pop pop
								save
								1 index/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get}
									{false}
								ifelse
								exch pop
								exch restore
									{pop}
									{exch pop true exit}
								ifelse
								}
								{pop}
							ifelse
							}
						forall
							{$str cvs $buildfontname}
							{
							false(*)
								{
								save exch
								dup/CIDFont findresource
								dup/WidthsOnly known
									{dup/WidthsOnly get not}
									{true}
								ifelse
								exch/CIDSystemInfo get
								dup/Registry get Registry eq
								exch/Ordering get Ordering eq and and
									{exch restore exch pop true exit}
									{pop restore}
								ifelse
								}
							$str/CIDFont resourceforall
								{$buildfontname}
								{$fontname $findfontByEnum}
							ifelse
							}
						ifelse
						}bind def
					end
				end
				currentdict/$error known currentdict/languagelevel known and dup
					{pop $error/SubstituteFont known}
				if
				dup
					{$error}
					{Adobe_CoolType_Core}
				ifelse
				begin
					{
					/SubstituteFont
					/CMap/Category resourcestatus
						{
						pop pop
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{
								$sname null eq
									{dup $str cvs dup length $slen sub $slen getinterval cvn}
									{$sname}
								ifelse
								Adobe_CoolType_Data/InVMFontsByCMap get
								1 index 2 copy known
									{
									get
									false exch
										{
										pop
										currentglobal
											{
											GlobalFontDirectory 1 index known
												{exch pop true exit}
												{pop}
											ifelse
											}
											{
											FontDirectory 1 index known
												{exch pop true exit}
												{
												GlobalFontDirectory 1 index known
													{exch pop true exit}
													{pop}
												ifelse
												}
											ifelse
											}
										ifelse
										}
									forall
									}
									{pop pop false}
								ifelse
									{
									exch pop exch pop
									}
									{
									dup/CMap resourcestatus
										{
										pop pop
										dup/$cmapname exch def
										/CMap findresource/CIDSystemInfo get{def}forall
										$findfontByROS
										}
										{
										128 string cvs
										dup(-)search
											{
											3 1 roll search
												{
												3 1 roll pop
													{dup cvi}
												stopped
													{pop pop pop pop pop $findfontByEnum}
													{
													4 2 roll pop pop
													exch length
													exch
													2 index length
													2 index
													sub
													exch 1 sub -1 0
														{
														$str cvs dup length
														4 index
														0
														4 index
														4 3 roll add
														getinterval
														exch 1 index exch 3 index exch
														putinterval
														dup/CMap resourcestatus
															{
															pop pop
															4 1 roll pop pop pop
															dup/$cmapname exch def
															/CMap findresource/CIDSystemInfo get{def}forall
															$findfontByROS
															true exit
															}
															{pop}
														ifelse
														}
													for
													dup type/booleantype eq
														{pop}
														{pop pop pop $findfontByEnum}
													ifelse
													}
												ifelse
												}
												{pop pop pop $findfontByEnum}
											ifelse
											}
											{pop pop $findfontByEnum}
										ifelse
										}
									ifelse
									}
								ifelse
								}
								{//SubstituteFont exec}
							ifelse
							/$slen 0 def
							end
						}
						}
						{
						{
						$SubstituteFont
							begin
							/$substituteFound true def
							dup length $slen gt
							$sname null ne or
							$slen 0 gt and
								{$findfontByEnum}
								{//SubstituteFont exec}
							ifelse
							end
						}
						}
					ifelse
					bind readonly def
					Adobe_CoolType_Core/scfindfont/systemfindfont load put
					}
					{
					/scfindfont
						{
						$SubstituteFont
							begin
							dup systemfindfont
							dup/FontName known
								{dup/FontName get dup 3 index ne}
								{/noname true}
							ifelse
							dup
								{
								/$origfontnamefound 2 index def
								/$origfontname 4 index def/$substituteFound true def
								}
							if
							exch pop
								{
								$slen 0 gt
								$sname null ne
								3 index length $slen gt or and
									{
									pop dup $findfontByEnum findfont
									dup maxlength 1 add dict
										begin
											{1 index/FID eq{pop pop}{def}ifelse}
										forall
										currentdict
										end
									definefont
									dup/FontName known{dup/FontName get}{null}ifelse
									$origfontnamefound ne
										{
										$origfontname $str cvs print
										( substitution revised, using )print
										dup/FontName known
											{dup/FontName get}{(unspecified font)}
										ifelse
										$str cvs print(.\n)print
										}
									if
									}
									{exch pop}
								ifelse
								}
								{exch pop}
							ifelse
							end
						}bind def
					}
				ifelse
				end
			end
		Adobe_CoolType_Core_Defined not
			{
			Adobe_CoolType_Core/findfont
				{
				$SubstituteFont
					begin
					$depth 0 eq
						{
						/$fontname 1 index dup type/stringtype ne{$str cvs}if def
						/$substituteFound false def
						}
					if
					/$depth $depth 1 add def
					end
				scfindfont
				$SubstituteFont
					begin
					/$depth $depth 1 sub def
					$substituteFound $depth 0 eq and
						{
						$inVMIndex null ne
							{dup $inVMIndex $AddInVMFont}
						if
						$doSmartSub
							{
							currentdict/$Strategy known
								{$Strategy/$BuildFont get exec}
							if
							}
						if
						}
					if
					end
				}bind put
			}
		if
		}
	if
	end
/$AddInVMFont
	{
	exch/FontName 2 copy known
		{
		get
		1 dict dup begin exch 1 index gcheck def end exch
		Adobe_CoolType_Data/InVMFontsByCMap get exch
		$DictAdd
		}
		{pop pop pop}
	ifelse
	}bind def
/$DictAdd
	{
	2 copy known not
		{2 copy 4 index length dict put}
	if
	Level2? not
		{
		2 copy get dup maxlength exch length 4 index length add lt
		2 copy get dup length 4 index length add exch maxlength 1 index lt
			{
			2 mul dict
				begin
				2 copy get{forall}def
				2 copy currentdict put
				end
			}
			{pop}
		ifelse
		}
	if
	get
		begin
			{def}
		forall
		end
	}bind def
end
end
%%EndResource
currentglobal true setglobal
%%BeginResource: procset Adobe_CoolType_Utility_MAKEOCF 1.23 0
%%Copyright: Copyright 1987-2006 Adobe Systems Incorporated.
%%Version: 1.23 0
systemdict/languagelevel known dup
	{currentglobal false setglobal}
	{false}
ifelse
exch
userdict/Adobe_CoolType_Utility 2 copy known
	{2 copy get dup maxlength 27 add dict copy}
	{27 dict}
ifelse put
Adobe_CoolType_Utility
	begin
	/@eexecStartData
		 <BAB431EA07F209EB8C4348311481D9D3F76E3D15246555577D87BC510ED54E
		 118C39697FA9F6DB58128E60EB8A12FA24D7CDD2FA94D221FA9EC8DA3E5E6A1C
		 4ACECC8C2D39C54E7C946031DD156C3A6B4A09AD29E1867A>def
	/@recognizeCIDFont null def
	/ct_Level2? exch def
	/ct_Clone? 1183615869 internaldict dup
			/CCRun known not
			exch/eCCRun known not
			ct_Level2? and or def
ct_Level2?
	{globaldict begin currentglobal true setglobal}
if
	/ct_AddStdCIDMap
		ct_Level2?
			{{
				mark
				Adobe_CoolType_Utility/@recognizeCIDFont currentdict put
					{
					((Hex)57 StartData
					 0615 1e27 2c39 1c60 d8a8 cc31 fe2b f6e0
					 7aa3 e541 e21c 60d8 a8c9 c3d0 6d9e 1c60
					 d8a8 c9c2 02d7 9a1c 60d8 a849 1c60 d8a8
					 cc36 74f4 1144 b13b 77)0()/SubFileDecode filter cvx exec
					}
				stopped
					{
					 cleartomark
					 Adobe_CoolType_Utility/@recognizeCIDFont get
					 countdictstack dup array dictstack
					 exch 1 sub -1 0
						 {
						 2 copy get 3 index eq
								{1 index length exch sub 1 sub{end}repeat exit}
								{pop}
						 ifelse
						 }
					 for
					 pop pop
					 Adobe_CoolType_Utility/@eexecStartData get eexec
					}
					{cleartomark}
				ifelse
			}}
			{{
				Adobe_CoolType_Utility/@eexecStartData get eexec
			}}
		ifelse bind def
userdict/cid_extensions known
dup{cid_extensions/cid_UpdateDB known and}if
	{
	 cid_extensions
	 begin
	/cid_GetCIDSystemInfo
		{
		 1 index type/stringtype eq
			{exch cvn exch}
		 if
		 cid_extensions
			 begin
			 dup load 2 index known
				{
				 2 copy
				 cid_GetStatusInfo
				 dup null ne
					{
					 1 index load
					 3 index get
					 dup null eq
						 {pop pop cid_UpdateDB}
						 {
						 exch
						 1 index/Created get eq
							 {exch pop exch pop}
							 {pop cid_UpdateDB}
						 ifelse
						 }
					 ifelse
					}
					{pop cid_UpdateDB}
				 ifelse
				}
				{cid_UpdateDB}
			 ifelse
			 end
		}bind def
	 end
	}
if
ct_Level2?
	{end setglobal}
if
	/ct_UseNativeCapability? systemdict/composefont known def
	/ct_MakeOCF 35 dict def
	/ct_Vars 25 dict def
	/ct_GlyphDirProcs 6 dict def
	/ct_BuildCharDict 15 dict dup
		begin
		/charcode 2 string def
		/dst_string 1500 string def
		/nullstring()def
		/usewidths? true def
		end def
	ct_Level2?{setglobal}{pop}ifelse
	ct_GlyphDirProcs
		begin
		/GetGlyphDirectory
			{
			systemdict/languagelevel known
				{pop/CIDFont findresource/GlyphDirectory get}
				{
				1 index/CIDFont findresource/GlyphDirectory
				get dup type/dicttype eq
					{
					dup dup maxlength exch length sub 2 index lt
						{
						dup length 2 index add dict copy 2 index
						/CIDFont findresource/GlyphDirectory 2 index put
						}
					if
					}
				if
				exch pop exch pop
				}
			ifelse
			+
			}def
		/+
			{
			systemdict/languagelevel known
				{
				currentglobal false setglobal
				3 dict begin
					/vm exch def
				}
				{1 dict begin}
			ifelse
			/$ exch def
			systemdict/languagelevel known
				{
				vm setglobal
				/gvm currentglobal def
				$ gcheck setglobal
				}
			if
			?{$ begin}if
			}def
		/?{$ type/dicttype eq}def
		/|{
			userdict/Adobe_CoolType_Data known
				{
			Adobe_CoolType_Data/AddWidths? known
				{
				 currentdict Adobe_CoolType_Data
					begin
					 begin
						AddWidths?
								{
								Adobe_CoolType_Data/CC 3 index put
								?{def}{$ 3 1 roll put}ifelse
								CC charcode exch 1 index 0 2 index 256 idiv put
								1 index exch 1 exch 256 mod put
								stringwidth 2 array astore
								currentfont/Widths get exch CC exch put
								}
								{?{def}{$ 3 1 roll put}ifelse}
							ifelse
					end
				end
				}
				{?{def}{$ 3 1 roll put}ifelse}	ifelse
				}
				{?{def}{$ 3 1 roll put}ifelse}
			ifelse
			}def
		/!
			{
			?{end}if
			systemdict/languagelevel known
				{gvm setglobal}
			if
			end
			}def
		/:{string currentfile exch readstring pop}executeonly def
		end
	ct_MakeOCF
		begin
		/ct_cHexEncoding
		[/c00/c01/c02/c03/c04/c05/c06/c07/c08/c09/c0A/c0B/c0C/c0D/c0E/c0F/c10/c11/c12
		/c13/c14/c15/c16/c17/c18/c19/c1A/c1B/c1C/c1D/c1E/c1F/c20/c21/c22/c23/c24/c25
		/c26/c27/c28/c29/c2A/c2B/c2C/c2D/c2E/c2F/c30/c31/c32/c33/c34/c35/c36/c37/c38
		/c39/c3A/c3B/c3C/c3D/c3E/c3F/c40/c41/c42/c43/c44/c45/c46/c47/c48/c49/c4A/c4B
		/c4C/c4D/c4E/c4F/c50/c51/c52/c53/c54/c55/c56/c57/c58/c59/c5A/c5B/c5C/c5D/c5E
		/c5F/c60/c61/c62/c63/c64/c65/c66/c67/c68/c69/c6A/c6B/c6C/c6D/c6E/c6F/c70/c71
		/c72/c73/c74/c75/c76/c77/c78/c79/c7A/c7B/c7C/c7D/c7E/c7F/c80/c81/c82/c83/c84
		/c85/c86/c87/c88/c89/c8A/c8B/c8C/c8D/c8E/c8F/c90/c91/c92/c93/c94/c95/c96/c97
		/c98/c99/c9A/c9B/c9C/c9D/c9E/c9F/cA0/cA1/cA2/cA3/cA4/cA5/cA6/cA7/cA8/cA9/cAA
		/cAB/cAC/cAD/cAE/cAF/cB0/cB1/cB2/cB3/cB4/cB5/cB6/cB7/cB8/cB9/cBA/cBB/cBC/cBD
		/cBE/cBF/cC0/cC1/cC2/cC3/cC4/cC5/cC6/cC7/cC8/cC9/cCA/cCB/cCC/cCD/cCE/cCF/cD0
		/cD1/cD2/cD3/cD4/cD5/cD6/cD7/cD8/cD9/cDA/cDB/cDC/cDD/cDE/cDF/cE0/cE1/cE2/cE3
		/cE4/cE5/cE6/cE7/cE8/cE9/cEA/cEB/cEC/cED/cEE/cEF/cF0/cF1/cF2/cF3/cF4/cF5/cF6
		/cF7/cF8/cF9/cFA/cFB/cFC/cFD/cFE/cFF]def
		/ct_CID_STR_SIZE 8000 def
		/ct_mkocfStr100 100 string def
		/ct_defaultFontMtx[.001 0 0 .001 0 0]def
		/ct_1000Mtx[1000 0 0 1000 0 0]def
		/ct_raise{exch cvx exch errordict exch get exec stop}bind def
		/ct_reraise
			{cvx $error/errorname get(Error: )print dup(						 )cvs print
					errordict exch get exec stop
			}bind def
		/ct_cvnsi
			{
			1 index add 1 sub 1 exch 0 4 1 roll
				{
				2 index exch get
				exch 8 bitshift
				add
				}
			for
			exch pop
			}bind def
		/ct_GetInterval
			{
			Adobe_CoolType_Utility/ct_BuildCharDict get
				begin
				/dst_index 0 def
				dup dst_string length gt
					{dup string/dst_string exch def}
				if
				1 index ct_CID_STR_SIZE idiv
				/arrayIndex exch def
				2 index arrayIndex get
				2 index
				arrayIndex ct_CID_STR_SIZE mul
				sub
					{
					dup 3 index add 2 index length le
						{
						2 index getinterval
						dst_string dst_index 2 index putinterval
						length dst_index add/dst_index exch def
						exit
						}
						{
						1 index length 1 index sub
						dup 4 1 roll
						getinterval
						dst_string dst_index 2 index putinterval
						pop dup dst_index add/dst_index exch def
						sub
						/arrayIndex arrayIndex 1 add def
						2 index dup length arrayIndex gt
							 {arrayIndex get}
							 {
							 pop
							 exit
							 }
						ifelse
						0
						}
					ifelse
					}
				loop
				pop pop pop
				dst_string 0 dst_index getinterval
				end
			}bind def
		ct_Level2?
			{
			/ct_resourcestatus
			currentglobal mark true setglobal
				{/unknowninstancename/Category resourcestatus}
			stopped
				{cleartomark setglobal true}
				{cleartomark currentglobal not exch setglobal}
			ifelse
				{
					{
					mark 3 1 roll/Category findresource
						begin
						ct_Vars/vm currentglobal put
						({ResourceStatus}stopped)0()/SubFileDecode filter cvx exec
							{cleartomark false}
							{{3 2 roll pop true}{cleartomark false}ifelse}
						ifelse
						ct_Vars/vm get setglobal
						end
					}
				}
				{{resourcestatus}}
			ifelse bind def
			/CIDFont/Category ct_resourcestatus
				{pop pop}
				{
				currentglobal true setglobal
				/Generic/Category findresource
				dup length dict copy
				dup/InstanceType/dicttype put
				/CIDFont exch/Category defineresource pop
				setglobal
				}
			ifelse
			ct_UseNativeCapability?
				{
				/CIDInit/ProcSet findresource begin
				12 dict begin
				begincmap
				/CIDSystemInfo 3 dict dup begin
				 /Registry(Adobe)def
				 /Ordering(Identity)def
				 /Supplement 0 def
				end def
				/CMapName/Identity-H def
				/CMapVersion 1.000 def
				/CMapType 1 def
				1 begincodespacerange
				<0000><FFFF>
				endcodespacerange
				1 begincidrange
				<0000><FFFF>0
				endcidrange
				endcmap
				CMapName currentdict/CMap defineresource pop
				end
				end
				}
			if
			}
			{
			/ct_Category 2 dict begin
			/CIDFont 10 dict def
			/ProcSet	2 dict def
			currentdict
			end
			def
			/defineresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					dup dup maxlength exch length eq
						{
						dup length 10 add dict copy
						ct_Category 2 index 2 index put
						}
					if
					3 index 3 index put
					pop exch pop
					}
					{pop pop/defineresource/undefined ct_raise}
				ifelse
				}bind def
			/findresource
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index 2 copy known
						{get 3 1 roll pop pop}
						{pop pop/findresource/undefinedresource ct_raise}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/resourcestatus
				{
				ct_Category 1 index 2 copy known
					{
					get
					2 index known
					exch pop exch pop
						{
						0 -1 true
						}
						{
						false
						}
					ifelse
					}
					{pop pop/findresource/undefined ct_raise}
				ifelse
				}bind def
			/ct_resourcestatus/resourcestatus load def
			}
		ifelse
		/ct_CIDInit 2 dict
			begin
			/ct_cidfont_stream_init
				{
					{
					dup(Binary)eq
						{
						pop
						null
						currentfile
						ct_Level2?
							{
								{cid_BYTE_COUNT()/SubFileDecode filter}
							stopped
								{pop pop pop}
							if
							}
						if
						/readstring load
						exit
						}
					if
					dup(Hex)eq
						{
						pop
						currentfile
						ct_Level2?
							{
								{null exch/ASCIIHexDecode filter/readstring}
							stopped
								{pop exch pop(>)exch/readhexstring}
							if
							}
							{(>)exch/readhexstring}
						ifelse
						load
						exit
						}
					if
					/StartData/typecheck ct_raise
					}
				loop
				cid_BYTE_COUNT ct_CID_STR_SIZE le
					{
					2 copy cid_BYTE_COUNT string exch exec
					pop
					1 array dup
					3 -1 roll
					0 exch put
					}
					{
					cid_BYTE_COUNT ct_CID_STR_SIZE div ceiling cvi
					dup array exch 2 sub 0 exch 1 exch
						{
						2 copy
						5 index
						ct_CID_STR_SIZE
						string
						6 index exec
						pop
						put
						pop
						}
					for
					2 index
					cid_BYTE_COUNT ct_CID_STR_SIZE mod string
					3 index exec
					pop
					1 index exch
					1 index length 1 sub
					exch put
					}
				ifelse
				cid_CIDFONT exch/GlyphData exch put
				2 index null eq
					{
					pop pop pop
					}
					{
					pop/readstring load
					1 string exch
						{
						3 copy exec
						pop
						dup length 0 eq
							{
							pop pop pop pop pop
							true exit
							}
						if
						4 index
						eq
							{
							pop pop pop pop
							false exit
							}
						if
						}
					loop
					pop
					}
				ifelse
				}bind def
			/StartData
				{
				mark
					{
					currentdict
					dup/FDArray get 0 get/FontMatrix get
					0 get 0.001 eq
						{
						dup/CDevProc known not
							{
							/CDevProc 1183615869 internaldict/stdCDevProc 2 copy known
								{get}
								{
								pop pop
								{pop pop pop pop pop 0 -1000 7 index 2 div 880}
								}
							ifelse
							def
							}
						if
						}
						{
						/CDevProc
							{
							 pop pop pop pop pop
							 0
							 1 cid_temp/cid_CIDFONT get
							/FDArray get 0 get
							/FontMatrix get 0 get div
							 7 index 2 div
							 1 index 0.88 mul
							}def
						}
					ifelse
					/cid_temp 15 dict def
					cid_temp
						begin
						/cid_CIDFONT exch def
						3 copy pop
						dup/cid_BYTE_COUNT exch def 0 gt
							{
							ct_cidfont_stream_init
							FDArray
								{
								/Private get
								dup/SubrMapOffset known
									{
									begin
									/Subrs SubrCount array def
									Subrs
									SubrMapOffset
									SubrCount
									SDBytes
									ct_Level2?
										{
										currentdict dup/SubrMapOffset undef
										dup/SubrCount undef
										/SDBytes undef
										}
									if
									end
									/cid_SD_BYTES exch def
									/cid_SUBR_COUNT exch def
									/cid_SUBR_MAP_OFFSET exch def
									/cid_SUBRS exch def
									cid_SUBR_COUNT 0 gt
										{
										GlyphData cid_SUBR_MAP_OFFSET cid_SD_BYTES ct_GetInterval
										0 cid_SD_BYTES ct_cvnsi
										0 1 cid_SUBR_COUNT 1 sub
											{
											exch 1 index
											1 add
											cid_SD_BYTES mul cid_SUBR_MAP_OFFSET add
											GlyphData exch cid_SD_BYTES ct_GetInterval
											0 cid_SD_BYTES ct_cvnsi
											cid_SUBRS 4 2 roll
											GlyphData exch
											4 index
											1 index
											sub
											ct_GetInterval
											dup length string copy put
											}
										for
										pop
										}
									if
									}
									{pop}
								ifelse
								}
							forall
							}
						if
						cleartomark pop pop
						end
					CIDFontName currentdict/CIDFont defineresource pop
					end end
					}
				stopped
					{cleartomark/StartData ct_reraise}
				if
				}bind def
			currentdict
			end def
		/ct_saveCIDInit
			{
			/CIDInit/ProcSet ct_resourcestatus
				{true}
				{/CIDInitC/ProcSet ct_resourcestatus}
			ifelse
				{
				pop pop
				/CIDInit/ProcSet findresource
				ct_UseNativeCapability?
					{pop null}
					{/CIDInit ct_CIDInit/ProcSet defineresource pop}
				ifelse
				}
				{/CIDInit ct_CIDInit/ProcSet defineresource pop null}
			ifelse
			ct_Vars exch/ct_oldCIDInit exch put
			}bind def
		/ct_restoreCIDInit
			{
			ct_Vars/ct_oldCIDInit get dup null ne
				{/CIDInit exch/ProcSet defineresource pop}
				{pop}
			ifelse
			}bind def
		/ct_BuildCharSetUp
			{
			1 index
				begin
				CIDFont
					begin
					Adobe_CoolType_Utility/ct_BuildCharDict get
						begin
						/ct_dfCharCode exch def
						/ct_dfDict exch def
						CIDFirstByte ct_dfCharCode add
						dup CIDCount ge
							{pop 0}
						if
						/cid exch def
							{
							GlyphDirectory cid 2 copy known
								{get}
								{pop pop nullstring}
							ifelse
							dup length FDBytes sub 0 gt
								{
								dup
								FDBytes 0 ne
									{0 FDBytes ct_cvnsi}
									{pop 0}
								ifelse
								/fdIndex exch def
								dup length FDBytes sub FDBytes exch getinterval
								/charstring exch def
								exit
								}
								{
								pop
								cid 0 eq
									{/charstring nullstring def exit}
								if
								/cid 0 def
								}
							ifelse
							}
						loop
			}def
		/ct_SetCacheDevice
			{
			0 0 moveto
			dup stringwidth
			3 -1 roll
			true charpath
			pathbbox
			0 -1000
			7 index 2 div 880
			setcachedevice2
			0 0 moveto
			}def
		/ct_CloneSetCacheProc
			{
			1 eq
				{
				stringwidth
				pop -2 div -880
				0 -1000 setcharwidth
				moveto
				}
				{
				usewidths?
					{
					currentfont/Widths get cid
					2 copy known
						{get exch pop aload pop}
						{pop pop stringwidth}
					ifelse
					}
					{stringwidth}
				ifelse
				setcharwidth
				0 0 moveto
				}
			ifelse
			}def
		/ct_Type3ShowCharString
			{
			ct_FDDict fdIndex 2 copy known
				{get}
				{
				currentglobal 3 1 roll
				1 index gcheck setglobal
				ct_Type1FontTemplate dup maxlength dict copy
					begin
					FDArray fdIndex get
					dup/FontMatrix 2 copy known
						{get}
						{pop pop ct_defaultFontMtx}
					ifelse
					/FontMatrix exch dup length array copy def
					/Private get
					/Private exch def
					/Widths rootfont/Widths get def
					/CharStrings 1 dict dup/.notdef
						<d841272cf18f54fc13>dup length string copy put def
					currentdict
					end
				/ct_Type1Font exch definefont
				dup 5 1 roll put
				setglobal
				}
			ifelse
			dup/CharStrings get 1 index/Encoding get
			ct_dfCharCode get charstring put
			rootfont/WMode 2 copy known
				{get}
				{pop pop 0}
			ifelse
			exch
			1000 scalefont setfont
			ct_str1 0 ct_dfCharCode put
			ct_str1 exch ct_dfSetCacheProc
			ct_SyntheticBold
				{
				currentpoint
				ct_str1 show
				newpath
				moveto
				ct_str1 true charpath
				ct_StrokeWidth setlinewidth
				stroke
				}
				{ct_str1 show}
			ifelse
			}def
		/ct_Type4ShowCharString
			{
			ct_dfDict ct_dfCharCode charstring
			FDArray fdIndex get
			dup/FontMatrix get dup ct_defaultFontMtx ct_matrixeq not
				{ct_1000Mtx matrix concatmatrix concat}
				{pop}
			ifelse
			/Private get
			Adobe_CoolType_Utility/ct_Level2? get not
				{
				ct_dfDict/Private
				3 -1 roll
					{put}
				1183615869 internaldict/superexec get exec
				}
			if
			1183615869 internaldict
			Adobe_CoolType_Utility/ct_Level2? get
				{1 index}
				{3 index/Private get mark 6 1 roll}
			ifelse
			dup/RunInt known
				{/RunInt get}
				{pop/CCRun}
			ifelse
			get exec
			Adobe_CoolType_Utility/ct_Level2? get not
				{cleartomark}
			if
			}bind def
		/ct_BuildCharIncremental
			{
				{
				Adobe_CoolType_Utility/ct_MakeOCF get begin
				ct_BuildCharSetUp
				ct_ShowCharString
				}
			stopped
				{stop}
			if
			end
			end
			end
			end
			}bind def
		/BaseFontNameStr(BF00)def
		/ct_Type1FontTemplate 14 dict
			begin
			/FontType 1 def
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/PaintType 0 def
			currentdict
			end def
		/BaseFontTemplate 11 dict
			begin
			/FontMatrix [0.001 0 0 0.001 0 0]def
			/FontBBox [-250 -250 1250 1250]def
			/Encoding ct_cHexEncoding def
			/BuildChar/ct_BuildCharIncremental load def
			ct_Clone?
				{
				/FontType 3 def
				/ct_ShowCharString/ct_Type3ShowCharString load def
				/ct_dfSetCacheProc/ct_CloneSetCacheProc load def
				/ct_SyntheticBold false def
				/ct_StrokeWidth 1 def
				}
				{
				/FontType 4 def
				/Private 1 dict dup/lenIV 4 put def
				/CharStrings 1 dict dup/.notdef<d841272cf18f54fc13>put def
				/PaintType 0 def
				/ct_ShowCharString/ct_Type4ShowCharString load def
				}
			ifelse
			/ct_str1 1 string def
			currentdict
			end def
		/BaseFontDictSize BaseFontTemplate length 5 add def
		/ct_matrixeq
			{
			true 0 1 5
				{
				dup 4 index exch get exch 3 index exch get eq and
				dup not
					{exit}
				if
				}
			for
			exch pop exch pop
			}bind def
		/ct_makeocf
			{
			15 dict
				begin
				exch/WMode exch def
				exch/FontName exch def
				/FontType 0 def
				/FMapType 2 def
			dup/FontMatrix known
				{dup/FontMatrix get/FontMatrix exch def}
				{/FontMatrix matrix def}
			ifelse
				/bfCount 1 index/CIDCount get 256 idiv 1 add
					dup 256 gt{pop 256}if def
				/Encoding
					256 array 0 1 bfCount 1 sub{2 copy dup put pop}for
					bfCount 1 255{2 copy bfCount put pop}for
					def
				/FDepVector bfCount dup 256 lt{1 add}if array def
				BaseFontTemplate BaseFontDictSize dict copy
					begin
					/CIDFont exch def
					CIDFont/FontBBox known
						{CIDFont/FontBBox get/FontBBox exch def}
					if
					CIDFont/CDevProc known
						{CIDFont/CDevProc get/CDevProc exch def}
					if
					currentdict
					end
				BaseFontNameStr 3(0)putinterval
				0 1 bfCount dup 256 eq{1 sub}if
					{
					FDepVector exch
					2 index BaseFontDictSize dict copy
						begin
						dup/CIDFirstByte exch 256 mul def
						FontType 3 eq
							{/ct_FDDict 2 dict def}
						if
						currentdict
						end
					1 index 16
					BaseFontNameStr 2 2 getinterval cvrs pop
					BaseFontNameStr exch definefont
					put
					}
				for
				ct_Clone?
					{/Widths 1 index/CIDFont get/GlyphDirectory get length dict def}
				if
				FontName
				currentdict
				end
			definefont
			ct_Clone?
				{
				gsave
				dup 1000 scalefont setfont
				ct_BuildCharDict
					begin
					/usewidths? false def
					currentfont/Widths get
						begin
						exch/CIDFont get/GlyphDirectory get
							{
							pop
							dup charcode exch 1 index 0 2 index 256 idiv put
							1 index exch 1 exch 256 mod put
							stringwidth 2 array astore def
							}
						forall
						end
					/usewidths? true def
					end
				grestore
				}
				{exch pop}
			ifelse
			}bind def
		currentglobal true setglobal
		/ct_ComposeFont
			{
			ct_UseNativeCapability?
				{				
				2 index/CMap ct_resourcestatus
					{pop pop exch pop}
					{
					/CIDInit/ProcSet findresource
						begin
						12 dict
							begin
							begincmap
							/CMapName 3 index def
							/CMapVersion 1.000 def
							/CMapType 1 def
							exch/WMode exch def
							/CIDSystemInfo 3 dict dup
								begin
								/Registry(Adobe)def
								/Ordering
								CMapName ct_mkocfStr100 cvs
								(Adobe-)search
									{
									pop pop
									(-)search
										{
										dup length string copy
										exch pop exch pop
										}
										{pop(Identity)}
									ifelse
									}
									{pop (Identity)}
								ifelse
								def
								/Supplement 0 def
								end def
							1 begincodespacerange
							<0000><FFFF>
							endcodespacerange
							1 begincidrange
							<0000><FFFF>0
							endcidrange
							endcmap
							CMapName currentdict/CMap defineresource pop
							end
						end
					}
				ifelse
				composefont
				}
				{
				3 2 roll pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
			setglobal
		/ct_MakeIdentity
			{
			ct_UseNativeCapability?
				{
				1 index/CMap ct_resourcestatus
					{pop pop}
					{
					/CIDInit/ProcSet findresource begin
					12 dict begin
					begincmap
					/CMapName 2 index def
					/CMapVersion 1.000 def
					/CMapType 1 def
					/CIDSystemInfo 3 dict dup
						begin
						/Registry(Adobe)def
						/Ordering
						CMapName ct_mkocfStr100 cvs
						(Adobe-)search
							{
							pop pop
							(-)search
								{dup length string copy exch pop exch pop}
								{pop(Identity)}
							ifelse
							}
							{pop(Identity)}
						ifelse
						def
						/Supplement 0 def
						end def
					1 begincodespacerange
					<0000><FFFF>
					endcodespacerange
					1 begincidrange
					<0000><FFFF>0
					endcidrange
					endcmap
					CMapName currentdict/CMap defineresource pop
					end
					end
					}
				ifelse
				composefont
				}
				{
				exch pop
				0 get/CIDFont findresource
				ct_makeocf
				}
			ifelse
			}bind def
		currentdict readonly pop
		end
	end
%%EndResource
setglobal
%%BeginResource: procset Adobe_CoolType_Utility_T42 1.0 0
%%Copyright: Copyright 1987-2004 Adobe Systems Incorporated.
%%Version: 1.0 0
userdict/ct_T42Dict 15 dict put
ct_T42Dict begin
/Is2015?
{
 version
 cvi
 2015
 ge
}bind def
/AllocGlyphStorage
{
 Is2015?
 {	
	pop
 }
 {
	{string}forall
 }ifelse
}bind def
/Type42DictBegin
{
25 dict begin
 /FontName exch def
 /CharStrings 256 dict 
begin
	 /.notdef 0 def
	 currentdict 
end def
 /Encoding exch def
 /PaintType 0 def
 /FontType 42 def
 /FontMatrix[1 0 0 1 0 0]def
 4 array astore cvx/FontBBox exch def
 /sfnts
}bind def
/Type42DictEnd 
{
 currentdict dup/FontName get exch definefont end
ct_T42Dict exch
dup/FontName get exch put
}bind def
/RD{string currentfile exch readstring pop}executeonly def
/PrepFor2015
{
Is2015?
{		 
	/GlyphDirectory 
	 16
	 dict def
	 sfnts 0 get
	 dup
	 2 index
	(glyx)
	 putinterval
	 2 index 
	(locx)
	 putinterval
	 pop
	 pop
}
{
	 pop
	 pop
}ifelse			
}bind def
/AddT42Char
{
Is2015?
{
	/GlyphDirectory get 
	begin
	def
	end
	pop
	pop
}
{
	/sfnts get
	4 index
	get
	3 index
 2 index
	putinterval
	pop
	pop
	pop
	pop
}ifelse
}bind def
/T0AddT42Mtx2
{
/CIDFont findresource/Metrics2 get begin def end
}bind def
end
%%EndResource
currentglobal true setglobal
%%BeginFile: MMFauxFont.prc
%%Copyright: Copyright 1987-2001 Adobe Systems Incorporated. 
%%All Rights Reserved.
userdict /ct_EuroDict 10 dict put
ct_EuroDict begin
/ct_CopyFont 
{
    { 1 index /FID ne {def} {pop pop} ifelse} forall
} def
/ct_GetGlyphOutline
{
   gsave
   initmatrix newpath
   exch findfont dup 
   length 1 add dict 
   begin 
		ct_CopyFont 
		/Encoding Encoding dup length array copy 
		dup
		4 -1 roll
		0 exch put   
		def
		currentdict
   end
   /ct_EuroFont exch definefont
   1000 scalefont setfont
   0 0 moveto
   [
       <00> stringwidth 
       <00> false charpath
       pathbbox
       [
       {/m cvx} {/l cvx} {/c cvx} {/cp cvx} pathforall
   grestore
   counttomark 8 add
}
def
/ct_MakeGlyphProc
{
   ] cvx
   /ct_PSBuildGlyph cvx
   ] cvx
} def
/ct_PSBuildGlyph 
{ 
 	gsave 
	8 -1 roll pop 
	7 1 roll 
        6 -2 roll ct_FontMatrix transform 6 2 roll
        4 -2 roll ct_FontMatrix transform 4 2 roll
        ct_FontMatrix transform 
	currentdict /PaintType 2 copy known {get 2 eq}{pop pop false} ifelse  
	dup  9 1 roll 
	{  
		currentdict /StrokeWidth 2 copy known  
		{   
			get 2 div   
			0 ct_FontMatrix dtransform pop
			5 1 roll  
			4 -1 roll 4 index sub   
			4 1 roll   
			3 -1 roll 4 index sub  
			3 1 roll   
			exch 4 index add exch  
			4 index add  
			5 -1 roll pop  
		}  
		{	 
			pop pop 
		}  
		ifelse  
	}       
    if  
	setcachedevice  
        ct_FontMatrix concat
        ct_PSPathOps begin 
		exec 
	end 
	{  
		currentdict /StrokeWidth 2 copy known  
			{ get }  
			{ pop pop 0 }  
  	    ifelse  
		setlinewidth stroke  
	}  
	{   
	    fill  
	}  
	ifelse  
    grestore
} def 
/ct_PSPathOps 4 dict dup begin 
	/m {moveto} def 
	/l {lineto} def 
	/c {curveto} def 
	/cp {closepath} def 
end 
def 
/ct_matrix1000 [1000 0 0 1000 0 0] def
/ct_AddGlyphProc  
{
   2 index findfont dup length 4 add dict 
   begin 
	ct_CopyFont 
	/CharStrings CharStrings dup length 1 add dict copy
      begin
         3 1 roll def  
         currentdict 
      end 
      def
      /ct_FontMatrix ct_matrix1000 FontMatrix matrix concatmatrix def
      /ct_PSBuildGlyph /ct_PSBuildGlyph load def
      /ct_PSPathOps /ct_PSPathOps load def
      currentdict
   end
   definefont pop
}
def
systemdict /languagelevel known
{
	/ct_AddGlyphToPrinterFont {
		2 copy
		ct_GetGlyphOutline 3 add -1 roll restore 
		ct_MakeGlyphProc 
		ct_AddGlyphProc
	} def
}
{
	/ct_AddGlyphToPrinterFont {
	    pop pop restore
		Adobe_CTFauxDict /$$$FONTNAME get
		/Euro
		Adobe_CTFauxDict /$$$SUBSTITUTEBASE get
		ct_EuroDict exch get
		ct_AddGlyphProc
	} def
} ifelse
/AdobeSansMM 
{ 
556 0 24 -19 541 703 
	{ 
	541 628 m 
	510 669 442 703 354 703 c 
	201 703 117 607 101 444 c 
	50 444 l 
	25 372 l 
	97 372 l 
	97 301 l 
	49 301 l 
	24 229 l 
	103 229 l 
	124 67 209 -19 350 -19 c 
	435 -19 501 25 509 32 c 
	509 131 l 
	492 105 417 60 343 60 c 
	267 60 204 127 197 229 c 
	406 229 l 
	430 301 l 
	191 301 l 
	191 372 l 
	455 372 l 
	479 444 l 
	194 444 l 
	201 531 245 624 348 624 c 
	433 624 484 583 509 534 c 
	cp 
	556 0 m 
	}
ct_PSBuildGlyph
} def
/AdobeSerifMM 
{ 
500 0 10 -12 484 692 
	{ 
	347 298 m 
	171 298 l 
	170 310 170 322 170 335 c 
	170 362 l 
	362 362 l 
	374 403 l 
	172 403 l 
	184 580 244 642 308 642 c 
	380 642 434 574 457 457 c 
	481 462 l 
	474 691 l 
	449 691 l 
	433 670 429 657 410 657 c 
	394 657 360 692 299 692 c 
	204 692 94 604 73 403 c 
	22 403 l 
	10 362 l 
	70 362 l 
	69 352 69 341 69 330 c 
	69 319 69 308 70 298 c 
	22 298 l 
	10 257 l 
	73 257 l 
	97 57 216 -12 295 -12 c 
	364 -12 427 25 484 123 c 
	458 142 l 
	425 101 384 37 316 37 c 
	256 37 189 84 173 257 c 
	335 257 l 
	cp 
	500 0 m 
	} 
ct_PSBuildGlyph 
} def 
end		
%%EndFile
setglobal
Adobe_CoolType_Core begin /$Oblique SetSubstituteStrategy end
%%BeginResource: procset Adobe_AGM_Image 1.0 0
%%Version: 1.0 0
%%Copyright: Copyright(C)2000-2006 Adobe Systems, Inc. All Rights Reserved.
systemdict/setpacking known
{
	currentpacking
	true setpacking
}if
userdict/Adobe_AGM_Image 71 dict dup begin put
/Adobe_AGM_Image_Id/Adobe_AGM_Image_1.0_0 def
/nd{
	null def
}bind def
/AGMIMG_&image nd
/AGMIMG_&colorimage nd
/AGMIMG_&imagemask nd
/AGMIMG_mbuf()def
/AGMIMG_ybuf()def
/AGMIMG_kbuf()def
/AGMIMG_c 0 def
/AGMIMG_m 0 def
/AGMIMG_y 0 def
/AGMIMG_k 0 def
/AGMIMG_tmp nd
/AGMIMG_imagestring0 nd
/AGMIMG_imagestring1 nd
/AGMIMG_imagestring2 nd
/AGMIMG_imagestring3 nd
/AGMIMG_imagestring4 nd
/AGMIMG_imagestring5 nd
/AGMIMG_cnt nd
/AGMIMG_fsave nd
/AGMIMG_colorAry nd
/AGMIMG_override nd
/AGMIMG_name nd
/AGMIMG_maskSource nd
/AGMIMG_flushfilters nd
/invert_image_samples nd
/knockout_image_samples	nd
/img nd
/sepimg nd
/devnimg nd
/idximg nd
/ds
{
	Adobe_AGM_Core begin
	Adobe_AGM_Image begin
	/AGMIMG_&image systemdict/image get def
	/AGMIMG_&imagemask systemdict/imagemask get def
	/colorimage where{
		pop
		/AGMIMG_&colorimage/colorimage ldf
	}if
	end
	end
}def
/ps
{
	Adobe_AGM_Image begin
	/AGMIMG_ccimage_exists{/customcolorimage where 
		{
			pop
			/Adobe_AGM_OnHost_Seps where
			{
			pop false
			}{
			/Adobe_AGM_InRip_Seps where
				{
				pop false
				}{
					true
				}ifelse
			}ifelse
			}{
			false
		}ifelse 
	}bdf
	level2{
		/invert_image_samples
		{
			Adobe_AGM_Image/AGMIMG_tmp Decode length ddf
			/Decode[Decode 1 get Decode 0 get]def
		}def
		/knockout_image_samples
		{
			Operator/imagemask ne{
				/Decode[1 1]def
			}if
		}def
	}{	
		/invert_image_samples
		{
			{1 exch sub}currenttransfer addprocs settransfer
		}def
		/knockout_image_samples
		{
			{pop 1}currenttransfer addprocs settransfer
		}def
	}ifelse
	/img/imageormask ldf
	/sepimg/sep_imageormask ldf
	/devnimg/devn_imageormask ldf
	/idximg/indexed_imageormask ldf
	/_ctype 7 def
	currentdict{
		dup xcheck 1 index type dup/arraytype eq exch/packedarraytype eq or and{
			bind
		}if
		def
	}forall
}def
/pt
{
	end
}def
/dt
{
}def
/AGMIMG_flushfilters
{
	dup type/arraytype ne
		{1 array astore}if
	dup 0 get currentfile ne
		{dup 0 get flushfile}if
		{
		dup type/filetype eq
			{
			dup status 1 index currentfile ne and
				{closefile}
				{pop}
			ifelse
			}{pop}ifelse
		}forall
}def
/AGMIMG_init_common
{
	currentdict/T known{/ImageType/T ldf currentdict/T undef}if
	currentdict/W known{/Width/W ldf currentdict/W undef}if
	currentdict/H known{/Height/H ldf currentdict/H undef}if
	currentdict/M known{/ImageMatrix/M ldf currentdict/M undef}if
	currentdict/BC known{/BitsPerComponent/BC ldf currentdict/BC undef}if
	currentdict/D known{/Decode/D ldf currentdict/D undef}if
	currentdict/DS known{/DataSource/DS ldf currentdict/DS undef}if
	currentdict/O known{
		/Operator/O load 1 eq{
			/imagemask
		}{
			/O load 2 eq{
				/image 
			}{
				/colorimage
			}ifelse
		}ifelse
		def
		currentdict/O undef
	}if
	currentdict/HSCI known{/HostSepColorImage/HSCI ldf currentdict/HSCI undef}if
	currentdict/MD known{/MultipleDataSources/MD ldf currentdict/MD undef}if
	currentdict/I known{/Interpolate/I ldf currentdict/I undef}if
	currentdict/SI known{/SkipImageProc/SI ldf currentdict/SI undef}if
	/DataSource load xcheck not{
		DataSource type/arraytype eq{
			DataSource 0 get type/filetype eq{
				/_Filters DataSource def
				currentdict/MultipleDataSources known not{
					/DataSource DataSource dup length 1 sub get def 
				}if
			}if
		}if
		currentdict/MultipleDataSources known not{
			/MultipleDataSources DataSource type/arraytype eq{
				DataSource length 1 gt
			}
			{false}ifelse def
		}if
	}if
	/NComponents Decode length 2 div def
	currentdict/SkipImageProc known not{/SkipImageProc{false}def}if
}bdf
/imageormask_sys
{
	begin
		AGMIMG_init_common
		save mark
		level2{
			currentdict
			Operator/imagemask eq{
				AGMIMG_&imagemask
			}{
				use_mask{
					process_mask AGMIMG_&image
				}{
					AGMIMG_&image
				}ifelse
			}ifelse
		}{
			Width Height
			Operator/imagemask eq{
				Decode 0 get 1 eq Decode 1 get 0 eq	and
				ImageMatrix/DataSource load
				AGMIMG_&imagemask
			}{
				BitsPerComponent ImageMatrix/DataSource load
				AGMIMG_&image
			}ifelse
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
		cleartomark restore
	end
}def
/overprint_plate
{
	currentoverprint{
		0 get dup type/nametype eq{
			dup/DeviceGray eq{
				pop AGMCORE_black_plate not
			}{
				/DeviceCMYK eq{
					AGMCORE_is_cmyk_sep not
				}if
			}ifelse
		}{
			false exch
			{
				 AGMOHS_sepink eq or
			}forall
			not
		}ifelse
	}{
		pop false
	}ifelse
}def
/process_mask
{
	level3{
		dup begin
		/ImageType 1 def
		end
		4 dict begin
			/DataDict exch def
			/ImageType 3 def
			/InterleaveType 3 def
			/MaskDict 9 dict begin
				/ImageType 1 def
				/Width DataDict dup/MaskWidth known{/MaskWidth}{/Width}ifelse get def
				/Height DataDict dup/MaskHeight known{/MaskHeight}{/Height}ifelse get def
				/ImageMatrix[Width 0 0 Height neg 0 Height]def
				/NComponents 1 def
				/BitsPerComponent 1 def
				/Decode DataDict dup/MaskD known{/MaskD}{[1 0]}ifelse get def
				/DataSource Adobe_AGM_Core/AGMIMG_maskSource get def
			currentdict end def
		currentdict end
	}if
}def
/use_mask
{
	dup/Mask known	{dup/Mask get}{false}ifelse
}def
/imageormask
{
	begin
		AGMIMG_init_common
		SkipImageProc{
			currentdict consumeimagedata
		}
		{
			save mark
			level2 AGMCORE_host_sep not and{
				currentdict
				Operator/imagemask eq DeviceN_PS2 not and{
					imagemask
				}{
					AGMCORE_in_rip_sep currentoverprint and currentcolorspace 0 get/DeviceGray eq and{
						[/Separation/Black/DeviceGray{}]setcolorspace
						/Decode[Decode 1 get Decode 0 get]def
					}if
					use_mask{
						process_mask image
					}{
						DeviceN_NoneName DeviceN_PS2 Indexed_DeviceN level3 not and or or AGMCORE_in_rip_sep and 
						{
							Names convert_to_process not{
								2 dict begin
								/imageDict xdf
								/names_index 0 def
								gsave
								imageDict write_image_file{
									Names{
										dup(None)ne{
											[/Separation 3 -1 roll/DeviceGray{1 exch sub}]setcolorspace
											Operator imageDict read_image_file
											names_index 0 eq{true setoverprint}if
											/names_index names_index 1 add def
										}{
											pop
										}ifelse
									}forall
									close_image_file
								}if
								grestore
								end
							}{
								Operator/imagemask eq{
									imagemask
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/imagemask eq{
								imagemask
							}{
								image
							}ifelse
						}ifelse
					}ifelse
				}ifelse
			}{
				Width Height
				Operator/imagemask eq{
					Decode 0 get 1 eq Decode 1 get 0 eq	and
					ImageMatrix/DataSource load
					/Adobe_AGM_OnHost_Seps where{
						pop imagemask
					}{
						currentgray 1 ne{
							currentdict imageormask_sys
						}{
							currentoverprint not{
								1 AGMCORE_&setgray
								currentdict imageormask_sys
							}{
								currentdict ignoreimagedata
							}ifelse				 		
						}ifelse
					}ifelse
				}{
					BitsPerComponent ImageMatrix 
					MultipleDataSources{
						0 1 NComponents 1 sub{
							DataSource exch get
						}for
					}{
						/DataSource load
					}ifelse
					Operator/colorimage eq{
						AGMCORE_host_sep{
							MultipleDataSources level2 or NComponents 4 eq and{
								AGMCORE_is_cmyk_sep{
									MultipleDataSources{
										/DataSource DataSource 0 get xcheck
											{
											[
											DataSource 0 get/exec cvx
											DataSource 1 get/exec cvx
											DataSource 2 get/exec cvx
											DataSource 3 get/exec cvx
											/AGMCORE_get_ink_data cvx
											]cvx
											}{
											DataSource aload pop AGMCORE_get_ink_data
											}ifelse def
									}{
										/DataSource 
										Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
										/DataSource load
										filter_cmyk 0()/SubFileDecode filter def
									}ifelse
									/Decode[Decode 0 get Decode 1 get]def
									/MultipleDataSources false def
									/NComponents 1 def
									/Operator/image def
									invert_image_samples
						 			1 AGMCORE_&setgray
									currentdict imageormask_sys
								}{
									currentoverprint not Operator/imagemask eq and{
 			 							1 AGMCORE_&setgray
 			 							currentdict imageormask_sys
 			 						}{
 			 							currentdict ignoreimagedata
 			 						}ifelse
								}ifelse
							}{	
								MultipleDataSources NComponents AGMIMG_&colorimage						
							}ifelse
						}{
							true NComponents colorimage
						}ifelse
					}{
						Operator/image eq{
							AGMCORE_host_sep{
								/DoImage true def
								currentdict/HostSepColorImage known{HostSepColorImage not}{false}ifelse
								{
									AGMCORE_black_plate not Operator/imagemask ne and{
										/DoImage false def
										currentdict ignoreimagedata
					 				}if
								}if
						 		1 AGMCORE_&setgray
								DoImage
									{currentdict imageormask_sys}if
							}{
								use_mask{
									process_mask image
								}{
									image
								}ifelse
							}ifelse
						}{
							Operator/knockout eq{
								pop pop pop pop pop
								currentcolorspace overprint_plate not{
									knockout_unitsq
								}if
							}if
						}ifelse
					}ifelse
				}ifelse
			}ifelse
			cleartomark restore
		}ifelse
		currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/sep_imageormask
{
 	/sep_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_avoid_L2_sep_space{
			/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
		}if
 		AGMIMG_ccimage_exists 
		MappedCSA 0 get/DeviceCMYK eq and
		currentdict/Components known and 
		Name()ne and 
		Name(All)ne and 
		Operator/image eq and
		AGMCORE_producing_seps not and
		level2 not and
		{
			Width Height BitsPerComponent ImageMatrix 
			[
			/DataSource load/exec cvx
			{
				0 1 2 index length 1 sub{
					1 index exch
					2 copy get 255 xor put
				}for
			}/exec cvx
			]cvx bind
			MappedCSA 0 get/DeviceCMYK eq{
				Components aload pop
			}{
				0 0 0 Components aload pop 1 exch sub
			}ifelse
			Name findcmykcustomcolor
			customcolorimage
		}{
			AGMCORE_producing_seps not{
				level2{
 					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne AGMCORE_avoid_L2_sep_space not and currentcolorspace 0 get/Separation ne and{
						[/Separation Name MappedCSA sep_proc_name exch dup 0 get 15 string cvs(/Device)anchorsearch{pop pop 0 get}{pop}ifelse exch load]setcolorspace_opt
						/sep_tint AGMCORE_gget setcolor
					}if
					currentdict imageormask
				}{
					currentdict
					Operator/imagemask eq{
						imageormask
					}{
						sep_imageormask_lev1
					}ifelse
				}ifelse
 			}{
				AGMCORE_host_sep{
					Operator/knockout eq{
						currentdict/ImageMatrix get concat
						knockout_unitsq
					}{
						currentgray 1 ne{
 							AGMCORE_is_cmyk_sep Name(All)ne and{
 								level2{
 									Name AGMCORE_IsSeparationAProcessColor 
 									{
 										Operator/imagemask eq{
 											//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
 												/sep_tint AGMCORE_gget 1 exch sub AGMCORE_&setcolor
 											}if
 										}{
											invert_image_samples
 										}ifelse
	 								}{
	 									//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
	 										[/Separation Name[/DeviceGray]
	 										{
	 											sep_colorspace_proc AGMCORE_get_ink_data
												1 exch sub
	 										}bind
											]AGMCORE_&setcolorspace
											/sep_tint AGMCORE_gget AGMCORE_&setcolor
										}if
 									}ifelse
 									currentdict imageormask_sys
	 							}{
	 								currentdict
									Operator/imagemask eq{
										imageormask_sys
									}{
										sep_image_lev1_sep
									}ifelse
	 							}ifelse
 							}{
 								Operator/imagemask ne{
									invert_image_samples
 								}if
		 						currentdict imageormask_sys
 							}ifelse
 						}{
 							currentoverprint not Name(All)eq or Operator/imagemask eq and{
								currentdict imageormask_sys 
								}{
								currentoverprint not
									{
 									gsave 
 									knockout_unitsq
 									grestore
									}if
								currentdict consumeimagedata 
		 					}ifelse
 						}ifelse
		 			}ifelse
 				}{
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{
						currentcolorspace 0 get/Separation ne{
							[/Separation Name MappedCSA sep_proc_name exch 0 get exch load]setcolorspace_opt
							/sep_tint AGMCORE_gget setcolor
						}if
					}if
					currentoverprint 
					MappedCSA 0 get/DeviceCMYK eq and 
					Name AGMCORE_IsSeparationAProcessColor not and
					//Adobe_AGM_Core/AGMCORE_pattern_paint_type get 2 ne{Name inRip_spot_has_ink not and}{false}ifelse 
					Name(All)ne and{
						imageormask_l2_overprint
					}{
						currentdict imageormask
 					}ifelse
				}ifelse
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
}def
/colorSpaceElemCnt
{
	mark currentcolor counttomark dup 2 add 1 roll cleartomark
}bdf
/devn_sep_datasource
{
	1 dict begin
	/dataSource xdf
	[
		0 1 dataSource length 1 sub{
			dup currentdict/dataSource get/exch cvx/get cvx/exec cvx
			/exch cvx names_index/ne cvx[/pop cvx]cvx/if cvx
		}for
	]cvx bind
	end
}bdf		
/devn_alt_datasource
{
	11 dict begin
	/convProc xdf
	/origcolorSpaceElemCnt xdf
	/origMultipleDataSources xdf
	/origBitsPerComponent xdf
	/origDecode xdf
	/origDataSource xdf
	/dsCnt origMultipleDataSources{origDataSource length}{1}ifelse def
	/DataSource origMultipleDataSources
		{
			[
			BitsPerComponent 8 idiv origDecode length 2 idiv mul string
			0 1 origDecode length 2 idiv 1 sub
				{
				dup 7 mul 1 add index exch dup BitsPerComponent 8 idiv mul exch
				origDataSource exch get 0()/SubFileDecode filter
				BitsPerComponent 8 idiv string/readstring cvx/pop cvx/putinterval cvx
				}for 
			]bind cvx
		}{origDataSource}ifelse 0()/SubFileDecode filter def		
	[
		origcolorSpaceElemCnt string
		0 2 origDecode length 2 sub
			{
			dup origDecode exch get dup 3 -1 roll 1 add origDecode exch get exch sub 2 BitsPerComponent exp 1 sub div
			1 BitsPerComponent 8 idiv{DataSource/read cvx/not cvx{0}/if cvx/mul cvx}repeat/mul cvx/add cvx
			}for
		/convProc load/exec cvx
		origcolorSpaceElemCnt 1 sub -1 0
			{
			/dup cvx 2/add cvx/index cvx
			3 1/roll cvx/exch cvx 255/mul cvx/cvi cvx/put cvx
			}for
	]bind cvx 0()/SubFileDecode filter
	end
}bdf
/devn_imageormask
{
 	/devicen_colorspace_dict AGMCORE_gget begin
	CSA map_csa
	2 dict begin
	dup
	/srcDataStrs[3 -1 roll begin
		AGMIMG_init_common
		currentdict/MultipleDataSources known{MultipleDataSources{DataSource length}{1}ifelse}{1}ifelse
		{
			Width Decode length 2 div mul cvi
			{
				dup 65535 gt{1 add 2 div cvi}{exit}ifelse
			}loop
			string
		}repeat
		end]def
	/dstDataStr srcDataStrs 0 get length string def
	begin
	AGMIMG_init_common
	SkipImageProc{
		currentdict consumeimagedata
	}{
		save mark 
		AGMCORE_producing_seps not{
			level3 not{
				Operator/imagemask ne{
					/DataSource[[
						DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
						colorSpaceElemCnt/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
						devn_alt_datasource 1/string cvx/readstring cvx/pop cvx]cvx colorSpaceElemCnt 1 sub{dup}repeat]def				
					/MultipleDataSources true def
					/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				}if
			}if
			currentdict imageormask
 		}{
			AGMCORE_host_sep{
				Names convert_to_process{
					CSA get_csa_by_name 0 get/DeviceCMYK eq{
						/DataSource
							Width BitsPerComponent mul 7 add 8 idiv Height mul 4 mul 
							DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
							4/devicen_colorspace_dict AGMCORE_gget/TintTransform get 
							devn_alt_datasource
						filter_cmyk 0()/SubFileDecode filter def
						/MultipleDataSources false def
						/Decode[1 0]def
						/DeviceGray setcolorspace
			 			currentdict imageormask_sys
 					}{
						AGMCORE_report_unsupported_color_space
						AGMCORE_black_plate{
							/DataSource
								DataSource Decode BitsPerComponent currentdict/MultipleDataSources known{MultipleDataSources}{false}ifelse
								CSA get_csa_by_name 0 get/DeviceRGB eq{3}{1}ifelse/devicen_colorspace_dict AGMCORE_gget/TintTransform get
								devn_alt_datasource
							/MultipleDataSources false def
							/Decode colorSpaceElemCnt[exch{0 1}repeat]def
				 			currentdict imageormask_sys
				 		}{
	 						gsave 
	 						knockout_unitsq
	 						grestore
							currentdict consumeimagedata 
						}ifelse
 					}ifelse
				}
				{	
					/devicen_colorspace_dict AGMCORE_gget/names_index known{
	 					Operator/imagemask ne{
	 						MultipleDataSources{
		 						/DataSource[DataSource devn_sep_datasource/exec cvx]cvx def
								/MultipleDataSources false def
	 						}{
								/DataSource/DataSource load dstDataStr srcDataStrs 0 get filter_devn def
	 						}ifelse
							invert_image_samples
	 					}if
			 			currentdict imageormask_sys
	 				}{
	 					currentoverprint not Operator/imagemask eq and{
							currentdict imageormask_sys 
							}{
							currentoverprint not
								{
	 							gsave 
	 							knockout_unitsq
	 							grestore
								}if
							currentdict consumeimagedata 
			 			}ifelse
	 				}ifelse
	 			}ifelse
 			}{
				currentdict imageormask
			}ifelse
		}ifelse
		cleartomark restore
	}ifelse
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
	end
	end
}def
/imageormask_l2_overprint
{
	currentdict
	currentcmykcolor add add add 0 eq{
		currentdict consumeimagedata
	}{
		level3{			
			currentcmykcolor 
			/AGMIMG_k xdf 
			/AGMIMG_y xdf 
			/AGMIMG_m xdf 
			/AGMIMG_c xdf
			Operator/imagemask eq{
				[/DeviceN[
				AGMIMG_c 0 ne{/Cyan}if
				AGMIMG_m 0 ne{/Magenta}if
				AGMIMG_y 0 ne{/Yellow}if
				AGMIMG_k 0 ne{/Black}if
				]/DeviceCMYK{}]setcolorspace
				AGMIMG_c 0 ne{AGMIMG_c}if
				AGMIMG_m 0 ne{AGMIMG_m}if
				AGMIMG_y 0 ne{AGMIMG_y}if
				AGMIMG_k 0 ne{AGMIMG_k}if
				setcolor			
			}{	
				/Decode[Decode 0 get 255 mul Decode 1 get 255 mul]def
				[/Indexed 				
					[
						/DeviceN[
							AGMIMG_c 0 ne{/Cyan}if
							AGMIMG_m 0 ne{/Magenta}if
							AGMIMG_y 0 ne{/Yellow}if
							AGMIMG_k 0 ne{/Black}if
						]
						/DeviceCMYK{
							AGMIMG_k 0 eq{0}if
							AGMIMG_y 0 eq{0 exch}if
							AGMIMG_m 0 eq{0 3 1 roll}if
							AGMIMG_c 0 eq{0 4 1 roll}if						
						}
					]
					255
					{
						255 div 
						mark exch
						dup	dup dup
						AGMIMG_k 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 1 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_y 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 2 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_m 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec 4 3 roll pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						AGMIMG_c 0 ne{
							/sep_tint AGMCORE_gget mul MappedCSA sep_proc_name exch pop load exec pop pop pop		
							counttomark 1 roll
						}{
							pop
						}ifelse
						counttomark 1 add -1 roll pop
					}
				]setcolorspace
			}ifelse
			imageormask_sys
		}{
	write_image_file{
		currentcmykcolor
		0 ne{
			[/Separation/Black/DeviceGray{}]setcolorspace
			gsave
			/Black
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 1 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Yellow/DeviceGray{}]setcolorspace
			gsave
			/Yellow
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 2 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Magenta/DeviceGray{}]setcolorspace
			gsave
			/Magenta
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{4 3 roll pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
		0 ne{
			[/Separation/Cyan/DeviceGray{}]setcolorspace
			gsave
			/Cyan 
			[{1 exch sub/sep_tint AGMCORE_gget mul}/exec cvx MappedCSA sep_proc_name cvx exch pop{pop pop pop 1 exch sub}/exec cvx]
			cvx modify_halftone_xfer
			Operator currentdict read_image_file
			grestore
		}if
				close_image_file
			}{
				imageormask
			}ifelse
		}ifelse
	}ifelse
}def
/indexed_imageormask
{
	begin
		AGMIMG_init_common
		save mark 
 		currentdict
 		AGMCORE_host_sep{
			Operator/knockout eq{
				/indexed_colorspace_dict AGMCORE_gget dup/CSA known{
					/CSA get get_csa_by_name
				}{
					/Names get
				}ifelse
				overprint_plate not{
					knockout_unitsq
				}if
			}{
				Indexed_DeviceN{
					/devicen_colorspace_dict AGMCORE_gget dup/names_index known exch/Names get convert_to_process or{
			 			indexed_image_lev2_sep
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}{
		 			AGMCORE_is_cmyk_sep{
						Operator/imagemask eq{
							imageormask_sys
						}{
							level2{
								indexed_image_lev2_sep
							}{
								indexed_image_lev1_sep
							}ifelse
						}ifelse
					}{
						currentoverprint not{
							knockout_unitsq
			 			}if
			 			currentdict consumeimagedata
					}ifelse
				}ifelse
			}ifelse
 		}{
			level2{
				Indexed_DeviceN{
					/indexed_colorspace_dict AGMCORE_gget begin
				}{
					/indexed_colorspace_dict AGMCORE_gget dup null ne
					{
						begin
						currentdict/CSDBase known{CSDBase/CSD get_res/MappedCSA get}{CSA}ifelse
						get_csa_by_name 0 get/DeviceCMYK eq ps_level 3 ge and ps_version 3015.007 lt and
						AGMCORE_in_rip_sep and{
							[/Indexed[/DeviceN[/Cyan/Magenta/Yellow/Black]/DeviceCMYK{}]HiVal Lookup]
							setcolorspace
						}if
						end
					}
					{pop}ifelse
				}ifelse
				imageormask
				Indexed_DeviceN{
					end
				}if
			}{
				Operator/imagemask eq{
					imageormask
				}{
					indexed_imageormask_lev1
				}ifelse
			}ifelse
 		}ifelse
		cleartomark restore
	currentdict/_Filters known{_Filters AGMIMG_flushfilters}if
	end
}def
/indexed_image_lev2_sep
{
	/indexed_colorspace_dict AGMCORE_gget begin
	begin
		Indexed_DeviceN not{
			currentcolorspace 
			dup 1/DeviceGray put
			dup 3
			currentcolorspace 2 get 1 add string
			0 1 2 3 AGMCORE_get_ink_data 4 currentcolorspace 3 get length 1 sub
			{
			dup 4 idiv exch currentcolorspace 3 get exch get 255 exch sub 2 index 3 1 roll put
			}for 
			put	setcolorspace
		}if
		currentdict 
		Operator/imagemask eq{
			AGMIMG_&imagemask
		}{
			use_mask{
				process_mask AGMIMG_&image
			}{
				AGMIMG_&image
			}ifelse
		}ifelse
	end end
}def
 /OPIimage
 {
 	dup type/dicttype ne{
 		10 dict begin
 			/DataSource xdf
 			/ImageMatrix xdf
 			/BitsPerComponent xdf
 			/Height xdf
 			/Width xdf
 			/ImageType 1 def
 			/Decode[0 1 def]
 			currentdict
 		end
 	}if
 	dup begin
 		/NComponents 1 cdndf
 		/MultipleDataSources false cdndf
 		/SkipImageProc{false}cdndf
 		/Decode[
 				0 
 				currentcolorspace 0 get/Indexed eq{
 					2 BitsPerComponent exp 1 sub
 				}{
 					1
 				}ifelse
 		]cdndf
 		/Operator/image cdndf
 	end
 	/sep_colorspace_dict AGMCORE_gget null eq{
 		imageormask
 	}{
 		gsave
 		dup begin invert_image_samples end
 		sep_imageormask
 		grestore
 	}ifelse
 }def
/cachemask_level2
{
	3 dict begin
	/LZWEncode filter/WriteFilter xdf
	/readBuffer 256 string def
	/ReadFilter
		currentfile
		0(%EndMask)/SubFileDecode filter
		/ASCII85Decode filter
		/RunLengthDecode filter
	def
	{
		ReadFilter readBuffer readstring exch
		WriteFilter exch writestring
		not{exit}if
	}loop
	WriteFilter closefile
	end
}def
/spot_alias
{
	/mapto_sep_imageormask 
	{
		dup type/dicttype ne{
			12 dict begin
				/ImageType 1 def
				/DataSource xdf
				/ImageMatrix xdf
				/BitsPerComponent xdf
				/Height xdf
				/Width xdf
				/MultipleDataSources false def
		}{
			begin
		}ifelse
				/Decode[/customcolor_tint AGMCORE_gget 0]def
				/Operator/image def
				/SkipImageProc{false}def
				currentdict 
			end
		sep_imageormask
	}bdf
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_colorAry xddf
		/customcolor_tint AGMCORE_gget
		<<
			/Name AGMIMG_colorAry 4 get
			/CSA[/DeviceCMYK]
			/TintMethod/Subtractive
			/TintProc null
			/MappedCSA null
			/NComponents 4 
			/Components[AGMIMG_colorAry aload pop pop]
		>>
		setsepcolorspace
		mapto_sep_imageormask
	}ndf
	Adobe_AGM_Image/AGMIMG_&customcolorimage/customcolorimage load put
	/customcolorimage
	{
		Adobe_AGM_Image/AGMIMG_override false put
		current_spot_alias{dup 4 get map_alias}{false}ifelse
		{
			false set_spot_alias
			/customcolor_tint AGMCORE_gget exch setsepcolorspace
			pop
			mapto_sep_imageormask
			true set_spot_alias
		}{
			//Adobe_AGM_Image/AGMIMG_&customcolorimage get exec
		}ifelse			
	}bdf
}def
/snap_to_device
{
	6 dict begin
	matrix currentmatrix
	dup 0 get 0 eq 1 index 3 get 0 eq and
	1 index 1 get 0 eq 2 index 2 get 0 eq and or exch pop
	{
		1 1 dtransform 0 gt exch 0 gt/AGMIMG_xSign? exch def/AGMIMG_ySign? exch def
		0 0 transform
		AGMIMG_ySign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		AGMIMG_xSign?{floor 0.1 sub}{ceiling 0.1 add}ifelse exch
		itransform/AGMIMG_llY exch def/AGMIMG_llX exch def
		1 1 transform
		AGMIMG_ySign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		AGMIMG_xSign?{ceiling 0.1 add}{floor 0.1 sub}ifelse exch
		itransform/AGMIMG_urY exch def/AGMIMG_urX exch def			
		[AGMIMG_urX AGMIMG_llX sub 0 0 AGMIMG_urY AGMIMG_llY sub AGMIMG_llX AGMIMG_llY]concat
	}{
	}ifelse
	end
}def
level2 not{
	/colorbuf
	{
		0 1 2 index length 1 sub{
			dup 2 index exch get 
			255 exch sub 
			2 index 
			3 1 roll 
			put
		}for
	}def
	/tint_image_to_color
	{
		begin
			Width Height BitsPerComponent ImageMatrix 
			/DataSource load
		end
		Adobe_AGM_Image begin
			/AGMIMG_mbuf 0 string def
			/AGMIMG_ybuf 0 string def
			/AGMIMG_kbuf 0 string def
			{
				colorbuf dup length AGMIMG_mbuf length ne
					{
					dup length dup dup
					/AGMIMG_mbuf exch string def
					/AGMIMG_ybuf exch string def
					/AGMIMG_kbuf exch string def
					}if
				dup AGMIMG_mbuf copy AGMIMG_ybuf copy AGMIMG_kbuf copy pop
			}
			addprocs
			{AGMIMG_mbuf}{AGMIMG_ybuf}{AGMIMG_kbuf}true 4 colorimage	
		end
	}def			
	/sep_imageormask_lev1
	{
		begin
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{
					255 mul round cvi GrayLookup exch get
				}currenttransfer addprocs settransfer
				currentdict imageormask
			}{
				/sep_colorspace_dict AGMCORE_gget/Components known{
					MappedCSA 0 get/DeviceCMYK eq{
						Components aload pop
					}{
						0 0 0 Components aload pop 1 exch sub
					}ifelse
					Adobe_AGM_Image/AGMIMG_k xddf 
					Adobe_AGM_Image/AGMIMG_y xddf 
					Adobe_AGM_Image/AGMIMG_m xddf 
					Adobe_AGM_Image/AGMIMG_c xddf 
					AGMIMG_y 0.0 eq AGMIMG_m 0.0 eq and AGMIMG_c 0.0 eq and{
						{AGMIMG_k mul 1 exch sub}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						currentcolortransfer
						{AGMIMG_k mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_y mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_m mul 1 exch sub}exch addprocs 4 1 roll
						{AGMIMG_c mul 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer
						currentdict tint_image_to_color
					}ifelse
				}{
					MappedCSA 0 get/DeviceGray eq{
						{255 mul round cvi ColorLookup exch get 0 get}currenttransfer addprocs settransfer
						currentdict imageormask
					}{
						MappedCSA 0 get/DeviceCMYK eq{
							currentcolortransfer
							{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}{
							currentcolortransfer
							{pop 1}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 2 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 1 get}exch addprocs 4 1 roll
							{255 mul round cvi ColorLookup exch get 0 get}exch addprocs 4 1 roll
							setcolortransfer 
							currentdict tint_image_to_color
						}ifelse
					}ifelse
				}ifelse
			}ifelse
		end
	}def
	/sep_image_lev1_sep
	{
		begin
			/sep_colorspace_dict AGMCORE_gget/Components known{
				Components aload pop
				Adobe_AGM_Image/AGMIMG_k xddf 
				Adobe_AGM_Image/AGMIMG_y xddf 
				Adobe_AGM_Image/AGMIMG_m xddf 
				Adobe_AGM_Image/AGMIMG_c xddf 
				{AGMIMG_c mul 1 exch sub}
				{AGMIMG_m mul 1 exch sub}
				{AGMIMG_y mul 1 exch sub}
				{AGMIMG_k mul 1 exch sub}
			}{
				{255 mul round cvi ColorLookup exch get 0 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 1 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 2 get 1 exch sub}
				{255 mul round cvi ColorLookup exch get 3 get 1 exch sub}
			}ifelse
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end
	}def
	/indexed_imageormask_lev1
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			currentdict
			MappedCSA 0 get dup/DeviceRGB eq exch/DeviceCMYK eq or has_color not and{
				{HiVal mul round cvi GrayLookup exch get HiVal div}currenttransfer addprocs settransfer
				imageormask
			}{
				MappedCSA 0 get/DeviceGray eq{
					{HiVal mul round cvi Lookup exch get HiVal div}currenttransfer addprocs settransfer
					imageormask
				}{
					MappedCSA 0 get/DeviceCMYK eq{
						currentcolortransfer
						{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}{
						currentcolortransfer
						{pop 1}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 2 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 1 add Lookup exch get HiVal div}exch addprocs 4 1 roll
						{3 mul HiVal mul round cvi 		Lookup exch get HiVal div}exch addprocs 4 1 roll
						setcolortransfer 
						tint_image_to_color
					}ifelse
				}ifelse
			}ifelse
		end end
	}def
	/indexed_image_lev1_sep
	{
		/indexed_colorspace_dict AGMCORE_gget begin
		begin
			{4 mul HiVal mul round cvi		 Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 1 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 2 add Lookup exch get HiVal div 1 exch sub}
			{4 mul HiVal mul round cvi 3 add Lookup exch get HiVal div 1 exch sub}
			AGMCORE_get_ink_data currenttransfer addprocs settransfer
			currentdict imageormask_sys
		end end
	}def
}if
end
systemdict/setpacking known
{setpacking}if
%%EndResource
currentdict Adobe_AGM_Utils eq {end} if
%%EndProlog
%%BeginSetup
Adobe_AGM_Utils begin
2 2010 Adobe_AGM_Core/ds gx
Adobe_CoolType_Core/ds get exec
Adobe_AGM_Image/ds gx
currentdict Adobe_AGM_Utils eq {end} if
%%EndSetup
%%Page: 1 1
%%EndPageComments
%%BeginPageSetup
%ADOBeginClientInjection: PageSetup Start "AI11EPS"
%AI12_RMC_Transparency: Balance=75 RasterRes=300 GradRes=150 Text=0 Stroke=1 Clip=1 OP=0
%ADOEndClientInjection: PageSetup Start "AI11EPS"
Adobe_AGM_Utils begin
Adobe_AGM_Core/ps gx
Adobe_AGM_Utils/capture_cpd gx
Adobe_CoolType_Core/ps get exec
Adobe_AGM_Image/ps gx
%ADOBeginClientInjection: PageSetup End "AI11EPS"
/currentdistillerparams where{pop currentdistillerparams /CoreDistVersion get 5000 lt} {true} ifelse{ userdict /AI11_PDFMark5 /cleartomark load putuserdict /AI11_ReadMetadata_PDFMark5 {flushfile cleartomark } bind put}{ userdict /AI11_PDFMark5 /pdfmark load putuserdict /AI11_ReadMetadata_PDFMark5 {/PUT pdfmark} bind put } ifelse[/NamespacePush AI11_PDFMark5[/_objdef {ai_metadata_stream_123} /type /stream /OBJ AI11_PDFMark5[{ai_metadata_stream_123}currentfile 0 (%  &&end XMP packet marker&&)/SubFileDecode filter AI11_ReadMetadata_PDFMark5<?xpacket begin="﻿" id="W5M0MpCehiHzreSzNTczkc9d"?>
<x:xmpmeta xmlns:x="adobe:ns:meta/" x:xmptk="Adobe XMP Core 5.6-c067 79.157747, 2015/03/30-23:40:42        ">
   <rdf:RDF xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#">
      <rdf:Description rdf:about=""
            xmlns:dc="http://purl.org/dc/elements/1.1/"
            xmlns:xmp="http://ns.adobe.com/xap/1.0/"
            xmlns:xmpGImg="http://ns.adobe.com/xap/1.0/g/img/"
            xmlns:xmpMM="http://ns.adobe.com/xap/1.0/mm/"
            xmlns:stRef="http://ns.adobe.com/xap/1.0/sType/ResourceRef#"
            xmlns:stEvt="http://ns.adobe.com/xap/1.0/sType/ResourceEvent#"
            xmlns:illustrator="http://ns.adobe.com/illustrator/1.0/"
            xmlns:xmpTPg="http://ns.adobe.com/xap/1.0/t/pg/"
            xmlns:stDim="http://ns.adobe.com/xap/1.0/sType/Dimensions#"
            xmlns:xmpG="http://ns.adobe.com/xap/1.0/g/"
            xmlns:pdf="http://ns.adobe.com/pdf/1.3/">
         <dc:format>application/postscript</dc:format>
         <dc:title>
            <rdf:Alt>
               <rdf:li xml:lang="x-default">Печать</rdf:li>
            </rdf:Alt>
         </dc:title>
         <xmp:MetadataDate>2015-12-15T08:15:07+02:00</xmp:MetadataDate>
         <xmp:ModifyDate>2015-12-15T08:15:07+02:00</xmp:ModifyDate>
         <xmp:CreateDate>2015-12-15T08:15:07+02:00</xmp:CreateDate>
         <xmp:CreatorTool>Adobe Illustrator CC 2015 (Windows)</xmp:CreatorTool>
         <xmp:Thumbnails>
            <rdf:Alt>
               <rdf:li rdf:parseType="Resource">
                  <xmpGImg:width>256</xmpGImg:width>
                  <xmpGImg:height>228</xmpGImg:height>
                  <xmpGImg:format>JPEG</xmpGImg:format>
                  <xmpGImg:image>/9j/4AAQSkZJRgABAgEC0ALQAAD/7QAsUGhvdG9zaG9wIDMuMAA4QklNA+0AAAAAABAC0AAAAAEA&#xA;AQLQAAAAAQAB/+IMWElDQ19QUk9GSUxFAAEBAAAMSExpbm8CEAAAbW50clJHQiBYWVogB84AAgAJ&#xA;AAYAMQAAYWNzcE1TRlQAAAAASUVDIHNSR0IAAAAAAAAAAAAAAAAAAPbWAAEAAAAA0y1IUCAgAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAARY3BydAAAAVAAAAAz&#xA;ZGVzYwAAAYQAAABsd3RwdAAAAfAAAAAUYmtwdAAAAgQAAAAUclhZWgAAAhgAAAAUZ1hZWgAAAiwA&#xA;AAAUYlhZWgAAAkAAAAAUZG1uZAAAAlQAAABwZG1kZAAAAsQAAACIdnVlZAAAA0wAAACGdmlldwAA&#xA;A9QAAAAkbHVtaQAAA/gAAAAUbWVhcwAABAwAAAAkdGVjaAAABDAAAAAMclRSQwAABDwAAAgMZ1RS&#xA;QwAABDwAAAgMYlRSQwAABDwAAAgMdGV4dAAAAABDb3B5cmlnaHQgKGMpIDE5OTggSGV3bGV0dC1Q&#xA;YWNrYXJkIENvbXBhbnkAAGRlc2MAAAAAAAAAEnNSR0IgSUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAS&#xA;c1JHQiBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA&#xA;AAAAAAAAAAAAAFhZWiAAAAAAAADzUQABAAAAARbMWFlaIAAAAAAAAAAAAAAAAAAAAABYWVogAAAA&#xA;AAAAb6IAADj1AAADkFhZWiAAAAAAAABimQAAt4UAABjaWFlaIAAAAAAAACSgAAAPhAAAts9kZXNj&#xA;AAAAAAAAABZJRUMgaHR0cDovL3d3dy5pZWMuY2gAAAAAAAAAAAAAABZJRUMgaHR0cDovL3d3dy5p&#xA;ZWMuY2gAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAZGVzYwAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAuSUVDIDYxOTY2LTIuMSBEZWZhdWx0IFJHQiBjb2xvdXIgc3BhY2UgLSBzUkdCAAAAAAAA&#xA;AAAAAAAAAAAAAAAAAAAAAGRlc2MAAAAAAAAALFJlZmVyZW5jZSBWaWV3aW5nIENvbmRpdGlvbiBp&#xA;biBJRUM2MTk2Ni0yLjEAAAAAAAAAAAAAACxSZWZlcmVuY2UgVmlld2luZyBDb25kaXRpb24gaW4g&#xA;SUVDNjE5NjYtMi4xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAB2aWV3AAAAAAATpP4AFF8uABDP&#xA;FAAD7cwABBMLAANcngAAAAFYWVogAAAAAABMCVYAUAAAAFcf521lYXMAAAAAAAAAAQAAAAAAAAAA&#xA;AAAAAAAAAAAAAAKPAAAAAnNpZyAAAAAAQ1JUIGN1cnYAAAAAAAAEAAAAAAUACgAPABQAGQAeACMA&#xA;KAAtADIANwA7AEAARQBKAE8AVABZAF4AYwBoAG0AcgB3AHwAgQCGAIsAkACVAJoAnwCkAKkArgCy&#xA;ALcAvADBAMYAywDQANUA2wDgAOUA6wDwAPYA+wEBAQcBDQETARkBHwElASsBMgE4AT4BRQFMAVIB&#xA;WQFgAWcBbgF1AXwBgwGLAZIBmgGhAakBsQG5AcEByQHRAdkB4QHpAfIB+gIDAgwCFAIdAiYCLwI4&#xA;AkECSwJUAl0CZwJxAnoChAKOApgCogKsArYCwQLLAtUC4ALrAvUDAAMLAxYDIQMtAzgDQwNPA1oD&#xA;ZgNyA34DigOWA6IDrgO6A8cD0wPgA+wD+QQGBBMEIAQtBDsESARVBGMEcQR+BIwEmgSoBLYExATT&#xA;BOEE8AT+BQ0FHAUrBToFSQVYBWcFdwWGBZYFpgW1BcUF1QXlBfYGBgYWBicGNwZIBlkGagZ7BowG&#xA;nQavBsAG0QbjBvUHBwcZBysHPQdPB2EHdAeGB5kHrAe/B9IH5Qf4CAsIHwgyCEYIWghuCIIIlgiq&#xA;CL4I0gjnCPsJEAklCToJTwlkCXkJjwmkCboJzwnlCfsKEQonCj0KVApqCoEKmAquCsUK3ArzCwsL&#xA;Igs5C1ELaQuAC5gLsAvIC+EL+QwSDCoMQwxcDHUMjgynDMAM2QzzDQ0NJg1ADVoNdA2ODakNww3e&#xA;DfgOEw4uDkkOZA5/DpsOtg7SDu4PCQ8lD0EPXg96D5YPsw/PD+wQCRAmEEMQYRB+EJsQuRDXEPUR&#xA;ExExEU8RbRGMEaoRyRHoEgcSJhJFEmQShBKjEsMS4xMDEyMTQxNjE4MTpBPFE+UUBhQnFEkUahSL&#xA;FK0UzhTwFRIVNBVWFXgVmxW9FeAWAxYmFkkWbBaPFrIW1hb6Fx0XQRdlF4kXrhfSF/cYGxhAGGUY&#xA;ihivGNUY+hkgGUUZaxmRGbcZ3RoEGioaURp3Gp4axRrsGxQbOxtjG4obshvaHAIcKhxSHHscoxzM&#xA;HPUdHh1HHXAdmR3DHeweFh5AHmoelB6+HukfEx8+H2kflB+/H+ogFSBBIGwgmCDEIPAhHCFIIXUh&#xA;oSHOIfsiJyJVIoIiryLdIwojOCNmI5QjwiPwJB8kTSR8JKsk2iUJJTglaCWXJccl9yYnJlcmhya3&#xA;JugnGCdJJ3onqyfcKA0oPyhxKKIo1CkGKTgpaymdKdAqAio1KmgqmyrPKwIrNitpK50r0SwFLDks&#xA;biyiLNctDC1BLXYtqy3hLhYuTC6CLrcu7i8kL1ovkS/HL/4wNTBsMKQw2zESMUoxgjG6MfIyKjJj&#xA;Mpsy1DMNM0YzfzO4M/E0KzRlNJ402DUTNU01hzXCNf02NzZyNq426TckN2A3nDfXOBQ4UDiMOMg5&#xA;BTlCOX85vDn5OjY6dDqyOu87LTtrO6o76DwnPGU8pDzjPSI9YT2hPeA+ID5gPqA+4D8hP2E/oj/i&#xA;QCNAZECmQOdBKUFqQaxB7kIwQnJCtUL3QzpDfUPARANER0SKRM5FEkVVRZpF3kYiRmdGq0bwRzVH&#xA;e0fASAVIS0iRSNdJHUljSalJ8Eo3Sn1KxEsMS1NLmkviTCpMcky6TQJNSk2TTdxOJU5uTrdPAE9J&#xA;T5NP3VAnUHFQu1EGUVBRm1HmUjFSfFLHUxNTX1OqU/ZUQlSPVNtVKFV1VcJWD1ZcVqlW91dEV5JX&#xA;4FgvWH1Yy1kaWWlZuFoHWlZaplr1W0VblVvlXDVchlzWXSddeF3JXhpebF69Xw9fYV+zYAVgV2Cq&#xA;YPxhT2GiYfViSWKcYvBjQ2OXY+tkQGSUZOllPWWSZedmPWaSZuhnPWeTZ+loP2iWaOxpQ2maafFq&#xA;SGqfavdrT2una/9sV2yvbQhtYG25bhJua27Ebx5veG/RcCtwhnDgcTpxlXHwcktypnMBc11zuHQU&#xA;dHB0zHUodYV14XY+dpt2+HdWd7N4EXhueMx5KnmJeed6RnqlewR7Y3vCfCF8gXzhfUF9oX4BfmJ+&#xA;wn8jf4R/5YBHgKiBCoFrgc2CMIKSgvSDV4O6hB2EgITjhUeFq4YOhnKG14c7h5+IBIhpiM6JM4mZ&#xA;if6KZIrKizCLlov8jGOMyo0xjZiN/45mjs6PNo+ekAaQbpDWkT+RqJIRknqS45NNk7aUIJSKlPSV&#xA;X5XJljSWn5cKl3WX4JhMmLiZJJmQmfyaaJrVm0Kbr5wcnImc951kndKeQJ6unx2fi5/6oGmg2KFH&#xA;obaiJqKWowajdqPmpFakx6U4pammGqaLpv2nbqfgqFKoxKk3qamqHKqPqwKrdavprFys0K1Erbiu&#xA;La6hrxavi7AAsHWw6rFgsdayS7LCszizrrQltJy1E7WKtgG2ebbwt2i34LhZuNG5SrnCuju6tbsu&#xA;u6e8IbybvRW9j74KvoS+/796v/XAcMDswWfB48JfwtvDWMPUxFHEzsVLxcjGRsbDx0HHv8g9yLzJ&#xA;Osm5yjjKt8s2y7bMNcy1zTXNtc42zrbPN8+40DnQutE80b7SP9LB00TTxtRJ1MvVTtXR1lXW2Ndc&#xA;1+DYZNjo2WzZ8dp22vvbgNwF3IrdEN2W3hzeot8p36/gNuC94UThzOJT4tvjY+Pr5HPk/OWE5g3m&#xA;lucf56noMui86Ubp0Opb6uXrcOv77IbtEe2c7ijutO9A78zwWPDl8XLx//KM8xnzp/Q09ML1UPXe&#xA;9m32+/eK+Bn4qPk4+cf6V/rn+3f8B/yY/Sn9uv5L/tz/bf///+4ADkFkb2JlAGTAAAAAAf/bAIQA&#xA;BgQEBAUEBgUFBgkGBQYJCwgGBggLDAoKCwoKDBAMDAwMDAwQDA4PEA8ODBMTFBQTExwbGxscHx8f&#xA;Hx8fHx8fHwEHBwcNDA0YEBAYGhURFRofHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8fHx8f&#xA;Hx8fHx8fHx8fHx8fHx8f/8AAEQgA5AEAAwERAAIRAQMRAf/EAaIAAAAHAQEBAQEAAAAAAAAAAAQF&#xA;AwIGAQAHCAkKCwEAAgIDAQEBAQEAAAAAAAAAAQACAwQFBgcICQoLEAACAQMDAgQCBgcDBAIGAnMB&#xA;AgMRBAAFIRIxQVEGE2EicYEUMpGhBxWxQiPBUtHhMxZi8CRygvElQzRTkqKyY3PCNUQnk6OzNhdU&#xA;ZHTD0uIIJoMJChgZhJRFRqS0VtNVKBry4/PE1OT0ZXWFlaW1xdXl9WZ2hpamtsbW5vY3R1dnd4eX&#xA;p7fH1+f3OEhYaHiImKi4yNjo+Ck5SVlpeYmZqbnJ2en5KjpKWmp6ipqqusra6voRAAICAQIDBQUE&#xA;BQYECAMDbQEAAhEDBCESMUEFURNhIgZxgZEyobHwFMHR4SNCFVJicvEzJDRDghaSUyWiY7LCB3PS&#xA;NeJEgxdUkwgJChgZJjZFGidkdFU38qOzwygp0+PzhJSktMTU5PRldYWVpbXF1eX1RlZmdoaWprbG&#xA;1ub2R1dnd4eXp7fH1+f3OEhYaHiImKi4yNjo+DlJWWl5iZmpucnZ6fkqOkpaanqKmqq6ytrq+v/a&#xA;AAwDAQACEQMRAD8A9U4q7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7&#xA;FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7F&#xA;XYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYq7FXYqhrvUrS0Z&#xA;VmejNuFAJNPHbNT2j23ptGRHLKpHoBZrvbsWCU+QVoZop41liYMjdCMztLqsefGMmM8UD1a5wMTR&#xA;5r8yGLsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVdirsVU7i4jgiaR+g6DuT2AzH1Wqhgxmcu&#xA;Q+3yZwgZGgk2j68Z76a1uSAzNWE9vdP6Zy/YvtCc2olhyncn0/pj+pz9Vo+GAlH4/rT3Owda7FXY&#xA;q7FXYq7FXYq7FVOS5t4zSSVEPgzAfrxRa369Zf8ALRH/AMGv9cVsMb8ysiXXrJIkhkAHAMCVoO4H&#xA;bOR1/sjPXa/xJS4cBjvXOxtQ9/O/f5Ns+0xgxUN5/jdT0TzElmjw3KExkllZNyDsKUJ6Z1fZ/YOL&#xA;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</xmpGImg:image>
               </rdf:li>
            </rdf:Alt>
         </xmp:Thumbnails>
         <xmpMM:InstanceID>xmp.iid:21901e3c-63a8-8d49-afcd-7b2db63b7f1a</xmpMM:InstanceID>
         <xmpMM:DocumentID>xmp.did:21901e3c-63a8-8d49-afcd-7b2db63b7f1a</xmpMM:DocumentID>
         <xmpMM:OriginalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</xmpMM:OriginalDocumentID>
         <xmpMM:RenditionClass>proof:pdf</xmpMM:RenditionClass>
         <xmpMM:DerivedFrom rdf:parseType="Resource">
            <stRef:instanceID>xmp.iid:23109eb2-0b0d-8942-95dc-812b8112027a</stRef:instanceID>
            <stRef:documentID>xmp.did:23109eb2-0b0d-8942-95dc-812b8112027a</stRef:documentID>
            <stRef:originalDocumentID>uuid:5D20892493BFDB11914A8590D31508C8</stRef:originalDocumentID>
            <stRef:renditionClass>proof:pdf</stRef:renditionClass>
         </xmpMM:DerivedFrom>
         <xmpMM:History>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:23109eb2-0b0d-8942-95dc-812b8112027a</stEvt:instanceID>
                  <stEvt:when>2015-12-14T16:04:14+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <stEvt:action>saved</stEvt:action>
                  <stEvt:instanceID>xmp.iid:21901e3c-63a8-8d49-afcd-7b2db63b7f1a</stEvt:instanceID>
                  <stEvt:when>2015-12-15T08:15:07+02:00</stEvt:when>
                  <stEvt:softwareAgent>Adobe Illustrator CC 2015 (Windows)</stEvt:softwareAgent>
                  <stEvt:changed>/</stEvt:changed>
               </rdf:li>
            </rdf:Seq>
         </xmpMM:History>
         <illustrator:StartupProfile>Print</illustrator:StartupProfile>
         <xmpTPg:HasVisibleOverprint>False</xmpTPg:HasVisibleOverprint>
         <xmpTPg:HasVisibleTransparency>True</xmpTPg:HasVisibleTransparency>
         <xmpTPg:NPages>1</xmpTPg:NPages>
         <xmpTPg:MaxPageSize rdf:parseType="Resource">
            <stDim:w>450.000000</stDim:w>
            <stDim:h>400.000000</stDim:h>
            <stDim:unit>Pixels</stDim:unit>
         </xmpTPg:MaxPageSize>
         <xmpTPg:PlateNames>
            <rdf:Seq>
               <rdf:li>Cyan</rdf:li>
               <rdf:li>Magenta</rdf:li>
               <rdf:li>Yellow</rdf:li>
               <rdf:li>Black</rdf:li>
            </rdf:Seq>
         </xmpTPg:PlateNames>
         <xmpTPg:SwatchGroups>
            <rdf:Seq>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Группа образцов по умолчанию</xmpG:groupName>
                  <xmpG:groupType>0</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Белый</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>255</xmpG:green>
                           <xmpG:blue>255</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>Черный</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=142 G=114 B=94</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>142</xmpG:red>
                           <xmpG:green>114</xmpG:green>
                           <xmpG:blue>94</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=255 G=205 B=2</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>255</xmpG:red>
                           <xmpG:green>205</xmpG:green>
                           <xmpG:blue>2</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=58 G=111 B=129</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>58</xmpG:red>
                           <xmpG:green>110</xmpG:green>
                           <xmpG:blue>128</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=230 G=126 B=34</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>230</xmpG:red>
                           <xmpG:green>126</xmpG:green>
                           <xmpG:blue>34</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=151 G=214 B=239</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>151</xmpG:red>
                           <xmpG:green>214</xmpG:green>
                           <xmpG:blue>239</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=163 G=134 B=113</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>163</xmpG:red>
                           <xmpG:green>134</xmpG:green>
                           <xmpG:blue>113</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=165 G=198 B=59</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>165</xmpG:red>
                           <xmpG:green>198</xmpG:green>
                           <xmpG:blue>59</xmpG:blue>
                        </rdf:li>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>R=142 G=176 B=33</xmpG:swatchName>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:tint>100.000000</xmpG:tint>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:red>142</xmpG:red>
                           <xmpG:green>176</xmpG:green>
                           <xmpG:blue>33</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
               <rdf:li rdf:parseType="Resource">
                  <xmpG:groupName>Оттенки серого</xmpG:groupName>
                  <xmpG:groupType>1</xmpG:groupType>
                  <xmpG:Colorants>
                     <rdf:Seq>
                        <rdf:li rdf:parseType="Resource">
                           <xmpG:swatchName>C=0 M=0 Y=0 K=100</xmpG:swatchName>
                           <xmpG:mode>RGB</xmpG:mode>
                           <xmpG:type>PROCESS</xmpG:type>
                           <xmpG:red>29</xmpG:red>
                           <xmpG:green>29</xmpG:green>
                           <xmpG:blue>27</xmpG:blue>
                        </rdf:li>
                     </rdf:Seq>
                  </xmpG:Colorants>
               </rdf:li>
            </rdf:Seq>
         </xmpTPg:SwatchGroups>
         <pdf:Producer>Adobe PDF library 10.01</pdf:Producer>
      </rdf:Description>
   </rdf:RDF>
</x:xmpmeta>
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                                                                                                    
                           
<?xpacket end="w"?>%  &&end XMP packet marker&&[{ai_metadata_stream_123}<</Type /Metadata /Subtype /XML>>/PUT AI11_PDFMark5[/Document1 dict begin /Metadata {ai_metadata_stream_123} defcurrentdict end /BDC AI11_PDFMark5
%ADOEndClientInjection: PageSetup End "AI11EPS"
%%EndPageSetup
1 -1 scale 0 -400 translate
pgsv
[1 0 0 1 0 0 ]ct
gsave
np
gsave
0 0 mo
0 400 li
450 400 li
450 0 li
cp
clp
450 400 mo
0 400 li
0 0 li
450 0 li
450 400 li
false sop
/0 
[/DeviceCMYK] /CSA add_res
0 0 0 0 cmyk
f
145.105 70.195 mo
145.105 68.5282 143.754 67.177 142.087 67.177 cv
33.9783 67.177 li
32.3115 67.177 30.9604 68.5282 30.9604 70.195 cv
30.9604 71.8618 32.3115 73.2129 33.9783 73.2129 cv
48.8193 73.2129 li
50.486 73.2129 51.8373 74.5641 51.8373 76.2309 cv
51.8373 77.8977 50.486 79.249 48.8193 79.249 cv
48.7785 79.249 li
47.1119 79.249 45.7606 80.6001 45.7606 82.267 cv
45.7606 83.9338 47.1119 85.2849 48.7785 85.2849 cv
60.3698 85.2849 li
62.0367 85.2849 63.3878 86.6362 63.3878 88.303 cv
63.3878 89.9697 62.0367 91.321 60.3698 91.321 cv
58.7633 91.321 li
57.0965 91.321 55.7452 92.6721 55.7452 94.3389 cv
55.7452 96.0058 57.0965 97.3569 58.7633 97.3569 cv
123.267 97.3569 li
124.934 97.3569 126.285 96.0058 126.285 94.3389 cv
126.285 92.6721 124.934 91.321 123.267 91.321 cv
120.526 91.321 li
118.86 91.321 117.508 89.9697 117.508 88.303 cv
117.508 86.6362 118.86 85.2849 120.526 85.2849 cv
124.055 85.2849 li
125.721 85.2849 127.073 83.9338 127.073 82.267 cv
127.073 80.6001 125.721 79.249 124.055 79.249 cv
122.268 79.249 li
120.601 79.249 119.25 77.8977 119.25 76.2309 cv
119.25 74.5641 120.601 73.2129 122.268 73.2129 cv
142.087 73.2129 li
143.754 73.2129 145.105 71.8618 145.105 70.195 cv
.241093 0 .0373541 0 cmyk
f
141.149 104.995 mo
34.9164 104.995 li
33.0905 104.995 31.6104 106.475 31.6104 108.301 cv
31.6104 108.301 li
31.6104 110.127 33.0905 111.607 34.9164 111.607 cv
141.149 111.607 li
142.975 111.607 144.455 110.127 144.455 108.301 cv
144.455 108.301 li
144.455 106.475 142.975 104.995 141.149 104.995 cv
cp
.439796 .0123293 .897368 0 cmyk
f
103.644 64.994 mo
95.3443 56.2994 88.0329 45.0535 88.0329 45.0535 cv
88.0329 45.0535 80.7215 56.2994 72.422 64.994 cv
64.1227 73.6887 51.6735 82.2118 51.6735 82.2118 cv
51.6735 82.2118 59.1772 85.2528 62.8356 91.4447 cv
66.4939 97.6365 68.0747 105.503 68.0747 105.503 cv
88.0329 105.503 li
107.991 105.503 li
107.991 105.503 109.572 97.6365 113.23 91.4447 cv
116.888 85.2528 124.392 82.2118 124.392 82.2118 cv
124.392 82.2118 111.943 73.6887 103.644 64.994 cv
0 .198733 .926574 0 cmyk
f
93.0666 105.503 mo
82.999 105.503 li
88.0329 68.0622 li
93.0666 105.503 li
cp
.432441 .573571 .659785 .553735 cmyk
f
88.0329 68.0622 mo
82.999 105.503 li
82.999 105.503 78.6352 105.559 75.2276 101.927 cv
72.9909 99.5423 72.2249 96.1864 72.2249 96.1864 cv
72.2249 96.1864 75.3626 94.3474 78.6717 90.0929 cv
82.999 84.5291 88.0329 68.0622 88.0329 68.0622 cv
cp
0 .405707 .934051 0 cmyk
f
88.0329 68.0622 mo
93.0666 105.503 li
93.0666 105.503 97.4306 105.559 100.838 101.927 cv
103.075 99.5423 103.841 96.1864 103.841 96.1864 cv
103.841 96.1864 100.703 94.3474 97.394 90.0929 cv
93.0666 84.5291 88.0329 68.0622 88.0329 68.0622 cv
cp
f
72.2249 96.1863 mo
72.2249 96.1863 72.9909 99.5423 75.2276 101.927 cv
78.6352 105.559 82.9991 105.503 82.9991 105.503 cv
88.0329 68.0622 li
88.0329 68.0622 82.8442 87.9195 80.1289 93.357 cv
77.4136 98.7945 72.2249 96.1863 72.2249 96.1863 cv
cp
.0605478 .468635 .989807 .00369268 cmyk
f
103.841 96.1863 mo
103.841 96.1863 103.075 99.5423 100.838 101.927 cv
97.4306 105.559 93.0667 105.503 93.0667 105.503 cv
88.0329 68.0622 li
88.0329 68.0622 93.2215 87.9195 95.9369 93.357 cv
98.6521 98.7945 103.841 96.1863 103.841 96.1863 cv
cp
f
34.0743 96.4469 mo
33.9711 96.4469 33.869 96.4013 33.8002 96.3142 cv
33.6811 96.163 33.707 95.9437 33.8581 95.8246 cv
51.4575 81.9378 li
51.609 81.8186 51.8283 81.8451 51.9471 81.9957 cv
52.0662 82.1468 52.0404 82.366 51.8892 82.4852 cv
34.2898 96.372 li
34.0743 96.4469 li
cp
.768551 .40058 .352636 .194095 cmyk
f
38.9318 106.201 mo
38.6788 106.201 38.4351 106.063 38.3115 105.823 cv
31.6881 92.973 li
31.5114 92.6305 31.6459 92.2105 31.9883 92.034 cv
32.3308 91.857 32.7513 91.9919 32.9273 92.3344 cv
39.5507 105.184 li
39.7274 105.527 39.5929 105.947 39.2505 106.123 cv
39.1483 106.176 39.0393 106.201 38.9318 106.201 cv
cp
.305272 .409003 .492714 .203189 cmyk
f
141.991 96.4469 mo
141.776 96.372 li
124.176 82.4852 li
124.025 82.366 123.999 82.1468 124.119 81.9957 cv
124.238 81.8451 124.457 81.8186 124.608 81.9378 cv
142.207 95.8246 li
142.359 95.9437 142.385 96.163 142.265 96.3142 cv
142.197 96.4013 142.094 96.4469 141.991 96.4469 cv
cp
.768551 .40058 .352636 .194095 cmyk
f
137.134 106.201 mo
137.026 106.201 136.917 106.176 136.815 106.123 cv
136.473 105.947 136.338 105.527 136.515 105.184 cv
143.138 92.3344 li
143.314 91.9919 143.736 91.857 144.077 92.034 cv
144.42 92.2105 144.554 92.6305 144.377 92.973 cv
137.754 105.823 li
137.631 106.063 137.387 106.201 137.134 106.201 cv
cp
.305272 .409003 .492714 .203189 cmyk
f
77.5317 72.5236 mo
88.1984 55.9403 88.0329 45.0535 88.0329 45.0535 cv
88.0329 45.0535 80.7215 56.2994 72.422 64.994 cv
64.1227 73.6887 51.6735 82.2118 51.6735 82.2118 cv
51.8032 82.267 li
53.2499 82.8688 67.4194 88.245 77.5317 72.5236 cv
.0161135 .107637 .747982 0 cmyk
f
66.3128 75.5117 mo
66.0967 75.5117 65.8839 75.4116 65.7473 75.2237 cv
65.5216 74.9112 65.5914 74.4754 65.9032 74.25 cv
67.1854 73.3212 68.4437 72.3347 69.6438 71.316 cv
75.4559 66.3857 80.2916 60.4489 84.0165 53.6721 cv
84.1429 53.4411 84.381 53.3101 84.6271 53.3101 cv
84.7408 53.3101 84.8563 53.338 84.9632 53.397 cv
85.3009 53.5822 85.4242 54.0063 85.2386 54.3434 cv
81.4314 61.2701 76.4881 67.3383 70.546 72.3795 cv
69.319 73.4207 68.0317 74.4304 66.7211 75.3789 cv
66.5974 75.4688 66.4544 75.5117 66.3128 75.5117 cv
.0693675 0 .731716 0 cmyk
f
58.0686 80.5632 mo
57.8149 80.5632 57.5704 80.4251 57.4473 80.184 cv
57.2719 79.8409 57.4074 79.4208 57.7503 79.2457 cv
59.5652 78.3163 61.3525 77.2875 63.0633 76.1886 cv
63.1796 76.1128 63.3101 76.0768 63.4391 76.0768 cv
63.6686 76.0768 63.8936 76.1906 64.0267 76.3975 cv
64.2347 76.7216 64.1411 77.1533 63.817 77.361 cv
62.0684 78.4852 60.241 79.5372 58.3856 80.4864 cv
58.2841 80.5387 58.1755 80.5632 58.0686 80.5632 cv
f
108.955 89.6822 mo
104.979 95.5724 105.31 101.95 105.954 105.503 cv
107.991 105.503 li
107.991 105.503 109.572 97.6365 113.23 91.4447 cv
116.888 85.2528 124.392 82.2118 124.392 82.2118 cv
124.392 82.2118 114.532 81.4195 108.955 89.6822 cv
cp
0 .340032 .930755 0 cmyk
f
119.499 165.646 mo
110.239 179.874 li
128.759 179.874 li
119.499 165.646 li
cp
.789395 .385565 .771481 .341405 cmyk
f
119.499 170.736 mo
105.606 192.083 li
133.393 192.083 li
119.499 170.736 li
cp
f
119.499 178.388 mo
101.586 205.91 li
137.412 205.91 li
119.499 178.388 li
cp
f
117.622 192.955 mo
104.358 213.334 li
103.267 215.011 104.47 217.231 106.471 217.231 cv
132.999 217.231 li
135 217.231 136.204 215.011 135.112 213.334 cv
121.848 192.955 li
120.854 191.427 118.617 191.427 117.622 192.955 cv
f
103.946 146.219 mo
93.3397 162.514 li
114.552 162.514 li
103.946 146.219 li
cp
f
103.946 152.049 mo
88.0328 176.499 li
119.859 176.499 li
103.946 152.049 li
cp
f
103.946 160.813 mo
83.4291 192.336 li
124.463 192.336 li
103.946 160.813 li
cp
f
101.796 177.498 mo
86.604 200.839 li
85.3538 202.76 86.7322 205.302 89.0242 205.302 cv
119.408 205.302 li
121.7 205.302 123.079 202.76 121.829 200.839 cv
106.636 177.498 li
105.497 175.748 102.935 175.748 101.796 177.498 cv
cp
f
38.7927 220.975 mo
38.7927 223.028 40.4575 224.693 42.5111 224.693 cv
44.3805 224.693 li
46.4341 224.693 48.0989 226.358 48.0989 228.411 cv
48.0989 230.465 49.7637 232.13 51.8174 232.13 cv
114.939 232.13 li
116.992 232.13 118.657 230.465 118.657 228.411 cv
118.657 226.358 120.322 224.693 122.376 224.693 cv
127.77 224.693 li
129.823 224.693 131.488 223.028 131.488 220.975 cv
131.488 218.921 129.823 217.256 127.77 217.256 cv
42.5111 217.256 li
40.4575 217.256 38.7927 218.921 38.7927 220.975 cv
.439796 .0123293 .897368 0 cmyk
f
125.392 217.256 mo
48.7284 217.256 li
55.998 216.089 70.4364 215.294 87.0601 215.294 cv
93.1127 215.294 98.8757 215.4 104.108 215.59 cv
104.456 216.515 105.335 217.231 106.471 217.231 cv
125.233 217.231 li
125.286 217.239 125.339 217.248 125.392 217.256 cv
.236515 0 .488167 0 cmyk
f
125.233 217.231 mo
106.471 217.231 li
105.335 217.231 104.456 216.515 104.108 215.59 cv
113.144 215.919 120.598 216.501 125.233 217.231 cv
.826261 .412726 .96701 .415106 cmyk
f
87.0601 222.656 mo
63.1245 222.656 43.721 221.008 43.721 218.975 cv
43.721 218.354 45.5309 217.769 48.7284 217.256 cv
125.392 217.256 li
128.589 217.769 130.399 218.354 130.399 218.975 cv
130.399 221.008 110.996 222.656 87.0601 222.656 cv
.549371 .0998245 1 .00387579 cmyk
f
69.6493 194.655 mo
66.5243 184.981 62.2835 164.701 62.2835 164.701 cv
62.2835 164.701 58.0427 184.981 54.9177 194.655 cv
51.7927 204.33 43.721 219.357 43.721 219.357 cv
43.721 219.357 50.6493 217.905 62.2835 217.905 cv
73.9177 217.905 80.846 219.357 80.846 219.357 cv
80.846 219.357 72.7743 204.33 69.6493 194.655 cv
cp
0 .678584 .390753 .000183108 cmyk
f
110.658 164.701 mo
110.658 164.701 107.168 166.155 89.0427 166.155 cv
70.9177 166.155 62.2835 164.701 62.2835 164.701 cv
62.2835 164.701 65.0427 180.53 69.6493 194.655 cv
72.8015 204.321 80.846 219.357 80.846 219.357 cv
80.846 219.357 91.0427 218.03 104.418 218.03 cv
117.793 218.03 129.221 219.357 129.221 219.357 cv
129.221 219.357 121.332 204.269 118.024 194.655 cv
113.293 180.905 110.658 164.701 110.658 164.701 cv
cp
.174929 .764431 .591302 .0590524 cmyk
f
56.1352 218.045 mo
58.0028 217.959 60.055 217.905 62.2835 217.905 cv
64.512 217.905 66.5642 217.959 68.4317 218.045 cv
62.2835 189.989 li
56.1352 218.045 li
cp
.674556 .854917 .322209 .251621 cmyk
f
43.7207 219.856 mo
43.481 219.856 43.2695 219.684 43.228 219.44 cv
42.0493 212.489 li
42.0034 212.217 42.1865 211.958 42.459 211.912 cv
42.7305 211.865 42.9893 212.05 43.0356 212.321 cv
44.2144 219.272 li
44.2603 219.545 44.0771 219.804 43.8047 219.85 cv
43.7207 219.856 li
cp
.346685 .45658 .539391 .294163 cmyk
f
80.8467 219.856 mo
80.7627 219.85 li
80.4902 219.804 80.3071 219.545 80.353 219.272 cv
81.5313 212.321 li
81.5776 212.05 81.8359 211.867 82.1079 211.912 cv
82.3804 211.958 82.5635 212.217 82.5176 212.489 cv
81.3394 219.44 li
81.2979 219.684 81.0864 219.856 80.8467 219.856 cv
cp
f
129.222 219.856 mo
129.138 219.85 li
128.865 219.804 128.682 219.545 128.728 219.272 cv
129.906 212.321 li
129.953 212.05 130.211 211.867 130.483 211.912 cv
130.755 211.958 130.938 212.217 130.893 212.489 cv
129.714 219.44 li
129.673 219.684 129.461 219.856 129.222 219.856 cv
cp
f
88.0328 170.736 mo
100.113 170.219 110.658 164.701 110.658 164.701 cv
110.658 164.701 107.168 166.155 89.0427 166.155 cv
70.9177 166.155 62.2835 164.701 62.2835 164.701 cv
62.2835 164.701 75.9525 171.254 88.0328 170.736 cv
cp
.0976883 .722835 .528801 .0115969 cmyk
f
85.5734 183.81 mo
85.5734 183.81 85.8318 187.177 86.7381 190.744 cv
87.4966 193.728 89.1965 196.219 89.1965 196.219 cv
108.863 196.219 li
108.863 196.219 106.904 193.473 105.606 189.989 cv
104.216 186.26 103.865 183.768 103.865 183.768 cv
85.5734 183.81 li
cp
.674556 .854917 .322209 .251621 cmyk
f
85.5734 183.792 mo
85.5734 183.792 87.395 183.137 87.9484 182.038 cv
88.5113 180.922 87.5734 179.7 87.5734 179.7 cv
87.5734 179.7 91.0341 180.471 94.8234 180.65 cv
100.446 180.915 105.573 179.334 105.573 179.334 cv
105.573 179.334 106.287 180.983 105.698 181.892 cv
105.115 182.794 103.865 183.768 103.865 183.768 cv
103.865 183.768 100.828 184.582 94.1984 184.523 cv
89.8299 184.484 85.5734 183.792 85.5734 183.792 cv
cp
.244266 .785702 .622126 .173526 cmyk
f
258.11 45.6452 mo
258.11 41.5007 254.75 38.1409 250.605 38.1409 cv
246.461 38.1409 243.101 41.5007 243.101 45.6452 cv
243.101 49.7898 246.461 53.1496 250.605 53.1496 cv
254.75 53.1496 258.11 49.7898 258.11 45.6452 cv
cp
.0303655 .0369573 .911437 0 cmyk
f
246.189 54.541 mo
246.535 54.541 246.869 54.5882 247.193 54.6622 cv
247.552 50.4648 251.067 47.1685 255.357 47.1685 cv
258.692 47.1685 261.555 49.1621 262.837 52.0193 cv
263.648 51.6195 264.549 51.3746 265.515 51.3746 cv
268.882 51.3746 271.611 54.1041 271.611 57.4711 cv
271.611 57.9094 271.561 58.335 271.473 58.7471 cv
275.471 58.7471 li
276.803 58.7471 277.882 59.8262 277.882 61.1573 cv
277.882 62.4884 276.803 63.5676 275.471 63.5676 cv
275.471 63.5676 247.767 63.5676 246.189 63.5676 cv
243.696 63.5676 241.676 61.5468 241.676 59.0543 cv
241.676 56.5616 243.696 54.541 246.189 54.541 cv
.437537 0 .0526436 0 cmyk
f
194.962 103.215 mo
194.962 103.215 li
194.962 105.227 193.331 106.859 191.318 106.859 cv
181.117 106.859 li
179.105 106.859 177.474 108.49 177.474 110.502 cv
177.474 112.515 179.105 114.146 181.117 114.146 cv
269.791 114.146 li
271.803 114.146 273.435 112.515 273.435 110.502 cv
273.435 108.49 275.066 106.859 277.078 106.859 cv
287.28 106.859 li
289.292 106.859 290.923 105.227 290.923 103.215 cv
290.923 103.215 li
290.923 101.203 289.292 99.5713 287.28 99.5713 cv
198.606 99.5713 li
196.594 99.5713 194.962 101.203 194.962 103.215 cv
.439796 .0123293 .897368 0 cmyk
f
235.969 108.923 mo
217.06 108.923 201.731 107.697 201.731 106.184 cv
215.141 106.184 li
241.96 106.184 li
255.37 106.184 li
270.207 106.184 li
270.207 107.697 254.878 108.923 235.969 108.923 cv
.549371 .0998245 1 .00387579 cmyk
f
254.119 64.322 mo
242.551 64.322 li
233.666 64.322 226.464 71.5247 226.464 80.4097 cv
226.464 106.184 li
270.207 106.184 li
270.207 80.4097 li
270.207 71.5247 263.004 64.322 254.119 64.322 cv
.768551 .40058 .352636 .194095 cmyk
f
261.941 66.3487 mo
244.811 57.1081 li
245.781 68.214 li
261.941 66.3487 li
f
235.643 54.8522 mo
221.458 54.8522 li
210.564 54.8522 201.731 63.6842 201.731 74.5791 cv
201.731 106.184 li
255.37 106.184 li
255.37 74.5791 li
255.37 63.6842 246.538 54.8522 235.643 54.8522 cv
.239933 .0764477 .15024 0 cmyk
f
250.961 75.5791 mo
250.408 75.5791 249.961 75.1313 249.961 74.5791 cv
249.961 71.7114 249.112 68.9424 247.507 66.5713 cv
247.197 66.1142 247.317 65.4922 247.774 65.1826 cv
247.946 65.0668 248.141 65.0111 248.334 65.0111 cv
248.654 65.0111 248.969 65.1644 249.163 65.4501 cv
250.993 68.1534 251.961 71.31 251.961 74.5791 cv
251.961 75.1313 251.514 75.5791 250.961 75.5791 cv
.144533 .0356451 .0917067 0 cmyk
f
206.14 98.6626 mo
205.587 98.6626 205.14 98.2149 205.14 97.6625 cv
205.14 74.5791 li
205.14 65.581 212.46 58.2608 221.458 58.2608 cv
235.643 58.2608 li
239.622 58.2608 243.458 59.7153 246.443 62.3559 cv
246.857 62.7217 246.897 63.354 246.53 63.7676 cv
246.333 63.9913 246.057 64.1054 245.781 64.1054 cv
245.545 64.1054 245.308 64.0225 245.119 63.854 cv
242.499 61.5366 239.134 60.2607 235.643 60.2607 cv
221.458 60.2607 li
213.563 60.2607 207.14 66.684 207.14 74.5791 cv
207.14 97.6625 li
207.14 98.2149 206.692 98.6626 206.14 98.6626 cv
f
206.14 102.776 mo
205.587 102.776 205.14 102.328 205.14 101.776 cv
205.14 100.831 li
205.14 100.278 205.587 99.8305 206.14 99.8305 cv
206.692 99.8305 207.14 100.278 207.14 100.831 cv
207.14 101.776 li
207.14 102.328 206.692 102.776 206.14 102.776 cv
f
232.097 69.9757 mo
225.004 69.9757 li
219.557 69.9757 215.141 74.3917 215.141 79.8391 cv
215.141 106.184 li
241.96 106.184 li
241.96 79.8391 li
241.96 74.3917 237.544 69.9757 232.097 69.9757 cv
.768551 .40058 .352636 .194095 cmyk
f
230.847 102.776 mo
228.551 102.776 li
227.998 102.776 227.551 102.328 227.551 101.776 cv
227.551 101.224 227.998 100.776 228.551 100.776 cv
230.847 100.776 li
231.399 100.776 231.847 101.224 231.847 101.776 cv
231.847 102.328 231.399 102.776 230.847 102.776 cv
.508568 .206394 .24683 .0274357 cmyk
f
235.403 102.776 mo
234.198 102.776 li
233.646 102.776 233.198 102.328 233.198 101.776 cv
233.198 101.224 233.646 100.776 234.198 100.776 cv
235.403 100.776 li
236.036 100.776 236.552 100.261 236.552 99.6274 cv
236.552 81.9874 li
236.552 81.435 236.999 80.9873 237.552 80.9873 cv
238.105 80.9873 238.552 81.435 238.552 81.9874 cv
238.552 99.6274 li
238.552 101.363 237.14 102.776 235.403 102.776 cv
f
266.392 109.827 mo
266.176 109.827 265.978 109.687 265.912 109.47 cv
254.891 72.5479 li
254.813 72.2832 254.963 72.0049 255.228 71.9258 cv
255.49 71.8472 255.771 71.9976 255.85 72.2617 cv
266.871 109.184 li
266.949 109.449 266.799 109.727 266.534 109.806 cv
266.392 109.827 li
cp
.437537 0 .0526436 0 cmyk
f
190.709 109.827 mo
190.566 109.806 li
190.302 109.727 190.151 109.449 190.23 109.184 cv
201.252 72.2617 li
201.331 71.9971 201.609 71.8452 201.874 71.9258 cv
202.139 72.0049 202.289 72.2832 202.21 72.5479 cv
191.188 109.47 li
191.124 109.687 190.925 109.827 190.709 109.827 cv
cp
f
278.15 102.276 mo
277.94 102.276 277.744 102.143 277.676 101.932 cv
270.027 78.6177 li
269.94 78.3555 270.084 78.0728 270.346 77.9868 cv
270.607 77.9004 270.892 78.0435 270.977 78.3062 cv
278.625 101.62 li
278.712 101.882 278.568 102.165 278.307 102.251 cv
278.15 102.276 li
cp
f
190.709 109.827 mo
190.342 109.827 190.042 110.126 190.042 110.494 cv
190.042 110.862 190.342 111.161 190.709 111.161 cv
191.077 111.161 191.376 110.862 191.376 110.494 cv
191.376 110.126 191.077 109.827 190.709 109.827 cv
cp
190.709 112.161 mo
189.791 112.161 189.042 111.413 189.042 110.494 cv
189.042 109.575 189.791 108.827 190.709 108.827 cv
191.628 108.827 192.376 109.575 192.376 110.494 cv
192.376 111.413 191.628 112.161 190.709 112.161 cv
cp
f
266.392 109.827 mo
266.023 109.827 265.725 110.126 265.725 110.494 cv
265.725 110.862 266.023 111.161 266.392 111.161 cv
266.76 111.161 267.059 110.862 267.059 110.494 cv
267.059 110.126 266.76 109.827 266.392 109.827 cv
cp
266.392 112.161 mo
265.473 112.161 264.725 111.413 264.725 110.494 cv
264.725 109.575 265.473 108.827 266.392 108.827 cv
267.311 108.827 268.059 109.575 268.059 110.494 cv
268.059 111.413 267.311 112.161 266.392 112.161 cv
cp
f
278.15 102.276 mo
277.782 102.276 277.483 102.575 277.483 102.943 cv
277.483 103.311 277.782 103.61 278.15 103.61 cv
278.519 103.61 278.817 103.311 278.817 102.943 cv
278.817 102.575 278.519 102.276 278.15 102.276 cv
cp
278.15 104.61 mo
277.231 104.61 276.483 103.862 276.483 102.943 cv
276.483 102.024 277.231 101.276 278.15 101.276 cv
279.069 101.276 279.817 102.024 279.817 102.943 cv
279.817 103.862 279.069 104.61 278.15 104.61 cv
cp
f
255.37 106.184 mo
259.779 106.184 li
255.37 74.3104 li
255.37 106.184 li
cp
.786587 .432166 .405859 .273503 cmyk
f
241.853 78.4617 mo
245.781 106.184 li
241.96 106.184 li
241.853 78.4617 li
cp
.343847 .204227 .250431 .0287175 cmyk
f
318.988 59.1846 mo
371.812 59.1846 li
371.812 51.8969 li
318.988 51.8969 li
318.988 59.1846 li
cp
.332067 0 .152132 0 cmyk
f
368.169 55.5407 mo
368.169 53.5282 369.8 51.8969 371.812 51.8969 cv
373.825 51.8969 375.456 53.5282 375.456 55.5407 cv
375.456 57.5532 373.825 59.1846 371.812 59.1846 cv
369.8 59.1846 368.169 57.5532 368.169 55.5407 cv
cp
f
346.75 62.8284 mo
346.75 60.816 345.118 59.1846 343.106 59.1846 cv
371.812 59.1846 li
369.8 59.1846 368.169 60.816 368.169 62.8284 cv
368.169 64.841 369.8 66.4724 371.812 66.4724 cv
343.106 66.4724 li
345.118 66.4724 346.75 64.841 346.75 62.8284 cv
cp
f
328.679 73.7601 mo
387.74 73.7601 li
387.74 66.4724 li
328.679 66.4724 li
328.679 73.7601 li
cp
f
384.096 70.1162 mo
384.096 68.1039 385.727 66.4724 387.74 66.4724 cv
389.752 66.4724 391.383 68.1039 391.383 70.1162 cv
391.383 72.1287 389.752 73.7601 387.74 73.7601 cv
385.727 73.7601 384.096 72.1287 384.096 70.1162 cv
cp
f
325.036 70.1162 mo
325.036 68.1039 326.667 66.4724 328.679 66.4724 cv
330.692 66.4724 332.323 68.1039 332.323 70.1162 cv
332.323 72.1287 330.692 73.7601 328.679 73.7601 cv
326.667 73.7601 325.036 72.1287 325.036 70.1162 cv
cp
f
343.106 88.3357 mo
414.698 88.3357 li
414.698 81.048 li
343.106 81.048 li
343.106 88.3357 li
cp
f
411.054 84.6918 mo
411.054 82.6794 412.685 81.048 414.698 81.048 cv
416.71 81.048 418.342 82.6794 418.342 84.6918 cv
418.342 86.7042 416.71 88.3357 414.698 88.3357 cv
412.685 88.3357 411.054 86.7042 411.054 84.6918 cv
cp
f
339.462 84.6918 mo
339.462 82.6794 341.093 81.048 343.106 81.048 cv
345.118 81.048 346.75 82.6794 346.75 84.6918 cv
346.75 86.7042 345.118 88.3357 343.106 88.3357 cv
341.093 88.3357 339.462 86.7042 339.462 84.6918 cv
cp
f
327.333 84.6918 mo
327.333 82.6794 328.964 81.048 330.977 81.048 cv
332.989 81.048 334.621 82.6794 334.621 84.6918 cv
334.621 86.7042 332.989 88.3357 330.977 88.3357 cv
328.964 88.3357 327.333 86.7042 327.333 84.6918 cv
cp
f
379.04 77.4039 mo
379.04 75.3915 377.408 73.7601 375.396 73.7601 cv
387.74 73.7601 li
385.727 73.7601 384.096 75.3915 384.096 77.4041 cv
384.096 79.4165 385.727 81.048 387.74 81.048 cv
375.396 81.048 li
377.408 81.048 379.04 79.4165 379.04 77.4039 cv
cp
f
346.75 77.4041 mo
346.75 75.3915 345.118 73.7601 343.106 73.7601 cv
375.396 73.7601 li
373.383 73.7601 371.752 75.3915 371.752 77.4039 cv
371.752 79.4165 373.383 81.048 375.396 81.048 cv
343.106 81.048 li
345.118 81.048 346.75 79.4165 346.75 77.4041 cv
cp
f
346.75 91.9796 mo
346.75 89.9671 345.118 88.3356 343.106 88.3356 cv
379.04 88.3356 li
377.027 88.3356 375.396 89.9671 375.396 91.9796 cv
375.396 93.9921 377.027 95.6235 379.04 95.6235 cv
343.106 95.6235 li
345.118 95.6235 346.75 93.9921 346.75 91.9796 cv
cp
f
330.977 102.911 mo
379.039 102.911 li
379.039 95.6234 li
330.977 95.6234 li
330.977 102.911 li
f
375.396 99.2674 mo
375.396 97.255 377.027 95.6234 379.039 95.6234 cv
381.052 95.6234 382.683 97.255 382.683 99.2674 cv
382.683 101.28 381.052 102.911 379.039 102.911 cv
377.027 102.911 375.396 101.28 375.396 99.2674 cv
f
327.333 99.2674 mo
327.333 97.255 328.964 95.6234 330.977 95.6234 cv
332.989 95.6234 334.621 97.255 334.621 99.2674 cv
334.621 101.28 332.989 102.911 330.977 102.911 cv
328.964 102.911 327.333 101.28 327.333 99.2674 cv
f
315.344 55.5407 mo
315.344 53.5282 316.976 51.8969 318.988 51.8969 cv
321.001 51.8969 322.632 53.5282 322.632 55.5407 cv
322.632 57.5532 321.001 59.1846 318.988 59.1846 cv
316.976 59.1846 315.344 57.5532 315.344 55.5407 cv
cp
f
369.59 116.273 mo
396.9 116.273 419.04 110.263 419.04 102.848 cv
320.139 102.848 li
320.139 110.263 342.279 116.273 369.59 116.273 cv
.439796 .0123293 .897368 0 cmyk
f
358.769 108.755 mo
335.17 108.755 326.86 104.479 326.86 102.848 cv
412.319 102.848 li
405.23 104.838 382.368 108.755 358.769 108.755 cv
.549371 .0998245 1 .00387579 cmyk
f
359.975 44.8534 mo
359.975 102.848 li
326.86 102.848 li
359.975 44.8534 li
cp
.437537 0 .0526436 0 cmyk
f
359.975 44.8534 mo
359.975 102.848 li
393.089 102.848 li
359.975 44.8534 li
cp
f
384.497 62.9321 mo
384.497 62.9321 381.237 62.3604 374.895 57.9202 cv
368.566 53.49 359.975 44.8534 359.975 44.8534 cv
393.089 102.848 li
411.793 102.848 li
411.793 102.848 402.128 91.8653 394.968 80.1158 cv
387.809 68.3662 384.497 62.9321 384.497 62.9321 cv
cp
.592309 .0359197 .12195 0 cmyk
f
376.532 93.8538 mo
380.57 102.848 li
366.144 102.848 li
376.532 93.8538 li
cp
f
359.975 60.7841 mo
366.144 102.848 li
366.144 102.848 370.53 102.507 373.623 99.2236 cv
376.532 96.136 376.532 93.8538 376.532 93.8538 cv
376.532 93.8538 373.019 95.6661 369.26 87.3427 cv
365.501 79.0194 359.975 60.7841 359.975 60.7841 cv
cp
.262638 0 .0288701 0 cmyk
f
411.793 102.848 mo
411.793 102.848 402.128 91.8653 394.968 80.1157 cv
389.757 71.563 386.593 66.3717 385.253 64.1718 cv
388.661 69.8059 401.428 92.2142 399.533 95.7332 cv
397.653 99.2236 392.965 98.3645 390.545 98.3931 cv
393.089 102.848 li
411.793 102.848 li
cp
.662409 .111269 .200107 .000946059 cmyk
f
359.975 60.7841 mo
353.806 102.848 li
359.975 102.848 li
360.613 102.848 li
359.789 101.313 358.969 99.0534 358.856 96.0017 cv
358.386 83.2929 359.975 60.7841 359.975 60.7841 cv
cp
.432441 .573571 .659785 .553735 cmyk
f
359.975 60.7841 mo
359.975 60.7841 358.386 83.2929 358.856 96.0017 cv
358.969 99.0534 359.789 101.313 360.613 102.848 cv
366.144 102.848 li
359.975 60.7841 li
cp
.528069 .619593 .679316 .718502 cmyk
f
326.86 103.348 mo
326.636 103.348 326.433 103.197 326.375 102.97 cv
324.271 94.5796 li
324.205 94.3115 324.367 94.04 324.635 93.9731 cv
324.902 93.9028 325.174 94.0688 325.242 94.3364 cv
327.346 102.727 li
327.412 102.995 327.25 103.266 326.982 103.333 cv
326.86 103.348 li
cp
f
393.089 103.348 mo
392.967 103.333 li
392.699 103.266 392.537 102.995 392.604 102.727 cv
394.707 94.3364 li
394.775 94.0688 395.042 93.9038 395.314 93.9731 cv
395.582 94.04 395.744 94.3115 395.678 94.5796 cv
393.574 102.97 li
393.517 103.197 393.313 103.348 393.089 103.348 cv
cp
f
411.793 103.348 mo
411.671 103.333 li
411.403 103.266 411.241 102.995 411.308 102.727 cv
412.359 98.5317 li
412.427 98.2642 412.695 98.0991 412.967 98.1685 cv
413.234 98.2354 413.396 98.5068 413.33 98.7749 cv
412.278 102.97 li
412.221 103.197 412.018 103.348 411.793 103.348 cv
cp
f
280.567 208.476 mo
280.412 208.491 li
280.415 208.399 280.426 208.309 280.426 208.216 cv
280.426 203.343 276.475 199.392 271.602 199.392 cv
268.371 199.392 265.554 201.133 264.016 203.724 cv
263.387 203.531 262.719 203.426 262.026 203.426 cv
258.267 203.426 255.219 206.474 255.219 210.234 cv
255.219 213.993 258.267 217.041 262.026 217.041 cv
263.725 217.041 279.095 217.041 280.567 217.041 cv
282.933 217.041 284.85 215.123 284.85 212.758 cv
284.85 210.393 282.933 208.476 280.567 208.476 cv
.350011 0 .141237 0 cmyk
f
227.803 174.679 mo
227.808 174.556 227.821 174.435 227.821 174.311 cv
227.821 169.437 223.87 165.486 218.997 165.486 cv
216.058 165.486 213.462 166.928 211.859 169.137 cv
211.135 168.893 210.363 168.754 209.557 168.754 cv
206.085 168.754 203.188 171.216 202.515 174.488 cv
200.147 174.513 198.233 176.436 198.233 178.809 cv
198.233 181.199 200.17 183.135 202.559 183.135 cv
203.725 183.135 225.625 183.135 226.87 183.135 cv
229.235 183.135 231.152 181.218 231.152 178.853 cv
231.152 176.809 229.718 175.106 227.803 174.679 cv
cp
f
281.128 223.093 mo
281.128 219.612 278.306 216.79 274.825 216.79 cv
242.567 216.059 li
190.652 216.79 li
187.17 216.79 184.348 219.612 184.348 223.093 cv
184.348 226.035 186.366 228.499 189.092 229.194 cv
189.091 229.198 li
189.12 229.201 li
189.612 229.324 190.123 229.396 190.652 229.396 cv
190.716 229.393 li
197.209 230.16 222.009 232.94 240.218 232.94 cv
258.531 232.94 272.507 230.063 275.901 229.298 cv
278.869 228.786 281.128 226.207 281.128 223.093 cv
.439796 .0123293 .897368 0 cmyk
f
238.063 224.5 mo
217.339 224.5 190.652 218.532 190.652 216.79 cv
259.763 216.79 li
266.366 217.359 270.441 218.135 270.441 218.993 cv
270.441 220.735 258.787 224.5 238.063 224.5 cv
.549371 .0998245 1 .00387579 cmyk
f
235.5 218.993 mo
237.647 218.823 240.005 218.718 242.567 218.718 cv
245.128 218.718 247.487 218.823 249.633 218.993 cv
242.567 163.77 li
235.5 218.993 li
cp
.851224 .555749 .524498 .553521 cmyk
f
242.567 163.77 mo
242.567 163.77 249.198 205.547 244.385 214.856 cv
242.921 217.688 238.923 217.438 235.703 217.407 cv
235.5 218.993 li
237.647 218.823 240.005 218.718 242.567 218.718 cv
245.128 218.718 247.487 218.823 249.633 218.993 cv
242.567 163.77 li
cp
.837858 .523186 .482063 .449409 cmyk
f
228.006 172.79 mo
221.397 176.429 216.8 176.092 216.8 176.092 cv
216.8 176.092 211.813 189.647 204.075 195.005 cv
196.336 200.362 188.449 200.66 188.449 200.66 cv
196.111 217.041 li
235.5 218.993 li
242.567 163.77 li
242.567 163.77 234.615 169.15 228.006 172.79 cv
cp
.177676 .679469 .98822 .0637522 cmyk
f
242.567 163.77 mo
242.567 163.77 236.148 181.219 226.186 188.115 cv
216.225 195.011 206.072 195.394 206.072 195.394 cv
214.693 218.993 li
235.5 218.993 li
242.567 163.77 li
cp
.0552682 .590356 .928801 .00326543 cmyk
f
242.567 163.77 mo
242.567 163.77 248.986 181.219 258.947 188.115 cv
268.908 195.011 279.061 195.394 279.061 195.394 cv
270.441 218.993 li
249.633 218.993 li
242.567 163.77 li
cp
f
188.449 200.66 mo
196.111 217.041 li
214.693 218.993 li
206.072 195.394 li
206.072 195.394 201.858 198.22 197.117 199.369 cv
193.271 200.301 188.449 200.66 188.449 200.66 cv
cp
.252903 .71017 .984833 .185153 cmyk
f
262.488 210.719 mo
264.822 218.993 li
249.633 218.993 li
262.488 210.719 li
cp
.177676 .679469 .98822 .0637522 cmyk
f
242.567 163.77 mo
242.567 163.77 248.508 194.942 255.651 206.666 cv
259.039 212.228 262.488 210.719 262.488 210.719 cv
262.488 210.719 261.119 215.37 257.818 217.041 cv
253.795 219.076 249.633 218.993 249.633 218.993 cv
242.567 163.77 li
cp
0 .453651 .619409 0 cmyk
f
350.036 181.605 mo
349.353 181.605 348.8 181.051 348.8 180.368 cv
348.8 165.276 li
348.8 164.593 349.353 164.04 350.036 164.04 cv
350.719 164.04 351.273 164.593 351.273 165.276 cv
351.273 180.368 li
351.273 181.051 350.719 181.605 350.036 181.605 cv
.346685 .45658 .539391 .294163 cmyk
f
358.022 164.552 mo
358.022 160.383 354.642 157.004 350.473 157.004 cv
346.304 157.004 342.925 160.383 342.925 164.552 cv
342.925 168.721 346.304 172.101 350.473 172.101 cv
354.642 172.101 358.022 168.721 358.022 164.552 cv
.753628 0 .777646 0 cmyk
f
349.26 160.075 mo
348.981 160.075 348.727 159.884 348.66 159.601 cv
348.58 159.268 348.785 158.935 349.117 158.855 cv
349.558 158.75 350.015 158.697 350.473 158.697 cv
350.815 158.697 351.092 158.973 351.092 159.315 cv
351.092 159.657 350.815 159.933 350.473 159.933 cv
350.111 159.933 349.752 159.975 349.404 160.058 cv
349.26 160.075 li
.572259 0 .519554 0 cmyk
f
350.473 170.408 mo
347.71 170.408 345.388 168.484 344.775 165.905 cv
344.794 165.645 344.803 165.382 344.803 165.118 cv
344.803 164.597 344.767 164.085 344.698 163.584 cv
344.964 161.993 345.878 160.571 347.255 159.662 cv
347.36 159.593 347.478 159.56 347.595 159.56 cv
347.796 159.56 347.993 159.658 348.112 159.838 cv
348.3 160.123 348.221 160.506 347.936 160.694 cv
346.632 161.555 345.854 162.997 345.854 164.552 cv
345.854 167.099 347.926 169.171 350.473 169.171 cv
350.815 169.171 351.092 169.448 351.092 169.79 cv
351.092 170.131 350.815 170.408 350.473 170.408 cv
f
333.707 189.75 mo
333.09 189.75 332.59 189.25 332.59 188.633 cv
332.59 165.118 li
332.59 164.501 333.09 164.001 333.707 164.001 cv
334.324 164.001 334.824 164.501 334.824 165.118 cv
334.824 188.633 li
334.824 189.25 334.324 189.75 333.707 189.75 cv
.346685 .45658 .539391 .294163 cmyk
f
344.803 165.118 mo
344.803 158.989 339.835 154.022 333.707 154.022 cv
327.579 154.022 322.611 158.989 322.611 165.118 cv
322.611 171.246 327.579 176.214 333.707 176.214 cv
339.835 176.214 344.803 171.246 344.803 165.118 cv
.682032 0 .710353 0 cmyk
f
330.724 174.178 mo
330.539 174.146 li
326.711 172.799 324.139 169.171 324.139 165.118 cv
324.139 159.842 328.431 155.55 333.707 155.55 cv
334.015 155.55 334.265 155.8 334.265 156.109 cv
334.265 156.417 334.015 156.667 333.707 156.667 cv
329.047 156.667 325.256 160.458 325.256 165.118 cv
325.256 168.698 327.528 171.903 330.91 173.092 cv
331.201 173.195 331.354 173.513 331.251 173.805 cv
331.171 174.034 330.955 174.178 330.724 174.178 cv
.558465 0 .4878 0 cmyk
f
333.707 174.685 mo
333.199 174.685 332.69 174.645 332.195 174.565 cv
331.89 174.517 331.683 174.23 331.732 173.926 cv
331.776 173.652 332.013 173.455 332.281 173.455 cv
332.311 173.455 332.341 173.458 332.371 173.463 cv
332.808 173.532 333.258 173.568 333.707 173.568 cv
334.015 173.568 334.265 173.818 334.265 174.126 cv
334.265 174.435 334.015 174.685 333.707 174.685 cv
f
333.707 181.723 mo
333.497 181.683 li
327.229 179.148 li
326.943 179.033 326.805 178.708 326.92 178.421 cv
327.036 178.136 327.361 177.997 327.647 178.113 cv
333.916 180.647 li
334.202 180.763 334.34 181.088 334.225 181.374 cv
334.137 181.591 333.927 181.723 333.707 181.723 cv
cp
.346685 .45658 .539391 .294163 cmyk
f
330.204 178.63 mo
330.204 177.103 328.965 175.865 327.438 175.865 cv
325.911 175.865 324.673 177.103 324.673 178.63 cv
324.673 180.158 325.911 181.396 327.438 181.396 cv
328.965 181.396 330.204 180.158 330.204 178.63 cv
cp
.682032 0 .710353 0 cmyk
f
331.484 160.638 mo
331.484 159.931 330.911 159.358 330.204 159.358 cv
329.496 159.358 328.923 159.931 328.923 160.638 cv
328.923 161.345 329.496 161.919 330.204 161.919 cv
330.911 161.919 331.484 161.345 331.484 160.638 cv
cp
.753628 0 .777646 0 cmyk
f
339.225 161.919 mo
339.225 161.212 338.652 160.638 337.944 160.638 cv
337.237 160.638 336.664 161.212 336.664 161.919 cv
336.664 162.626 337.237 163.199 337.944 163.199 cv
338.652 163.199 339.225 162.626 339.225 161.919 cv
cp
f
331.853 169.304 mo
331.853 168.597 331.28 168.024 330.572 168.024 cv
329.865 168.024 329.292 168.597 329.292 169.304 cv
329.292 170.012 329.865 170.585 330.572 170.585 cv
331.28 170.585 331.853 170.012 331.853 169.304 cv
cp
f
346.944 206.779 mo
327.914 208.382 319.293 213.462 319.293 218.85 cv
319.293 221.369 333.928 223.64 344.108 224.239 cv
353.879 224.814 362.064 223.992 362.259 225.232 cv
362.443 226.405 355.141 227.32 355.169 228.918 cv
355.223 232.049 407.919 234.876 407.919 221.689 cv
407.919 216.79 399.695 219.005 399.695 215.589 cv
399.695 211.335 411.2 214.029 411.2 210.342 cv
411.2 206.779 403.947 206.708 395.441 204.528 cv
382.367 201.179 376.014 204.331 346.944 206.779 cv
.439796 .0123293 .897368 0 cmyk
f
398.276 205.197 mo
397.363 204.998 396.424 204.78 395.471 204.536 cv
396.649 204.575 397.608 204.779 398.275 205.195 cv
398.275 205.196 398.276 205.196 398.276 205.197 cv
.236515 0 .488167 0 cmyk
f
359.266 222.257 mo
339.17 222.257 325.41 218.986 325.41 216.394 cv
325.41 213.803 341.701 211.701 361.796 211.701 cv
368.91 211.701 386.789 204.529 395.042 204.529 cv
395.188 204.529 395.33 204.531 395.471 204.536 cv
396.424 204.78 397.363 204.998 398.276 205.197 cv
403.451 208.433 398.504 215.875 396.008 218.223 cv
393.267 220.801 379.361 222.257 359.266 222.257 cv
.549371 .0998245 1 .00387579 cmyk
f
398.182 200.152 mo
396.103 183.12 383.435 173.747 359.266 173.747 cv
341.228 173.747 332.861 185.569 332.861 200.152 cv
332.861 207.008 li
386.969 207.008 li
393.122 216.394 li
393.122 216.394 394.165 213.253 395.157 211.055 cv
396.15 208.857 398.182 207.008 398.182 207.008 cv
398.182 207.008 398.39 201.853 398.182 200.152 cv
cp
.504997 .103304 .269108 .000701915 cmyk
f
359.266 173.747 mo
340.568 173.747 325.41 188.905 325.41 207.603 cv
325.41 216.394 li
325.41 216.394 332.442 217.611 339.996 218.287 cv
347.55 218.962 359.266 217.436 359.266 217.436 cv
359.266 217.436 371.051 219.657 378.897 218.759 cv
386.744 217.861 393.122 216.394 393.122 216.394 cv
393.122 207.603 li
393.122 188.905 377.964 173.747 359.266 173.747 cv
cp
.350011 0 .141237 0 cmyk
f
337.491 190.378 mo
342.816 177.573 359.266 173.747 359.266 173.747 cv
340.568 173.747 325.41 188.905 325.41 207.603 cv
325.41 216.394 li
325.41 216.394 332.396 216.066 332.861 210.346 cv
333.615 201.081 334.379 197.862 337.491 190.378 cv
cp
.431922 .100069 .23743 .00030518 cmyk
f
364.244 198.151 mo
364.224 197.177 363.594 193.831 362.788 189.916 cv
361.999 186.085 356.533 186.085 355.744 189.916 cv
354.938 193.831 354.308 197.177 354.287 198.151 cv
354.011 211.44 353.871 218 353.871 218 cv
364.393 218.223 li
364.393 218.223 364.531 211.948 364.244 198.151 cv
cp
.790829 .517449 .561303 .571771 cmyk
f
355.744 189.916 mo
355.744 189.916 li
355.745 189.913 li
355.744 189.916 li
cp
f
364.244 198.151 mo
364.244 198.151 365.946 207.722 367.222 211.267 cv
368.498 214.813 370.198 218.806 370.198 218.806 cv
364.393 218.223 li
364.244 198.151 li
cp
.253635 0 .0966812 0 cmyk
f
354.287 198.151 mo
354.287 198.151 351.837 206.021 351.128 209.991 cv
350.419 213.962 350.474 218.252 350.474 218.252 cv
353.871 218 li
354.287 198.151 li
cp
f
119.217 290.5 mo
119.217 282.268 112.543 275.594 104.311 275.594 cv
96.079 275.594 89.4056 282.268 89.4056 290.5 cv
89.4056 298.732 96.079 305.405 104.311 305.405 cv
112.543 305.405 119.217 298.732 119.217 290.5 cv
cp
0 .198733 .926574 0 cmyk
f
104.311 318.741 mo
103.759 318.741 103.311 318.294 103.311 317.741 cv
103.311 282.059 li
103.311 281.506 103.759 281.059 104.311 281.059 cv
104.863 281.059 105.311 281.506 105.311 282.059 cv
105.311 317.741 li
105.311 318.294 104.863 318.741 104.311 318.741 cv
cp
.305272 .409003 .492714 .203189 cmyk
f
104.311 296.271 mo
104.055 296.271 103.799 296.173 103.604 295.978 cv
97.6758 290.049 li
97.2852 289.658 97.2852 289.025 97.6758 288.635 cv
98.0664 288.244 98.6992 288.244 99.0898 288.635 cv
105.018 294.563 li
105.409 294.954 105.409 295.587 105.018 295.978 cv
104.823 296.173 104.567 296.271 104.311 296.271 cv
cp
f
141.914 298.551 mo
141.914 290.319 135.24 283.645 127.008 283.645 cv
118.776 283.645 112.103 290.319 112.103 298.551 cv
112.103 306.783 118.776 313.456 127.008 313.456 cv
135.24 313.456 141.914 306.783 141.914 298.551 cv
cp
0 .453651 .619409 0 cmyk
f
127.008 326.793 mo
126.456 326.793 126.008 326.346 126.008 325.793 cv
126.008 290.11 li
126.008 289.558 126.456 289.11 127.008 289.11 cv
127.561 289.11 128.008 289.558 128.008 290.11 cv
128.008 325.793 li
128.008 326.346 127.561 326.793 127.008 326.793 cv
cp
.305272 .409003 .492714 .203189 cmyk
f
127.008 304.321 mo
126.752 304.321 126.497 304.224 126.301 304.028 cv
120.373 298.101 li
119.982 297.71 119.982 297.077 120.373 296.687 cv
120.763 296.296 121.396 296.296 121.787 296.687 cv
127.715 302.614 li
128.106 303.005 128.106 303.638 127.715 304.028 cv
127.52 304.224 127.264 304.321 127.008 304.321 cv
cp
f
73.3709 301.783 mo
73.3709 293.551 66.6975 286.878 58.4654 286.878 cv
50.2333 286.878 43.5599 293.551 43.5599 301.783 cv
43.5599 310.015 50.2333 316.689 58.4654 316.689 cv
66.6975 316.689 73.3709 310.015 73.3709 301.783 cv
cp
0 .198733 .926574 0 cmyk
f
58.4653 330.025 mo
57.9131 330.025 57.4653 329.578 57.4653 329.025 cv
57.4653 293.343 li
57.4653 292.79 57.9131 292.343 58.4653 292.343 cv
59.0176 292.343 59.4653 292.79 59.4653 293.343 cv
59.4653 329.025 li
59.4653 329.578 59.0176 330.025 58.4653 330.025 cv
cp
.305272 .409003 .492714 .203189 cmyk
f
58.4653 307.554 mo
58.2095 307.554 57.9536 307.456 57.7583 307.261 cv
51.8301 301.333 li
51.4395 300.942 51.4395 300.31 51.8301 299.919 cv
52.2207 299.528 52.8535 299.528 53.2441 299.919 cv
59.1724 305.847 li
59.563 306.237 59.563 306.87 59.1724 307.261 cv
58.9771 307.456 58.7212 307.554 58.4653 307.554 cv
cp
f
80.0309 321.227 mo
80.0309 321.227 39.0662 325.185 37.747 338.675 cv
36.5292 351.128 55.8787 350.157 66.6383 349.195 cv
82.8649 347.744 84.2128 349.311 83.9202 352.361 cv
82.9968 361.992 136.69 351.834 138.668 335.211 cv
140.647 318.589 80.0309 321.227 80.0309 321.227 cv
.723079 .25745 .735622 .0901503 cmyk
f
106.645 348.608 mo
100.767 348.608 93.4517 346.463 80.7108 345.328 cv
60.188 343.5 50.2516 344.854 49.9185 343.203 cv
49.1969 339.626 93.1479 324.037 114.392 324.037 cv
119.784 324.037 123.717 325.043 125.08 327.504 cv
127.556 331.973 122.525 342.327 115.152 346.457 cv
112.333 348.036 109.681 348.608 106.645 348.608 cv
.772732 .314092 .804044 .182162 cmyk
f
81.778 279.484 mo
49.9185 343.203 li
49.9185 343.203 64.6594 340.037 75.8729 339.905 cv
87.0864 339.773 113.638 343.203 113.638 343.203 cv
81.778 279.484 li
cp
.439796 .0123293 .897368 0 cmyk
f
81.778 279.484 mo
125.08 327.504 li
125.08 327.504 118.88 328.691 116.901 332.649 cv
114.922 336.607 113.638 343.203 113.638 343.203 cv
81.778 279.484 li
cp
.526238 .11249 1 .00677501 cmyk
f
57.0083 339.586 mo
56.9077 339.586 56.8062 339.571 56.7056 339.539 cv
56.1792 339.372 55.8877 338.81 56.0547 338.283 cv
56.981 335.364 58.0566 332.45 59.2529 329.621 cv
60.3398 327.052 61.5503 324.497 62.8511 322.025 cv
63.1074 321.537 63.7114 321.349 64.2017 321.606 cv
64.6904 321.863 64.8779 322.469 64.6206 322.957 cv
63.3462 325.379 62.1597 327.883 61.0947 330.4 cv
59.9229 333.172 58.8687 336.028 57.9609 338.889 cv
57.8257 339.314 57.4321 339.586 57.0083 339.586 cv
cp
f
65.4507 320.192 mo
65.3247 320.192 65.1963 320.169 65.0728 320.118 cv
64.5615 319.909 64.3164 319.325 64.5254 318.813 cv
65.7124 315.912 li
65.9214 315.4 66.5059 315.155 67.0166 315.364 cv
67.5278 315.573 67.7729 316.157 67.564 316.668 cv
66.377 319.571 li
66.2183 319.958 65.8447 320.192 65.4507 320.192 cv
cp
f
78.7994 339.939 mo
78.4694 336.892 78.0021 332.181 77.7528 327.867 cv
77.3412 320.743 79.171 302.636 79.171 302.636 cv
79.171 302.636 77.3571 315.796 76.7634 324.899 cv
76.4401 329.856 76.6845 335.932 76.9227 339.903 cv
77.5139 339.906 78.1458 339.92 78.7994 339.939 cv
cp
.851224 .555749 .524498 .553521 cmyk
f
98.234 302.636 mo
103.429 315.631 li
103.429 315.631 104.385 314.147 105.292 313.586 cv
106.199 313.025 107.535 312.861 107.535 312.861 cv
98.234 302.636 li
cp
.567529 .233738 1 .0737316 cmyk
f
117.301 329.103 mo
116.996 329.103 116.695 328.964 116.499 328.701 cv
116.168 328.259 116.259 327.632 116.702 327.302 cv
116.955 327.112 117.185 326.955 117.382 326.828 cv
117.847 326.529 118.466 326.664 118.764 327.128 cv
119.063 327.593 118.929 328.211 118.464 328.51 cv
118.3 328.615 118.109 328.747 117.898 328.903 cv
117.719 329.038 117.509 329.103 117.301 329.103 cv
cp
f
112.878 337.475 mo
112.834 337.474 li
112.282 337.449 111.854 336.982 111.878 336.431 cv
111.94 335.022 112.29 332.888 113.605 330.713 cv
113.954 330.137 114.357 329.583 114.802 329.067 cv
115.163 328.649 115.794 328.604 116.212 328.965 cv
116.63 329.326 116.676 329.958 116.315 330.376 cv
115.943 330.807 115.607 331.269 115.316 331.748 cv
114.219 333.562 113.928 335.343 113.876 336.519 cv
113.853 337.055 113.41 337.475 112.878 337.475 cv
cp
f
231.152 269.478 mo
221.892 283.706 li
240.412 283.706 li
231.152 269.478 li
cp
.789395 .385565 .771481 .341405 cmyk
f
231.152 274.568 mo
217.258 295.915 li
245.045 295.915 li
231.152 274.568 li
cp
f
231.152 282.22 mo
213.239 309.742 li
249.065 309.742 li
231.152 282.22 li
cp
f
229.275 296.787 mo
216.011 317.167 li
214.919 318.844 216.123 321.063 218.124 321.063 cv
244.652 321.063 li
246.653 321.063 247.857 318.844 246.765 317.167 cv
233.501 296.787 li
232.507 295.259 230.269 295.259 229.275 296.787 cv
cp
f
247.887 283.75 mo
240.914 294.463 li
254.86 294.463 li
247.887 283.75 li
cp
f
247.887 287.583 mo
237.425 303.656 li
258.349 303.656 li
247.887 287.583 li
cp
f
247.887 293.344 mo
234.399 314.068 li
261.376 314.068 li
247.887 293.344 li
cp
f
246.474 304.313 mo
236.486 319.659 li
235.664 320.921 236.57 322.593 238.077 322.593 cv
258.053 322.593 li
259.559 322.593 260.466 320.921 259.644 319.659 cv
249.656 304.313 li
248.907 303.163 247.223 303.163 246.474 304.313 cv
cp
f
195.415 328.465 mo
194.719 325.873 196.257 323.209 198.849 322.514 cv
199.473 322.346 200.1 322.311 200.704 322.386 cv
200.738 321.258 201.49 320.235 202.636 319.928 cv
202.751 319.909 li
202.592 319.603 202.462 319.277 202.369 318.931 cv
201.674 316.339 203.211 313.674 205.803 312.979 cv
208.151 312.349 210.552 313.555 211.502 315.712 cv
211.882 315.409 212.327 315.176 212.826 315.042 cv
213.156 314.953 213.486 314.93 213.811 314.934 cv
213.937 314.868 li
214.067 314.808 214.2 314.758 214.333 314.709 cv
214.07 313.647 214.585 312.515 215.615 312.04 cv
215.802 311.976 li
215.253 310.076 216.153 308.01 218.004 307.157 cv
220.044 306.217 222.46 307.109 223.4 309.149 cv
223.447 309.25 223.485 309.352 223.523 309.454 cv
223.838 309.079 224.237 308.764 224.711 308.545 cv
226.439 307.749 228.486 308.504 229.282 310.232 cv
229.539 310.789 229.629 311.378 229.582 311.948 cv
229.637 311.943 li
230.153 311.943 230.644 312.052 231.089 312.247 cv
231.448 309.917 233.455 308.131 235.886 308.131 cv
238.569 308.131 240.744 310.306 240.744 312.99 cv
240.744 313.348 240.703 313.697 240.629 314.033 cv
240.744 314.022 li
241.931 314.022 242.923 314.815 243.248 315.896 cv
243.812 315.667 244.427 315.538 245.073 315.538 cv
247.756 315.538 249.931 317.714 249.931 320.397 cv
249.931 321.176 249.744 321.909 249.418 322.561 cv
249.793 322.745 250.124 322.997 250.411 323.294 cv
251.318 322.346 252.751 322.019 254.01 322.599 cv
255.449 323.262 256.149 324.869 255.722 326.346 cv
255.867 326.396 li
256.668 326.765 257.069 327.645 256.864 328.471 cv
256.967 328.509 257.07 328.548 257.172 328.595 cv
259.289 329.57 260.214 332.077 259.238 334.193 cv
258.557 335.672 257.129 336.566 255.609 336.641 cv
255.609 336.648 li
198.517 336.648 li
198.517 336.623 li
197.063 336.505 195.772 335.506 195.372 334.016 cv
195.009 332.663 195.482 331.286 196.471 330.422 cv
195.987 329.877 195.616 329.217 195.415 328.465 cv
cp
.670832 .277501 1 .125826 cmyk
f
222.331 329.84 mo
221.753 327.684 223.032 325.467 225.188 324.889 cv
225.707 324.75 226.229 324.72 226.732 324.783 cv
226.76 323.844 227.386 322.993 228.339 322.737 cv
228.435 322.722 li
228.303 322.467 228.194 322.196 228.117 321.908 cv
227.539 319.752 228.818 317.535 230.974 316.957 cv
232.927 316.433 234.925 317.435 235.715 319.23 cv
236.031 318.978 236.402 318.784 236.817 318.673 cv
237.092 318.599 237.366 318.579 237.636 318.583 cv
237.741 318.528 li
237.849 318.478 237.96 318.437 238.07 318.396 cv
237.851 317.513 238.28 316.57 239.137 316.175 cv
239.292 316.122 li
238.836 314.542 239.585 312.823 241.124 312.113 cv
242.822 311.331 244.832 312.073 245.614 313.77 cv
245.716 314.024 li
245.978 313.712 246.31 313.45 246.705 313.268 cv
248.142 312.605 249.845 313.234 250.507 314.671 cv
250.721 315.135 250.796 315.625 250.757 316.099 cv
250.802 316.094 li
251.232 316.094 251.641 316.186 252.011 316.348 cv
252.309 314.409 253.979 312.923 256.001 312.923 cv
258.234 312.923 260.043 314.733 260.043 316.965 cv
260.043 317.264 260.009 317.554 259.947 317.834 cv
260.043 317.824 li
261.031 317.824 261.856 318.484 262.126 319.383 cv
262.595 319.193 263.107 319.086 263.644 319.086 cv
265.877 319.086 267.687 320.896 267.687 323.128 cv
267.687 323.776 267.53 324.386 267.26 324.928 cv
267.571 325.081 267.847 325.291 268.085 325.538 cv
268.84 324.75 270.033 324.478 271.08 324.96 cv
272.277 325.512 272.859 326.848 272.504 328.077 cv
272.625 328.119 li
273.291 328.426 273.625 329.158 273.454 329.845 cv
273.71 329.948 li
275.472 330.76 276.241 332.845 275.43 334.606 cv
274.863 335.836 273.675 336.58 272.41 336.642 cv
272.41 336.648 li
224.912 336.648 li
224.912 336.627 li
223.703 336.529 222.628 335.698 222.296 334.459 cv
221.994 333.333 222.387 332.187 223.21 331.469 cv
222.808 331.015 222.499 330.466 222.331 329.84 cv
cp
f
279.061 345.326 mo
279.061 336.747 259.558 325.793 235.5 325.793 cv
211.442 325.793 191.939 336.747 191.939 345.326 cv
191.939 353.905 211.442 357.859 235.5 357.859 cv
259.558 357.859 279.061 353.905 279.061 345.326 cv
.439796 .0123293 .897368 0 cmyk
f
gsave
235.5 353.858 mo
216.761 353.858 201.571 350.612 201.571 346.608 cv
269.43 346.608 li
269.43 350.612 254.239 353.858 235.5 353.858 cv
clp
201.571 346.608 mo
269.43 346.608 li
269.43 353.858 li
201.571 353.858 li
cp
.549371 .0998245 1 .00387579 cmyk
f
grestore
249.137 323.232 mo
243.044 314.211 239.2 300.912 237.2 292.367 cv
236.779 290.571 234.221 290.571 233.801 292.367 cv
231.8 300.912 227.956 314.211 221.863 323.232 cv
213.764 335.223 201.571 346.608 201.571 346.608 cv
201.571 346.608 219.971 348.357 235.5 348.357 cv
251.03 348.357 269.43 346.608 269.43 346.608 cv
269.43 346.608 257.236 335.223 249.137 323.232 cv
cp
.454597 0 .199588 0 cmyk
f
235.5 311.732 mo
235.5 311.732 233.607 327.296 229.03 336.19 cv
225.363 343.315 223.113 343.045 223.113 343.045 cv
223.113 343.045 223.926 345.482 225.613 346.607 cv
227.301 347.732 229.637 348.26 229.637 348.26 cv
235.5 348.357 li
235.5 311.732 li
cp
.333501 0 .126528 0 cmyk
f
235.5 311.732 mo
235.5 311.732 237.393 327.296 241.971 336.19 cv
245.637 343.315 247.887 343.045 247.887 343.045 cv
247.887 343.045 247.075 345.482 245.387 346.607 cv
243.7 347.732 241.363 348.26 241.363 348.26 cv
235.5 348.357 li
235.5 311.732 li
cp
f
237.857 334.844 mo
236.193 327.216 235.5 311.732 235.5 311.732 cv
235.5 311.732 234.807 327.216 233.144 334.844 cv
231.744 341.263 229.637 348.26 229.637 348.26 cv
229.637 348.26 230.922 348.357 235.5 348.357 cv
240.078 348.357 241.363 348.26 241.363 348.26 cv
241.363 348.26 239.256 341.263 237.857 334.844 cv
cp
.790829 .517449 .561303 .571771 cmyk
f
368.942 285.406 mo
362.369 285.406 li
370.6 272.038 li
375.444 282.489 li
377.247 285.154 li
373.555 288.03 li
368.942 285.406 li
cp
.19678 .0418708 .085481 0 cmyk
f
334.989 310.022 mo
350.806 292.206 li
355.479 284.293 li
361.552 287.328 li
362.369 285.406 li
368.942 285.406 li
373.555 288.03 li
377.247 285.154 li
394.073 310.022 li
334.989 310.022 li
cp
.569848 .0849928 .188846 .000488289 cmyk
f
372.521 291.449 mo
368.465 290.386 li
368.465 295.042 li
363.031 303.949 li
371.641 298.067 li
372.521 291.449 li
cp
.61181 .184573 .233219 .0180667 cmyk
f
369.808 274.297 mo
368.942 285.406 li
364.648 285.406 li
369.808 274.297 li
cp
.27335 .102571 .148684 .000488289 cmyk
f
393.516 298.106 mo
386.995 301.713 li
388.971 296.947 li
394.241 291.965 li
398.99 297.189 li
395.949 300.229 li
393.516 298.106 li
cp
.19678 .0418708 .085481 0 cmyk
f
381.326 304.184 mo
387.71 295.983 li
388.971 296.947 li
386.995 301.713 li
393.516 298.106 li
395.949 300.229 li
398.99 297.189 li
405.24 308.012 li
405.756 308.906 405.111 310.022 404.079 310.022 cv
372.521 310.022 li
381.326 304.184 li
cp
.61181 .184573 .233219 .0180667 cmyk
f
400.953 307.983 mo
401.114 309.094 400.053 309.667 400.317 310.528 cv
400.891 312.396 406.843 312.812 407.528 311.27 cv
407.818 310.617 406.976 310.033 407.209 309.256 cv
407.422 308.55 408.392 308.153 409.627 307.929 cv
404.86 303.163 li
404.398 302.701 403.65 302.701 403.188 303.163 cv
399.889 306.463 li
400.457 306.889 400.868 307.388 400.953 307.983 cv
cp
.19678 .0418708 .085481 0 cmyk
f
418.296 316.599 mo
413.641 311.944 li
409.627 307.929 li
408.392 308.153 407.422 308.55 407.209 309.256 cv
406.976 310.033 407.818 310.617 407.528 311.27 cv
406.843 312.812 400.891 312.396 400.317 310.528 cv
400.053 309.667 401.114 309.094 400.953 307.983 cv
400.868 307.388 400.457 306.889 399.889 306.463 cv
393.268 313.083 li
392.807 313.544 392.059 313.544 391.597 313.083 cv
388.274 309.76 li
387.813 309.298 387.064 309.298 386.603 309.76 cv
377.684 318.679 li
371.821 324.953 li
371.115 325.709 371.651 326.942 372.685 326.942 cv
393.986 326.942 li
395.039 326.942 395.566 325.669 394.822 324.924 cv
394.568 324.67 li
393.823 323.925 394.35 322.652 395.403 322.652 cv
413.375 322.652 li
414.428 322.652 414.956 321.379 414.211 320.635 cv
413.466 319.89 413.994 318.617 415.047 318.617 cv
417.46 318.617 li
418.513 318.617 419.041 317.344 418.296 316.599 cv
cp
.768551 .40058 .352636 .194095 cmyk
f
409.488 338.207 mo
409.488 336.254 407.905 334.671 405.952 334.671 cv
329.458 334.671 li
327.505 334.671 325.922 336.254 325.922 338.207 cv
325.922 340.16 327.505 341.743 329.458 341.743 cv
343.651 341.743 li
345.604 341.743 347.187 343.326 347.187 345.279 cv
347.187 347.232 345.604 348.815 343.651 348.815 cv
342.534 348.815 li
340.581 348.815 338.998 350.398 338.998 352.351 cv
338.998 352.351 li
338.998 354.304 340.581 355.887 342.534 355.887 cv
397.559 355.887 li
399.511 355.887 401.094 354.304 401.094 352.351 cv
401.094 352.351 li
401.094 350.398 399.511 348.815 397.559 348.815 cv
392.23 348.815 li
390.278 348.815 388.695 347.232 388.695 345.279 cv
388.695 343.326 390.278 341.743 392.23 341.743 cv
405.952 341.743 li
407.905 341.743 409.488 340.16 409.488 338.207 cv
.439796 .0123293 .897368 0 cmyk
f
368.253 340.179 mo
347.363 340.179 330.428 339.036 330.428 337.626 cv
330.428 336.216 347.363 335.073 368.253 335.073 cv
389.143 335.073 406.078 336.216 406.078 337.626 cv
406.078 339.036 389.143 340.179 368.253 340.179 cv
.549371 .0998245 1 .00387579 cmyk
f
395.166 309.96 mo
391.204 305.998 385.245 295.96 385.245 295.96 cv
369.68 295.96 li
369.68 309.96 li
369.68 337.626 li
406.078 337.626 li
406.078 337.626 405.291 333.314 405.041 327.564 cv
404.791 321.814 406.078 318.227 406.078 318.227 cv
406.078 318.227 399.333 314.126 395.166 309.96 cv
cp
.0552682 .590356 .928801 .00326543 cmyk
f
385.245 295.96 mo
399.813 337.626 li
378.07 337.626 li
382.291 300.418 li
385.245 295.96 li
cp
.159091 .674525 .973907 .0466316 cmyk
f
385.245 295.96 mo
330.428 295.96 li
330.428 295.96 332.291 308.719 332.291 316.793 cv
332.291 325.376 330.428 337.626 330.428 337.626 cv
385.245 337.626 li
385.245 337.626 383.291 328.876 383.382 316.793 cv
383.443 308.72 385.245 295.96 385.245 295.96 cv
cp
0 .198733 .926574 0 cmyk
f
370.499 314.21 mo
378.666 337.626 li
366.791 337.626 li
367.416 317.879 li
370.499 314.21 li
cp
.0925612 .24155 .957549 .00866712 cmyk
f
347.666 311.543 mo
347.666 311.543 349.416 320.055 349.083 324.216 cv
348.749 328.376 347.666 337.626 347.666 337.626 cv
369.68 337.626 li
369.68 337.626 368.322 333.158 368.385 327.126 cv
368.418 323.909 368.738 319.036 369.353 316.283 cv
369.649 314.961 370.499 314.21 370.499 314.21 cv
370.499 314.21 361.399 316.949 358.322 316.564 cv
355.4 316.198 347.666 311.543 347.666 311.543 cv
cp
.346685 .45658 .539391 .294163 cmyk
f
347.666 311.543 mo
347.666 311.543 353.416 318.46 360.333 321.876 cv
367.249 325.293 370.499 323.96 370.499 323.96 cv
370.499 323.96 369.083 321.376 369.416 318.543 cv
369.749 315.71 370.499 314.21 370.499 314.21 cv
370.499 314.21 366.249 315.21 360.583 314.71 cv
355.85 314.292 347.666 311.543 347.666 311.543 cv
cp
.0301518 .0371405 .909148 0 cmyk
f
%ADOBeginClientInjection: EndPageContent "AI11EPS"
userdict /annotatepage 2 copy known {get exec}{pop pop} ifelse
%ADOEndClientInjection: EndPageContent "AI11EPS"
grestore
grestore
pgrs
%%PageTrailer
%ADOBeginClientInjection: PageTrailer Start "AI11EPS"
[/EMC AI11_PDFMark5[/NamespacePop AI11_PDFMark5
%ADOEndClientInjection: PageTrailer Start "AI11EPS"
[
[/CSA [/0 ]]
] del_res
Adobe_AGM_Image/pt gx
Adobe_CoolType_Core/pt get exec
Adobe_AGM_Core/pt gx
currentdict Adobe_AGM_Utils eq {end} if
%%Trailer
Adobe_AGM_Image/dt get exec
Adobe_CoolType_Core/dt get exec
Adobe_AGM_Core/dt get exec
%%EOF
%AI9_PrintingDataEnd

userdict /AI9_read_buffer 256 string put
userdict begin
/ai9_skip_data
{
	mark
	{
		currentfile AI9_read_buffer { readline } stopped
		{
		}
		{
			not
			{
				exit
			} if
			(%AI9_PrivateDataEnd) eq
			{
				exit
			} if
		} ifelse
	} loop
	cleartomark
} def
end
userdict /ai9_skip_data get exec
%AI9_PrivateDataBegin
%!PS-Adobe-3.0 EPSF-3.0
%%Creator: Adobe Illustrator(R) 10.0
%%AI8_CreatorVersion: 19.1.1
%%For: (Andrey Magda) ()
%%Title: (1512.m10.i306.n036.S.c10.298837898 Tourist tents vector set in flat style.eps)
%%CreationDate: 12/15/2015 8:17 AM
%%Canvassize: 16383
%AI9_DataStream
%Gb",KB3X-5f'*'[T'-"VViX.F7N.PS-jao=,S16C?APii3#LCiakf$"hVWc`))^1$,!.fn3@8_b9j)=6S'bnX+kQ'<WjTilY5.fq
%7a%m#_TJ5]HkFrEs0]*#XENfO`mcFo/%mIJd62/%.t4C[Dq:EFc<;RpZeWXgQ-\D]3V2+2f:.8$EqOJ7'&%Rlek)iApIid)<OnU(
%ZPjPs-e.p6#?jCupmoRhaj(V8*VnMDJ,t(.onE>#q\ScWTf?hT[d@2d`O'I)JPXI.%9J<<_DQJja=JBMlDDX=DsFp%a_eWO&pEpb
%CC48_fL4>Fl"7/ZVV+jNYr:$b2MMgP0b%h7&nh>hTtP0W=0-9':g;9P_JmEX##p`egM*gf)>M/c&uktWR\;eq2$PI;-j(FSH@.8F
%\i,SE$U_Gn`Gq__4).=@_H*fAXfQ2(blY,*%^'DGf\.(#UG6eDYR*<uB\6>sEZm`1'!<GgK,WF/<6,@R7hV8EaFs^f+M4H`C)R]@
%J:S0!3WX&2*%4=gl\Lpa@!$tVfQgLYdMBnd)[8d;AmK-)1:-cGP8*j@C"],S.H&[.:[=4/3e(?.dd[-HlI=Rn=ce[A<k2N(es[$Z
%SMafSSlp`)R=]ohma\p#@@=&0I-iOt(p<fQQ?9&?TL"Q[U^I(\?b-md"TMMEr#\oXr.a)t`lON0cG;dI`t2LlemN++AYC%+!s;rQ
%+p!Pljk.=_e]V6jVPXo*eq.$r+7UF=AXII:ECG)R/BH7s,t-=m1U]k>-2p_`UIjkQW;1qFAY/_ZWo$iuf5#SkCB&iFMJ<,NY)3a:
%Fhdmd;<n;:\0I=XZ.H)RF[.`t?E0?+,0-p`G?*\5gckJETR3.#*qE_kj+O2?ls9"EJ,6*RF>_-gbAS@Zh[lG2\mo7[prc4l'5.At
%X^taG"RM:H#,ZX(NBtV;$hb2)/s/L+TQp1b[I[R3D8cP<g-Sk%BtIZO7Oe`,[DQp98(NO1gu,$E"m!:$^Ce8bMj+'F9Y"lj]d#DS
%nO;p3Zr*tLnH?^GB,lRSk6!u'Ejr]9\C^l8o62PUZg2hnWWms-Ja^%,n#hT;q0Z"r`5-Z1C)D3G0_fC^7*W91D.>HX`a?06eSH2*
%flj>/FR$G>a*"YI$\-[]Fg7D$@Q"(<moV06a(kE42U1FT8j8;Y8gV,R.Zs5Z(T^F_E?b[V6"Ypt9YQBYKBn6mc1(n:+^Xr(eI\na
%>J>h_iB,UVV!spo&'2SH&MJOP?\fE1@ol>TmM_5)GJYB8?npYpUG>O]!j%-TiB,U>Q*;gt&cp=CAm-shn=?%(p5B!(cd;4W"FS"b
%TF1^-28g*aYq'E3A'W[?j7!FW6Q?2'1MO?Rie['u$P?o0^iorE(?%>U6QGWeRE=I*`+93nbWlpLpcsuDehMtSH`Y6*$Y[H11BI\A
%K>o-WhZ;KA9(7UY&A^V$&OC0WR.Fn-&`9i3b<"Y(FQ(77Ncbn!BHB]i0U%lO49eH)+O5Pb"EI#JZcK@I"Ht+h/Q8;#A(pOq9KWA?
%?qc(mK9+Q7n[X#7J?SR:!hLbh9/cC5$,g,6k`8.mRf2"GRKp/XRV)Z+U3XP;*mB1+&ug.%9u5&7\/ipWiWd76OHZ,',RM6q5Rp9G
%Nk)-lC\3CS8lb0A:C+ZKIIa"Eo'be+s.Ho6EDcAMIo>k+k`c%^oqF[k#tK3hTBGa@k`c$e3W:%InfK\A'Y#RfjM,/dIn-./VhKUm
%cQ`tjSb^IDK4"P53!qH[>,=OlWI!sDPq1g[Jh5hmhC]Q7Z;cA:&fDnP-PdFi"g\KL?2Q$i`%^,`B6f2/6&1nh=Xk7,F]$5T3P[h4
%=2LSTa)l?^jd"b:5mMjbY%--'>V?9jn/qQ4^3^=jNuu1GRTn1?<6ttSjpcTU*Rs8\POeiP!@%Ztc9"jsA#Gp`gku@:pu";*c(QkB
%W^1+tRel_eT3b>/d;X+5;&lGuUsi!Y9/"^11eR\",?c-H`KB,CdA#T5C-[!jX2ri$Wi]JHJ;T.R+s)]"%+?aEd\Y@a67IXps1!ep
%\K7I+6$;!5+Y(jL/0[]"%U]]m+\9[WC?g,mV]-RTk&!m`f9(&]<G3H%3i#+/ZW+4=;%uH^$;KJC^eN8jN&qZ2Lk]ko,p'DR`BHlY
%#W,'A)jOn6\Iel\CS4-+.><.>2OKd\Mb657$37=V64bAE+TCO<HqJ4VJ9]SU(LnXdKLH$:P6d^`bekFIi1"@0dY/,;\f_Cf0Nlor
%!(2nJQ"7]]1+T?*A.bM<C`F3mOsis=KuBC6j?p2W24,,O%s3C.@*''52#EAVG$]BNbZ!T)/gK@X/rg,(7K-i-:mgIULSGZ-1QWn1
%B=VW78-PdqBEAjK5dC]h!sM5K8;KqX?(01cJk.-rN.?-jOT5EYebJFK@Kb&NY&g!jENY$G"!h2d,i8noZFi_AH$U0HRl$%mG=d<1
%$Vt)mQF'2UnnP$*n<pAZ'SeuG'q$ThKW#HD$%EQ?:oQ]c<%gLjS=4Hm!<JaN'pN%H7C+\23M*CPW6$<28l7C#!+\>[MgeSN2:Hds
%]#!ikOO0MJ20`RCTHtpq!%^[1b:3j+!2jEh"?^JRJ>28),G9^2+M\I+"qABA![S#g1iiq@+E[r@.07\(!8/K/Kja1"EKT:4r8Bl/
%YWP'F"9\KEVL]H@VjS4H&s:&N\U]>jCna&`gs]h3JVhO#$)lec203BTFVnA.8\C'sQ<7!/BYY/`f&b#s>`T8.SA:jiP=Fe^=#JMQ
%ECF&8*e:@q3Z4bbpL>NU?3iFRH&Lf>P);tbdOB(]dXf7r!NiV0ctG2t@0UI8V.oNUaoY,-fHOm",dp*A!80_V=JYcs%@%j48u2O`
%AKmh$A@X&1L-c??Tj/GCRU.>78jXJ!0;'fC=3*@l'hUJ)Yt1ZB8.Ur0TVsH/<?d<95i#=pBo]LWk`0Tj8&J-dJjbLkA32-kGA*e)
%@-E1:U8>\_aqVi3l<,FQd^'tQ'gPL2-V>D.PoqF%"&7nnA^1@d#&$fIUT45@oB7G3iJJpMq3%M"(0#5m!8V[_p;%-[!-g2XGf=]r
%/p:jEB7VlkiWJu?peU&IA]a-lGk!Y]=@<\`7QG(^,2o7TjHYWaNXpZlcn.pjLV?Wdn5r6O#Te=(/nCJOQTW=(@ccXTo4*,J]_eo@
%obi]0"%_RIOi(u:EFLZ9k(Sa5EB0-KHqD^idV&?lk'"$Yp(GG\->X_8aV0<kL&X85Q0PFHA,u_=BPK(:q9nr."FT)QLCF;'6'0)O
%js8'GNEn><-&rar3WDR?lq%5b?O>dfdWa&.+I]5c62h>C:.6'Ak$GmF@0=aen3Y15+P5Mlkod<eLQ2ZJ/sKT,`aDN0YY[_$^p^HY
%.d(n^GZIDHkan]i$`Bs?BRI$@P$]1=.,R=iBao2&@?6<#1d(+7rgC>-"*(5nla]Ip6XA<ej]rB)n<73;!%nWb/37N^]%F<7>0b='
%620RU>LYS3X^2Ut\4Qd\a-$4*dM>a=KG=[aVHCmCmg.(gFWLCH(O9TFXV,i\lVME5+:bAC]FOmc&5RAn?N2C7W?;OK,S,G>9dUKb
%W%2*mbln?gAW(2dCsnc.05.ppBY#q(^p"fX6jXV^NZiiU0@9Fs`/mN'YfT`%C3C2D6cK^m@#h&MP,TWQ&YoMnU(\G@C5.]/:Eat1
%<)uI.gGfnM#P<]U;QuTJ'ap^.6kiub3g`4hdOg$B+aJ2%hQD\X9m.`aHdm<CKdDa@`7-fHiJYmH"sNA*HsB11Pac,Y&:]?UkBU52
%6\%%?S&nH\J>S:P(kTDOeWigZo8G=YcVQ>*'Gi;G*"Jr;#ER_qQNIrKo7EnaPSnZ(G_5u2j1j9]RhT%fX3'BloEQ3Y^UVK#)G1)]
%&*TTV#Cq=A0GO/">u1bpR(DcMLXoc71QItBN&<m:fg(>.5aVpK0Ha*^ajDtBVZ<7."nVhp7'Qasje[qi;uiRXJ4,\G-%_OG2b';+
%"a)*77HAe\2A@&8"hYu>&BZq[#JRNWR1LJU75AffNmr*'IcV,B(e?P]V@FOU%Rq]H*2[!M#aZ[,!sB=[nrS7#Bg]uDC'ofTH;MHq
%_H]9+&<=-V1QSd0Hlo(oGcj?QL2tA2le"XZO`HcsLWcKGY<Wm/i[YK&)+c!oSu)S)3%7"G8Eoi%s'1PNL:HK`8.B2ROL&:1ct?$T
%iM8kKT-G1"VR2N7LbEIVn.2n#j'm'B8eb#SSR+ic1_UJB85baE-W"#<:a@(65ab\&/r7eLnnb1@1kGN1S'-F+$L36gBUnNJC%):i
%.j:W`&Vqq.5ZEn?0#u%f4mK]&:P:MCPp'(LLmGC##@YeD;FflSJ=8nt2hrS38E6MudVKFp!LU_XfFSCBp-Cbf=:RHQj-md@,18K"
%lB%u=EEfLah8d<JU;.5&3ARaf6@kfiHt0!I_"Q5>:niY/ORqh#b8es"kmjX*nG!=NF)WS"BJ*D7^pbctq)WO(dIHlrrJ=YrVE+pU
%+k;M7*'62S#?8ciR`n>3s"3_L/Vu\s'\+2:i1FT$5,k&]kb@XWa[ns-7hmSZndq=W!"!n49M#XbU^7L8N2fe]jC&&lm*DFL!*'4!
%mhY%G2"p!A*e,^?h.'k";^?sc=Rp/hN1g]n9POjL.k'T4VLT&c^j&V&R`]3MW4>e3m(ETe1O7I1%YR$QB=$%q6TLBoOD8kEDb=F\
%_!YTe8OUsa2]0g/BBYF)!Zd?!KO><0,79C!"r_ghmR<DfFs9G+e0fBV-q0+n%&=ME'QIDW'jZo9YrNdMWCqsgm.(BAgH<73n4t#E
%^WHQSOpZd2b_t[b%&+$u^5Gj;T"g:g>ehX*asRlSeqk]<UW+iIBMr(9-j\q@6AV;$3$j+T=I#1#(f@l!CU.`?Vp%,G&?8=K:h@]"
%YNK9sk$sN9>GDm.pQ;3i,b>@'"uLM6'0#4+K=UHF!_5jSp?)U3Ni>-n/ZHVtW"YuAaG8kF0.&^D:W9OlUG0e5h'1qhE"i?5$*rln
%ONX<l36jj%jVVf\1$t1fjTE[8d[7I4,AK&E6jZGZ65.GWA;0Db[&cW];&t95-50+.)969JJEl&d$@R[[(n/((^Vs#?V/gi%6Fhl/
%BJQJFi/fuCiO*J4e*e3hUS\c^-]^o1X!eGu:a@M;@YhN2=.%.*`On4D88,gs!lY:IJPSn?i(F8W"9au&g<qc?L;aX%Ll1(%,bTRB
%!C\E4%Des8J#0qD7tC[HE^3rdk^Zl0aP9oEdW2iI7bMf<=HCOEhHEjG@QR7^jHR)=7Esj:[s;L*2i-O[.u:o.Np%Xk`8`N_]lqOh
%(HI=eGm:opFI-%#&6B.N(hZ08"H%n&8%k0@dPPLk/$'Hj*#<8s;nF)jTbt^*m*?JWF0+gDBp$TT%uh?k>ZT<-OKB97=>Z0Y+m&r3
%\.T13%ZuqknpuB,Zq"XNJJfMl`R^+g81"g(;!+/m0U]^9>JdU`(=J'L_VhF>1D5F2Ja?U6=VV@*c=%!3L3d/Pp/0Ie+dL7q1bopQ
%n1;u$l6:bO&5f3U1'+^8M#7O'S?-H;M9/YG=m-!cac\CU_tMqsR]r4,")pZbZ2kRW4sdK@?7&A`pl2I2^2]AM/(/h>9O>[!r&acB
%%%>+6N%#qa-CH2ST@fAOOtk-.1(R9n'&c-4d"QXV7DMl\RKCYDG9iZO/8?mN(5\7+!f2^>R9C&@,3N4ZZ4a?s.CC+N%(]&I(aBV:
%(4'X%LfO^G-7O"&^tC.(]IH?V43hT?Lh6mm,:#aSW[n2?dFLAe[2,fV!)<XsK'jdt_QF/d)N'_)"0kb\"\VsZcnl.RPG-PU"HZBp
%!@SeL:T'.3&s.1a,t2$_Of:eZ?XPQR,U'a\[Y;<><;[4saFP2m<eo*T0XhL1q:Y^5')$Z8lpS-f1MDDoMFTf6&:IR)0i6Sc_j%!P
%fg+=.8H23^2."uB(=)tKSR8<4'er>n0aUIOTYuMm,g%X^"b"O@j;pbNZm;\"__a>$-(b_(kb*3P.&s5'X3BO@jh4i$i(rr2"Nqua
%)4P;40;`RmQW6#7K5)kE4q*W_0Z\6m>[gqK87m?S:pE&?@BH\pc2lN3Y6uU&XhQ*?]b6bV&6iC5nT^B$q9Dan1;e=b1Qe>J&`d4&
%GY-6!#H/RkVJlOq)GlE$RUg*f&:u*aXn)?D777M6''E"t^HM/EREc([&Fa[<\/LGc8:@.O7Z)7AJfY:'$F/Z<.#X3%W[SU@N3C;J
%ZOeq_!p;rcU/)iD?l0aW"P*reDF!GoPlcd[]MLL?)@M`>i?aO2NT(9+p6O]X7:/SN%_8T;<3!c#R:`E61i74mLBq#k8qRr)3%J76
%c)^L\,*DuG&78V2&U.pm(Y+4*s+D;]7\utZpso,,-XmkAMLjK6U"6$D+JQ%P<*G2Xeu'))4H)18V0=Ag;nbtJ$*-q%UIVTSn/s8-
%SYlMi-CJ;j\sF"R2m`XaVGZ!6(K*F2);u>$V'(6!G-*)rZ[j8??AB!@s%+*,0SgKBBH9VHiK+D#jKMIZeFtsM1u`]n>$LCG=su;/
%\2.68br;hF+#iTqk$>k0m:O%WY-(5Ykh;0VmBur<]:l4^jCJuCe/GhSq;;3uak*&HK6e%\DRZ+KekY8,q<rebHI_/WT6]Hu]$5Ec
%5CPJrJ,0V'/7fS])+&]PQ2er[iFV?QZ8=2?Cab))QGDf(^0jQU6&uqQptLC@MsEn?I>?iobI,pL(uS$ZEneq0<G5#iK?lCA$iX;8
%I2-noaj:1.K5aC6K$D^U&Q9hRT=+dXi?c_WpJl&-nE\=7NmHOY!T9VWDNrln]'p6N^C-$P\C+1nM/c)/%!)Du?mFZ%aJ-:#1'6HZ
%hkbqXDg,C#V:pu\oHF-B/&X':)/?Y3)!KtCTa+[BqXu&C[N3F&FT?9%WdZt>3@W4o8!e\6Eq,41jt;*soRh2Y,*T))NG@XK98,"/
%+b>HA<_skU^C..$OjX5q0A#Nto6.Ze;6+5Jm9\s"F51T_IfkcV-Co^@)DSgl9#1YOk^i@Un\uZ:(,82iG&_a5>_G!]#J,ArZ/8qi
%r'jA6&SXTo^dqt.a'dr8]+!'d.Onl-h^a&r/kMc'O^L_Z_`8Xq"=mEPf"bg'@gbcW3Vocb.WW"ARS*AqrOb1.en^hW8/#3!%8::e
%,Hi:&6ukqfNnb@s-+V:=]FeEU16E)#kaBMsTj@oS5f0"jbgOk<Q.t+uV=#H(lu`2*G5nL-FQqu'*_`FJ:@qaG5%r_S('7=V!#$Y0
%b4h&"fRa])>4[h7ipbHMM)'EYCK(>SUL((gZZE,o_(u137tJ\82.K*F)&d4B?pl"W71`QKi*XP'kEV=;T!b`k`M5BHhue)kI`p:2
%HY*_9^"_:ifrY&B]hkcf]ohFMcS:d;1Q-`ieJiII"mFL>SbBWYp^52@d;-57rH0S+[<f7J2lMJPXR7pVd7&HKr^>'I/hZFX[]l!!
%4b?EJkK-=\b4V@+FlCrt0=ocbCQu$4)F+j5>b5\Pri/u1(FcRcod5AdP9R6`c26NU4!R%d4*X]^Q`*%r/A7Sf0SN\<iHVMog5/!7
%gKHH<P#uEr\>9eWT.+aS3Sc)g-^\lfrXQ]%K6,aGA@L/Sm6Srqn]+R[>E'puf_IoH''&LqoWIm<h=;(@N>dXTSeOr@V"&-+rD'Pf
%`f:3;-T::rRPc.WdrNJ^[JfPW&C*+IUp'cnOD?\6\i!*GN'jg:p$gUl1iet^SPn-GLOhVrKCNR+59?^Z@XsO%_\>nE>2qYDOta[R
%CJqH]eEjRnr\iqmdU8:HTul87/V#Q$ROu9[LA3h6.T+_&c^0%NWn$H49UB5"r#mK0*?Ga,C;E-XXNr-'.7@eig!)cmB?ha6H"8iC
%.e9ZHL:F)ZZ<?MKQImh/gmZ9,PE,$.UpfEZh)r'6LN`:9Xq-A7BK$Ihrj?ER)-i"nL\,")"WOL(%uU@6:t2sQ_$kKGL_I1<Y,NE^
%]%Z!PCm#/!go-3Feo+nCRmfQUm9_`#V"!;.!:&h0Ucpd>C&>#Y3R(`+\QZ,of#e[D79(^JgoC?VX`;#h89j\W^YCF5dTF%^h+=:u
%:<gd](6&0S:`.NfAGo).W,!i$X/=lXFcr801`L/k<Me-UlJ\H'BfHg-4>HP?oQ?j=F:6s5%(t0M4++3kg$%JdV6=V"B2ESGG]m9`
%=rITGb4Q)_=J#YkW9V=,!@ansWILKhH;X>^KhAoT=8?J9FP;2A>Ag?4eSrciL+q^Ym4+AZR)3NDVTHbU$iZ2*4[:5l.OJJMZGF:W
%DdATG60Nf%^XdYT@YQZZ3kma+q,@*Im;fDZWKeF5l`lmr*H:%,g!lr!;@;'`:]!AEnXBeNPp"Vdhn)WZrBkuk4,M0qdfLuh7$hU7
%roF:GI>Xi`j`PepE6osLXeihL8:uOLh0c_M,s$U03AV`;eD%p2l/&DKNTG>cHZA.kds*E"CEldAK)\su3K"7W2rs@#-K-4q]'$QK
%I3dr#=)]%7q&8gO%=,[Br4CRB;qqsC?UG=BA\Nm]?ULEg+l<jKq&8hs*1DI:A9%oo'j559.:%Ro=Z=?#j)U$)nU0/;^2?&?2eL_*
%lc-8m,b(tVs+X'T^2A=hbEg"RX.>gS3e"fr!/9/u,@^g--Kaiocu?\l)2(jW@-uE&"j-%n_X"+,Y;cJ"O'E^okCs<oQ"E0ZlFamJ
%`$1&F)D<]"'"+WBpJ&7g;UbLY)5Yh"bqim=/n:IrRqKfkHOugd>hsugR5Id(9lZV\SZDGT[dQ0+_.<H/0]d'4c1N0dB&2pY\,GT<
%ZX%HR]21N6T?Zt?oDDb&&:0Z6B6K.8\mL5".C3Zl\e?ko:(!N6s/B;s;B<Rgesp]JVGO$U`,</-d$F\W+;AMU.S"+u`El=`,5=\G
%0]VO>,`N"t9[5jqO'qMH(3i,(683.0eHjH0?4:)F>FZD>-0_14*_c5*O_Iaoo>Jg7nM3nQbS)Z0bD@%#B&U[db/.!SAY+.7-XPql
%Q[.S%Sp:'r`674(MVGJ`B5/&M7k/bPkmZ!W].NbH&ae)gkI9ltMQ'-+r$d=RgBUcT3FlOO&$/<CfYb'<=HS=Ko)gM?Bd;@(>K,??
%G5JC)XeK.f*gCHlY$oS7itNGuBfD(De"#R?EC+*be/QL$H?X6G-dAF^.8IA<'W2o>FaeqkquipS\U`8uHGF;GFQO*YAc/Fk*%K-4
%a%P*5j:n1QA_D%M2#2YO4FbKfr/'T6=mE4@H(AmOMsEVA+iB1d$_@Ql%Z/s=4P1>Y:S$H305aRoD1:ij(c=9E=**Mb]h"h#WbM*5
%p$^"Z<#Qb)(o6F"/^c6(db[)JlhFbU%;ikKEaQ`.W%LR-p*d-C;><hog,c8nRoS=@]lmR4="`)\>h!ST/%+fk2(b<?^\O;cSfY$n
%.Ci*^(O]oX;+c4JAK$h1n7H\VrJJ%TJ`VQlnhogSo[`Co]@Gb(kFu3urft6(]'\);)jm8^2g+jIs)jIhcGH!_H[1(9h\=i#q2p-@
%bpH/S26_#Xbu."<,;<ml924@?/:YfjR[UjbDT-TW.K#a)5&KHe`sL#OBfgBkFZ(8k>N4@2`SGI]VGu_Rd;1d2F._[*"#@WDr&Pi]
%^Opp*_4P0U3_so0A'Oo]o'*YUDLMidFPJ-#^Opo[mGb7_95\VeVoq'Fmi\54j#Ff+Hod5Hr!r;.D4FoRrQj3;=j/#gg*Y8?PAl\D
%^"Jt;e&Ie?UD.?r++Fu^R?WN6G.H$Qf3^FOB`_d^2c_QJmUm[D539dKboVC)mqNrSp`n=gmd\G`6L))454-o!7[aQjbfmN,XHm=\
%n[.*A95X]U&!0S.#@_'=8`A66*d)8Sb&sb[M*%Z?hJoZh8f/5L-YuDp$KZAFnuFNfQf=ZtRF'o=7T9>AI1&]f@llIW]=<\iS9gs<
%%BV]:G&5EFA63]XpI<E8kuJJ,qiHlniq<9G45qSILM$OEN0W.:8B+7/GBN1HanTp[VMUtPs'N>ZG*91]L(B^I(&#ke>0.6/[Afca
%[r-g=/g[1/@=W=oPei;s,06XlK4PhSl'k9#e8'at3[sJDS@)KVo+(G1Z9TgRn':iSWRdYKraXYAgb#.qiU0BM-UfB$U'r4C->iT6
%;1$16Uss0Z%VJ\!ga42fb)DXsm:*Le(UH\kR=>$u=`0t'6R]mhqs9Buj[SDabnCqk;!)\D_nji84`9D[9tf;,.ha!UFd)KokGaMN
%gn?<<?G/O`E.1enk?BM;bSJAd"Mq3dGgcW="+#'g*mA,okO7?HGuD/b\,Gg.>Ia:6ns^_(2rF-%gGne[P4"OEh(R$Qc[;MVaGmo4
%.ttH<mC3%pk)U2`*t7pe^3uWEY>=sf4DQmZdU5Dl-ARFO@>(+a9Q5&n=LA$-]pr[>F1GJVF_fUO@H+Z%Yj1:).olVNejsqZ,>c0/
%G7/,N@H2JXKj#BF'k^`)qFa.b4R\I+-\\C>SV;siFA0ZZl6MeJBK":4X\,F6eZ5%cjHU@C-\YU7f'pj3NYAOZl]o.qRP[F6lD0Lk
%fDd?#9HeT;bBD(rP[6#p9^-g"R5@IF;7fFH>(8.:1[?u7h6mD(;gHpB*d.M)eW\ZhA=08ia%Hac'a6eN)deaAMphB2fRb43D-H^:
%E.][n#!_Vs?`&"0ikCQ0*e=5+DEs]PKY-bTbk[e+_fIG!@"$em>RD+fkM1I1>sILk.S5W_R]Z*HRUq1on%&VtreI@Q$50_heQOV#
%Z95'F.;/Fa*A1QuNC\iK\:_QJCpu$cp#^OW7AdWXqsBiuSnl%S,a`A]\`TAs^?O6s\u@9?(R>Fnh330%MNa5&FQiX&X/:40PH$Pj
%ACrA_26m@'BTmFOA?iP*nq;YTi.<d]dVOfPJVfi>=X>7$-e%FgRGcqjF@`2f2WjIrFVa,[:X+LGORDq)ZZa7*bhj^r)buqrK>Y&<
%3d"(:Ii=m,If&:($m.6iI)tb[b%D$)\j+Y,+IVOibU$&9ao%:Wf-32(AG9?,O*uu5r,L<0TF:b=e)NYA8F`;Y`f>@+1o<D=[SgQ(
%HXktuj^T8eC\+H)cSn;l1Hdkn(?O,<.ku#Wq54qCC`b&[IirA4L\V$4s#;*4iIRN.j^F[gD-;;d7*bg<j#Dr_n4b[O\+<^rC#d;4
%8Xt8AMYV^oq(Y`*hHBG?2pKR@d7A7]kBs>M`*Ldd<fO)cn+3Y"o;rp\`.=OF([O&8B7K&@G-_ht9H.XD@,bpEQnj`QAg(4(NVU7,
%f4$PpHT1qJj65BJioYpfhH23pES>WnUdF'ahgCUH:=XVZA)ac=4JOWrY-;sT1)akGQtJ7Q2WgR<3Bti'bVL0d`gM*AA"M)8Q&LH@
%].t;(d$\N'VD4i37nVcd)`iJXN$ukXgO'p(Pe[)8]ZKN2Sc)g6r0WK3\0KG^:DKR(@u1e@5-9t%bWQXJRIk-DSd@Qs7[lUYl^p?W
%CQ^mRr4*.:G'K0/9r(\u;kN9A5?VD9n'0n+H+\>?j1Q0+c90sQ%MWf)]QX`*k+#oTnN>g#FMsMt8b7IN*q7DV^3RLQ&,>8f?[m`N
%bDr(Dk5jI6#(.1.W/j4cI[[.f^5TgF`Td2tk1Pt(Gq8LbbBc(cG5<)'f$8-c[JZqpZnn+kNc%^uRRYAIo8*s,aqMJIPE4j@Csm>]
%='h*C."@/>=.6e;>^?9lI-KC)&'6EM=f3\mZe:c('0'pq:JL<rIe:c7>Xh@4=joRd;lm=OgfiWM)CKc1oTtl`V4XpoNa)m\=t,sV
%__^>rR43"pl(ia'dY+6hPX_UKIm*L+R*O.p@PorR-4M_/^D_0\@MpD?;/S5gqN5.Z/*ZUVK2!\HT9j#dl/qaM2OUeW.F^D\HF`$B
%q2OfK\M]QtkGesHV-)EAM+C.["TL4Z?hM@hnHdUq1eq:PEN1nUeD$o93ORPF;(7Tp'otD::S?M_V'MpB^SQ50lms4QPtK&nIb(F<
%lHIPTs38$)bi8>\ZaT?&-UlnaXB)O&gE9Oh*(*Z'NjEp#.LdFuD,PVSONVMtNGmF=*"HhX4RM[+PcN><\+V&+Y8UE3'NQY6:E6cM
%n<\gHGl3`t-RO;o3RRBYdPN<qEihp,d:bGdLgR",]BYC.8s*LXXR`16Wn//<3Q5]aQ#aRDf1^7q<ikT)ikQ6PGNtfunrHb`8YK%b
%s&K&d!ZgcZ]&e*-5Da/N1pSMgC0.BHamu'Ui"d<R\oK;r1VEsC9]\2"6qN$TXJ@N34&Mk(5FY9NVL>W5.?__-[hY`[]=+HXO!1";
%]dRU5E)oZYN:02,iEFOJ?BeDU2>ql!DM@V^gnqb5BonbO7@EU5q/9B)q-K:7Mfm$U5e3G4;,V,HWOGa6BeN'sA7ifUT'o)cn>rNs
%01m]3S,-9;S+`SP6"X/0rU4!fRDh<HWH`]@fel?-cLums;XNtBF(4i<gmB*Or)"jh$,N`)eWA(@1Ft^TSBd=^J*I&3ZY7b7j8`iS
%m%6N;0ZAn,j0u3n75KC=lOAoGR4GjuVW^o?CAkRk\eHEW/%W9cRk$NrF:6rcY+67GePP4%R>"'W0:Rq'kbSY-XfSJl*,`u[?hsH2
%?FK'd_q,C`4a>k^;iFRT<L]n8-J.[./i%e87en$'l@->P0TNc4iN)cp]j<e`$)":>2k0J?GjeWbL0S%jb%)5PJ4($?5ChHFn0&"f
%6&=.bN%X>/VU6pfn+X`gnhmW,4mN$Jq]2%60,i*M)Y=F#`8\g5;O=#OAS41ugOLq(rdYf4\)Dq<_068nn1!bN+CKG@"&5klg/Y3A
%LL"V^I=)FR=n(=\16ros>?72I&:-ghg8:W,%Xo"m-4K\/k[;;%pnI)/'NX4OAiYmm]^r?L?1n0a-iSE%hnDD0?U2TS?KU9\/Q;U,
%>Wfrm"@H5k_LjVj"/S.5p+FcJ7Zm5:4Xeq\DV&Of%SdTV<u7`%R&)$E!nGk-a,of0Q)6,JW(:6g1IY$Se2;fG;WlAVZDIei71A)P
%LO#&kdD,^(:`2aq`D9A>WWOUpE`N]cs$LC;pHiop[M"\9+Uli.*Gf:j[Y5r.L24:YVJo8c`h=s,G3Fiu9$MD8MZEuJAekn9F]2hZ
%2g*s#j>L:BdH2(nchfAL'Z^=XUk/KT_R>Od-o"jp1L)*]Ml'(d1pD%0=jVfJ/EfAFqG(?'aT\&6fU&ROKSs7FgTYB_;f`OD+b1D/
%"g5C,5DuKESO+!C=,/t^i?lS1]+b[P=YKgfc.0VU,Es0<dg6BaYeq)JGAS61kc&''h7u6Ad*T"(@7.e!P'VPCJe:]ZjFj<E"rF^^
%dT=U,\qMp,!"F(&"(f:m%KX.+.Un#aP%aMq$\\ZYQ@]D,![7c[O?/OtBSPrJ%+rBmQEX&LUr*0=U`i$-!-SIV"fY0*flo#7b`sf(
%Vs2&0fUq1r",T\1Y65A8RjgogE@c_I6W!iOJe"nHoTGPmTn%$t+@^m%E&5]i>=pCulSe8B/)`T%0j0j]&n@<1#FBnsr69/3dY-5!
%GeM`44/D^:a@-Fj<-pP[1:sqhpD47]TPinPIaR_;F$gb)IU8R'le'bfM`X(MV:U^":b+@Q4l#:!.!L5e$R_u@!ST^7R;emo+Qd)C
%\U;)s$C*u&otT&%D]7^u[s$_@A72W\ZM:*?3VcNiGLjfh#>c9kN/c^]BKF8-1Jb%")Ef'Nr5pqI"d0r&h)%'o&k)9Tb>Wt.W`q`^
%?G0LPoZ*ge#a1kGmhCY/:5G$phnhrG?J!>t.<_:-(hpKAETZ.`.BNJ=Y84A1F9jnd=m:(?c)W9iIt(Ecf/dK%(X[thU.I#;s,D;F
%2#aA[s#*!KCFXPRrgEoaScMRBWRiW/7u]mOS68#IbOlGaVgI,;!>0\8g_A[YNQ3X$UZVo;ki$THa)&_JG]=^<A!>^O^s=GqBfrH9
%mW%@9VZ\)<1q@4>'L&G>/iXTXr`OH[>t]22"p$O4BPRGM;N/7<7aFVq%L3(%g/Pk-j`emJn>q'@0^_.0k$D&a7oIH6X>Ua0;#ki&
%\t03a/`797>++2ej1JGWpG3'!<j*7FLbuBGj(A#_c:-m"h!+\&g4*e>G370?2!_hogGZkBER1i>H<7@%T4?4X)nJuRg%QG74*/dB
%4+9+%Mj4`'!Ps5ggZiq%_4UsQQpqI^OJtOREnAWf)b@fZWbi&@7$M[Ij`^C*=`.:s(#5[Y&Xi7!+7aAej`VIEO0*^HEHXUn&`2$E
%g8\]d_l/HcK6BL%4!7>">cm_[IoYoAp6V'1[8&P?\?+.oFsFQfFu!C-gC1(JO!a1("(M9WE94ag$md9%f?L\F/RWIo7V>+XC_AJ^
%FPGnHVc@Wp4mC<jXU<VYj7ggX5q8lA[Ug?-oq^.P/0%kS`g<rQ,BiC]i>?"R5fE9U`fG0'."P$MLa;KW++EA)s1=aL<bpO^Brt_-
%rf"q>gs+At^P_169hZX^^;P3.H!7?mqQ4);PF)QZ`eWd:`EO]C+#dEoMe3B32*Z*[^?Usq]$.>W_ljTe8B[NWP8Qai&*:rU]'\Wk
%B[ml@1TP*IpPN7&4/H8s*`23_haSUDl4C3>epeK,GMP+@Z_9m<rE6Z=,6;\2H`,5abJW^a=Eh5W.G%EC-#1J9*+NN96P$#0N_FpE
%j[5!n(e3UV\!@$rQTG;$YD\ShR&#,m:pW2VRc:]Re8$Xt;+qAq%5N5>1^X#COZY"[ZtZtPr1Me01E]G(]&S;$0WdTfRm6go$T%\_
%WWcSIbYbQt<BHVX(H#%)qa'U7Nh)8@#Jg9RJ5H.%DhAfb6'3i"h=]7H,md@H?H9(2B"R>0LBpF_ojtJ!]RFo8R4qIaVKd'EfgW1<
%g0J*"Q"Tf@M+UlNeSH267cA==N,@tGAg.>W3^p(pN79<\LuW.`(oZ!+F'\aq4O'JK\lWHRpOH+Q&E<@ek?"#';k,/YZa22Eaar`j
%[f0:;IG#L:Y7CX]fmU'a"%R'#L>(kO-UYqVIWjk;@H0_\c0,2^2I%pnIXj?D"gm<]9RIha#'g#%+<,B-L&ofgf!ABVXPBk#B`e'\
%P&j;[l\_Aa\(]Nh'o6-.h;Nlls/P+H00#\DX*Os'Un4SAB2bKq0GRkDCKq6g4RO7;.ThIQ*5t1AV!+)$:l.<S3!Qai,=ODaHQ@3)
%.[7Ji3sNQhT"E64N@]Z$U=`&oJneKelur:p;5?u<r[ddP=.m\aUH3c0Xr-M6[ENF)'`j,1Hmk)A+[!E7<eBN[3bt`Obf4eW?Z1IO
%</j#[&X?0-<W,\[]J7Xnm&s!Ek#@&L,Q":*jUQ(:1j,:#[JK+/KiO?7(dtpkc<`q_s10\FAcljb(]F/,G[T(KA=qGrQ-3$igXU,H
%N@(Nm<9HVaSq6'Ed;8h1E`%TmCGe2]EQ3P750o7T5ZK78GLEm7X3pH#@;fX+rYU9%Vp_SHIZDc4>cH08N0InPe-21'$qIMA&f=Y&
%[o/;T<?-\m=[p/WNb`d5Cf3^QdkNks[`]0K0,`Xj8:7nt*T%mjm\!H98tHMl"J(Rh^f[@!fX.-C-8*h_JU4IVcC3eYTl1A@cFB:Y
%j.c-o>&JOR0ehjt`(Wsag>+_pj!r*o<!lt_l8qGr(t^9P\&[.fZUQlXXcLkY>cH7;CGnY^5-3B#SVD46(riZf@#tY5LK-@:TkccJ
%l()Y.5;.d^ZX6oE"#ULJ`lJ]l"EW!.dp$+urlQC9_t>!Kls,dUIbPr5/Ze&X1#QgIHkAMrp=EA?%b(B+\$F-&1.lZ]<GN+5&/>$N
%X*Qr\fGIXdRE&FL?l3gWMO_6p;\]_tkYX(9Vl2eQjG29%[OS%/%b9d%@R&DAp-q#':nse[n\6ap+/oV%eTRk:8moR_oV@h2?7C<3
%16G(A``uZG`EZOAIU+3&i/R8[#c=q7UG>F[\WY*6KG$:m8?,m31r9sjLh^E%QHE4_9j?s(DW`c:`Or=b[_3ljqK2i"(&3Z+7r]C3
%TFs_;;;U@P!.q:Gjm)#"^FlP>ls>@-k^&Vb`%Csp:d5W:DiN#9N-(WVocT/RRP3;;W!U3;q'_rP\ep)*O!#:i-^saRJ)d1B1Ml6[
%ecHZ!0oFI_Y728Dh=6tV1X7[P5B!.]JB&6LZl[Pf2k!U4/Q6F]H4R^Q:tWdj]MRa'e7qW=CIaZ]Qq,B$4Q9cnO-iUMigKm[0>40Q
%)sD6J-#J\U8R_"tC<)I6Nor!n%PLVZ^>X`VY!6?_W4UrZT1lRbKfQ\@e4NU=CQB\@pGmi(K9aIj/6VE[MK,JW,Z?l"dk!\]'dZ?\
%C4H-R"2B9H=8EZ\/r\tm.D/Rrm,k8E_r'e1]/:^bf;B;uQ(8M'1,'([9m$]q6(rrT7'kETg*MFm-;nHJ0?)Tj>tr8V,$lk05k?L?
%cW]A7hW]Url8?/$F*jg)RDJ:[IFC5^>j9Ed\&s]HKpDX*pJE0Z4KR[[!MnRLIV6^+$34q.mNYpiTC+r=pitidk/6l_]B/4qKDh(j
%<dX`/@dUgJkBZ=;o&@Q7Xdne6[pM?Mg@s1,?>i']1S:i;IX8N5ea?FJW@7J1"l2$(Bj.G(X`2"Uh;;E9P's^FZ/"V\F^Bl((hRQ3
%pJ*fKot6bUJ+dW$CW#e*o!Q^iPsRD+n9eWFh<K>(:_lY2C\#Ad\+&d+cMXoPls2Jm4!5?qMoSW[HbE=n]`0naXo@fA$r].7St?M[
%mCm\gjI93m5C(<Fm$m<2NRqD3]X;`^qRj5ea^.+_/2-WfMqcc<(l%6SqKfI)/"D$:.s(BcqRa/AgdO/O+[>/sML9hKW9CkN[l0gA
%I*3N2d%1*$o.Ni5p>C:+Vn-ps\)MeImiAOcCG6=gb1.OAj*k3[>U`^T=,Zk^o439e>;.*\cFmK^qKOOjn9$2KpDuJCoDIIaHDONR
%`,E'(`O"A.*a7/rbHbEcs)kI;j`r^b?[2EdV>^0fceCU/n/W*Cg0/uT@DFSjqO>f8?DI)\lLF#nqPq4)ZrrT5[<#r)mE1Igpi9(>
%];u^<GMW>]j?m:g272XP/\bHn-L6#JM^uu"XtC6f(l.jt$X<FtNI,T%bH?PCqA"0;g@q2[I.PPANAoCKCZ>!CBBo4_@f]DP@R%GZ
%D#%bZ[9keQ<)7P$9D45Uco9K\:&fTZYHV3eGYl!Cpd6!UZ15[Il@l7R0\YdI*Ktq7IT"lrh_s=,?Z>uAEq([S-JjY$OPk?:j!RW[
%bG+LuHrG1[G&q0,qX*A\iarHNoXCI!Jmk<QmWf)Tk6M3=EUs`Wq'MA0GB/BN,'Ull4>lL:p:#p'>kn$&E45W&Ha-h)GX#i5^4*K[
%XDmaK42.Y8]n?3I4muJi-j$"<r;I`oWdZA1qtdZ9;Mg)d+g#*(UY_Me[f%abgA>L@m&4#4P!ZqFV8lC"XhSF"@F$W$nO.m)->1&>
%?J9/'04(,`HZ,MhQQ3'W[Xj'lQ65:Ym[&B;-;fhf4s1Rr(V>9-efSi((/'@mT$s98C[ed7e[VA%p1\S`rO@4+4+?&R%8sNnRk`=r
%gjdqiK4W*%e%TI1?9bE8LTXufI*c'>?eC,UMPo1JUOqB@05LR'k'@:>;^<X/m^@?1>UPro=SZ.;.Jk;nf_Hl;8dd=SSYPXT0>.6:
%\\1o?m(&nU02AREI.cbfC!n/PfZr%7c*pR5G'A0%6giXt^!/_`?l4F3h_/eQ0).-OWsr#dL3C$![Q+V3J%Z2:>OHC<m[h#Xj)ss)
%+&1=13mG!YX])PtFfp*S&52b@Sjdn+qeH_F?qqdrToeY)hL,=]GqeOZ-dZQ3>[?!1[,!mE??o%JT,1ODRu8T\i9]DYgH48-So;;&
%hC4eKcDu.Cbf4.ppaN"0X16r4.7t-;[<KF]Sm/:$IX_of5SKu#Ai9PFj250LQ(&;t_g:WG]\]^[1Jic99mM!R.-nQkJ(0!W@N%D.
%E3aU;+7/07^E;bJ'Ct?QiQQZD-".Dr9;RiK3u<PU.,]gj;p.5h],HJ*<k(h*SlkSS?rjb+`T?.&-4oau>F=F=mQZ0+BcD0E4'LKU
%jD2/)<CH6b<]MeFGk#UHZr+2rkUL"^ri![+O8$'uEqSU!(A[VXR],PulusE2esk,gH1:2!+hkVoWSW#34LfIi_f&=.s0VDt=t9iu
%@d3m$!aVW]]5bQ5#fC%iSpipLXVA1m:VW-8gmbe3DVL1h*PbJ,`OBt<>:J5q]A`hJ?9p5Oo(mNYf7R\=F8GH:*f"(>?=%t4%)B;q
%N5b,4Ab_7?+TNC]UYR<$pqlU]rYG5)KEfBOSks@XeIdcP?JV8(0FV!,MJE*(5R2.q8H?+X`aOl=O]OAu3;N?R"@0`^nSpf).rXAP
%q[o)[6>fX8Zo<5hH6_-Gh_1>j6cqOu`[\W36sp.Y#)pRBTo7;("=LS_Rr,qp.Db`iLh@$?D*Eg/7jHq2[69>G"<u3JhmLNKVg%AT
%b7XkG>t1bk#>hl$+t7q13"5doPX6gpNWR;4bH5_#DGF#++&jm)_9Jld#PeX,(^Aq^TW6CAM<6?m&N3!%S\^A_oLUmI!c1DF@abWD
%_JBNIp-s*KRNN31PmEV;7".`fLEaoTp2N;D0+'$pgggd>66OWK9,+=$$EkhnFnd%&L)Zg?CkZWeW=f49@@1#JPO1q.PA-j1%`nUA
%Kq^7&HU'D5$8ZUD\*08?q9UT&2UO4@"GIKYKYRW%d4%I?]M?ON/6Sl*OcL_IB*f%oB`&8k-=o!9%o<W;drUa3<fMo`6ndi7DcY93
%5RT-VOS511)-E5D#2*Q-7X)P#GBe<1!aOY"XZh[**PZmIJ6qlkm=jp@O9fXLN]BqL<sotDPO@t9X`a$hcK!oRGL$=h]5g,VGqe`D
%q(DVs?+_Y@1$iD$POLOI9Bn.J="eUf6Z>nh4q<MM?l/r<Y(,(UH,etEk7kBN;0kn:NRN9Xal:J6R9=e)oXbt_-?nHrLQ/(\hGJL[
%Wq^g_FYS0L%`=O>gkAc?"W]3a!@*Z0oC;Uf\"CteKMLH*Ji4/tUU-?+2<GIloucSfM?lC/5:ep85PdFB&'oRqH,k:%p=0BOgZsR:
%mEWH'<\E[?SHI3t;`9SVZGRk,oP?i)5&I*J]h/%rZi?b=p8W2@>!)Kb;Hj!ikLdQ]G<bd)Dra/0ijVn'>9Kl'*9RL^H2FGT\$ma\
%g,FA$rTn:X*'Ea]3mcs0=.GlQYhDJF=!C.0q:nL5c\&q08fRuOU^`%W8K:.28J_^;EKL,Ib[WaaS?FJ,jUkf::VMEF\c4@5nb@N]
%[J"-P:%8VTKL'$7W^Q>u#nnFcMW4@5jURjo$Xcro*[X$n=n%],`ZX4O#_j4UJf[$_M3"ON_6a!--sB2s.P[7#Qi;n*TN$>EqKh_N
%/Sr1gB=Z3^U-P7r[`uMbIUCo6qD9b'$:b!jWc7\.0kkL/#1Xnn7>e7q)S3#d^2,pAU_YpQ#H*q?IJNg)?E)T@I2*.XPsZb"Z$_&o
%UE_;$cZ?9"[K)fk="dQ[UA',QHhHsn9rY?r%5(%(hgD)j5[X4[&%(./Vl_AUmn]:+&"!%](SC,s4as\bEY?IFk:H*Vq]^6ppDDnO
%K<o7^Y$mLW9C>\ohOt=.5_gcsD68+af?i$[7%/V85#ZNdTiDr[5PiHpK,NIe^3]_L:&0,i_Qhm"J+<Lj7(a=[P'E\noT$A\hgdYT
%D6`d1NZ7LsF0R*?'YH69nFWI(,>PkS5ek/i?uYE>a.;3]90_69J,M&?bOGn>IWtalGOWj=IU.D`L1$dd<nBs9[L@]Mfh/3Dqi`[N
%^!o0V:+tpA]l4n1]>B(]h+T^NX#O]0$ep#)3&UZ0BH!)?)*3sk^u.mMs&`GcW3;Nped(a?ansDF#.kk;SA8C-b"otPh2T\?h!W9Q
%5gni/6M@XpZF0DsgLY')NpXHT7U@B"5m17mhj_$jlFZ_kJ><_G0V-`%s3"K>C.A<7?.`-Ao^/N0`a@f0p7GFn?f\&Og[?"%JC]LH
%io<Q&=Y0Ri8KUQgIK//J#LhLEDnjoTc^p]!Dlp]'/];sFPJB`ppQSAH`q"KR)0HuVk,P#]=KGW\$LmQ&HGOOemui<3hqOuQK>jSS
%icsp0"G2#"h`V2(p[iq)6u.0&S/iEkMTa8XSnDnc+,cD:qGNq%V37nB$^[Mlh7Ku!qXTVi]Xrl]dA<U_#/K+ughO%&4n%<Jp%)AS
%MfT)]J,:Y^o!!,f>QphSI0;aWVq7c/oo%B";8naf=2<ti4%QaI:Fgm9%9_9RSC?&7<e'gT=d9#cS`BV)=%\BFGH(%_I_*-9U(0M:
%M\*X.ajmT%1ZH[&b7F<1[Jfi(lRc0[6r$aYHI@)hHo/FW>.&\Q]rqdhRh%"Qc2I.9PkXQ<n$l3FF*6Z;UP\+$[B6k8=*5fT9%aWo
%&hUP.<o/7Xa]$j`%Ze*5pB_*9F0Ce2D=2PTek-<]ql0O349%)9k%X$>.^@X)<B_1A.Ye6ho<%3dE<"+p4((Xe=/En!:NtW-T1WDN
%*J`nIbq+\*$[_ikIIF7VIdaTlf36iipdqk`"219$9bb7$)b]oA:/K"jMPmKs>04`!#0])VE;ukYEpj#udX^E=:W5!E\eRi5%MF6&
%><L.n>$Tg/Cjbl8O!!.KaNN&'Yhr`O@oK\<bK;'Jk"YNt21kDc?7G>k#5<+Qk?Y'kHu+L>:PRK7oSU\\F:Z]'o5!b$d*-4AWfX7k
%[Epap0pZ!HBe1?]DVM#h@FWcLXc4^1\%-fPHSD6+5Blq-q`JN*^\dl\jsTcZ0O,>N$$;I4Qfr*;q^GU]gj'428[0/*JG*"WmGi93
%f.Oiq2XWm+nA1)F=OWg&0@?jQ]g(_,0Ac$F(m-aa]W;mK=71)1[RF$hqj6K.2J/60r-DejVJNaV_n,U4bN:b3C$tS=iUfua_;5(D
%hC*[B`a-aPp;mcG:ThCTYC7t6Gd4Nr%\.cdZr/C=B8`TDn*k51d^P-B#``!Rc'%fHB.pVC>)b#`(C%6DrEop;o_B%5CUW_AkAJ"P
%)Jq&"%c3P\[-e5S^2[>fo4V9^3;5;=E!=H.j"!gCVbZ=+;!ddeEJXcoGq?]5$Z]GZ6PS[/BlW=YF"]_j]N6R&llD?,=siI$\,Q2h
%Oo&NUP>\q\/C9OF78&i94M$mRi:Uo%@jS`DA/ME=?lO1DT:eg((n>=7/j481pU[le3W4mD78L#E11"-sq#g-f-Lo7UCPFk'c&&:'
%A*RPh;*954`PD>(f=]ac7%mU/d)fGF2e>KQp4W'nb6T2(5m-p/$K\&M:De=-Ck$UnDD$:@qVBuUB+TWrqrFKM`E.D%YE7STfSBk&
%'778mHF1%qK55!M5btYbV^9i8hlXOgbDQ#bf?'[>OfipY9'aZELP5MVG.^g<.kSKfG2mBcH%#AM*aYe/F*lV%j-W`sGL(>3GF`Y,
%#AWR-923CHhU!rpNK(5KJ$jda*VE`s5nCnK(Nurr*ACs5.gub8QZ]q4F`5+0hCI5cgGmFG<Hmm@kBZ!!3,WfF;ESe[>Nr1)cC:ct
%nUn<CMrh-(GB6iH*t5F-TgSDCjZ?jo/[d7)YH)@1i@kAtU4G<d!F@s:oGp'bSX2'*qQ9_c?0OYYjlaio%Y>8uaCCo*<Ol:T5b2MF
%p"[#p#?unQl74tcZ1*-\Z%OX?41l?ke]V%T0bq;2G4#K#&+s^^LH2id_en;3U@^$aY9'66:daCr=*e+35OWa&SWDME_e'+_/X>A(
%QX<L7V6=7E'hXo,DADpXQ_mJA(H$hRBZ;h_(:;8G?nU:f(=!u.mb-D4h9FA>4hDUOVY4Ts*&uAl,hKam5/IK+a8NY*Q5Tre$"hjH
%+$OMPqV)f'G^.MWVi*V]^t7<i^YA$)]t7Knnbi"QK"pj;DLuS09sE;`/^Pc8<pd<Dr<I&kZ30dMK`LJmZdMG>o1E`_TmrS;@uO["
%+D<_7CV@,riP9uegY3g?j%mYCA++9ngj2eT1g-WjqHT%WFg9LqCafueBOs&NnT!T9aZJ-iXmL7Wc"&<O[_M.r@A/i;?PX^5<\&4.
%./LmnB0/NrJKUd\[>nY_+-k2XPs&b+HP[>CgT8>bfEWMZn^hESV*`M'e^dg[L-/]iPT&C"=OcB-gu\CPMXjm_rDB`h*;&&an$j9Q
%:J(3Ul>FmN.]jJeCPDAIl;UiGmjU"Bo"F`,S%E%p-f:7C,MA`[%8o7]E+?Aer&Js+RZ"4[AXDTa#5M1,>!@7=3.9s3_R+[\D#=0&
%lROF.E#N"LHF7=;XGfb(DLt>b.G_>bYF[l\TBI^PlkeQ#nTb)a@MbkU_g[#1?%ja)HF^DU01'dZl>X<'r6C]g=Lj.:dsgoebTe?0
%>1f*Uf6,q#4ns!Q.%E.Z5Ggitd)<EAr&G!\b/`8MD!R#RikpqC&-:SIn??$Zh>Q@"5;S=*A,5qHl"'V7>%5:OUZ5g)^lHH^q3jO_
%-p>KpI2Z^2+"_ioCOY`Ri[0ui_WTYMHSKu'WaP4>q9<6!Ij3No"ci+Zl/D>&ko&3E0Q)IJlL"OdiVDM\<da+WpO9Af\m34Qk,BiB
%]))K<ItD"^7Nt.t=`1?k=m:4PH$KIRBbdB3eJ6l_iAEd5'EQ8q)2mAJf)"R]3SE%FedJ+r57?qY^9nmO#(#=&$59\Q!=1&Xe7.[Y
%p22D7H'Q)7^r<u,[f*j^DBH'prud2C<cY5WNGA:'HiCG_n34ab!-3D"G3@o'io<Oomfi+X8qTgOFXR2[LNqeC/d)9[:U`(7\tC#B
%pE\H]R,"`ET[RQeHP--6#^Z.9TO)N3h:5'NqXL.i[H00Vn(Hk#8hJbORG"RkHZZkuZ^p'e<W?9I:?,s/K0nfJ3&)W^#p,Q:*TtTt
%5!5SUDNc)iF%Oa/?F/%\>dTu%I\HR=K+Cg!\-mcL>q@or3al-3JH51R2L$!+UO0f2s,dWnc$F6fNJ4,=GYr6Uj4Fn!)j1+>S`)N_
%"JaFK'I,"boZjY5nNPdh>6<HjG5&1Pq_C+u?N-VZG.[Z.+5JWI:*^_5E;ZsdUY)AEZdYk'aMErErX9V/0c^0=$6=o2l3MBh:_)O/
%%c1pfSMkuQA9N6`G4W)rh(A[!_qPpN<0A).9hZ6k6]<Sp7=Y]tCW.G+F7RRFQ#9%IW</8uB=77&N17*80RahuaGH*KGAu,mQf/Os
%]@]%b<fB=oppR=*K'4U+^7?INoW;o:<LS!L7M5QK:W1m9_^+M/Aoa\8hcqKsN6HMOiIJMLR8!!;pX,!:j[6`kq.E;Eg8?-(E\Ij(
%K&6Sj9D#uM$B2B=3UW,oCM)^r)o)QWNn^rljRHG=H#%J);_jpQg^9re\a(>EoWCq.j][)^%C?.*Y<+p>iGmbWrn!1)B$,,[>dP3I
%Lp=MS(@tCJoUiuW$@DiKeagaWa!>i/'6Zk$L`Sem*bpuBZ[fT#%/*Q-%)-pI4Ue<\O$HlVIR^dqkt37R5%+[7h-eup*R8+?od!Tq
%UQ\pGLmNSZg(^P&Ff2L"N@i49[t7hXQ3`@7.DpS_pbHm/V5\PpI^cjBer___!7N-q5<Lqq%mBn2H21UAV2kYoU9U!umDu`'Aum5"
%_@9cf&)VCsSU%!/8.]:H,)mEq9O/5X0Oe'J77@V@W#Q1j9J)I8LSbhPNFN2PVM.g)'G5Q!^BB/kL'B%':_P'#,GnqS'c2Ma9Q^"J
%98s!,*1a<A\2#e5Rh9]2WWX0t@jn4O!m3DValA)lIR>FbX9uSf@Sf=LSOUG.0_%[T@N48>`1$I8#P-6fd'u3WGtLaO-1u8tKOQEd
%cbA$o%2k.RR%fY-,b`oW4e9CT<SFk3\2/"8C?R?sNmb==#crGZ'ok*qi&/4@:Z'\"^J]](4Ru0rd&@)-BI>haAX(bV4^SS8OVZM-
%WsiUg5>%G.3ir2AZP,jKr^XY#FL@QsmNK.g.HA^I0%2\qN&dnYfXW5H.g&To:')G11U?n+6sItg_Bno^o3n(6]Ju8\MESq^n$u+"
%pgbbb5P<p=VaF=#aNk"=eKY4e?+LnZ3#R+2R?k+^FS?KACId=ec"L#5)1<s?gS!%1(t2p6lbD:*AC`L<%8WW?Vo?"VB_a^%Y8G)?
%_$AQ=1C`7?KqN^n&W]^]rRaJr'^4cS/$);!G3KrqU!'^ElMB2AaGhbWKVMdV>6>pt4*+a&f@G*`2*=G5@U)#,@GkOd^=rBp)eAE!
%*k/biV?d+C:?)RQPPA()L:4ubBl2+Na%A]hGrtAK\<2ji2l\H-_gR?=\%r6&r7CEQ2hFd$7G*'sh)NQ&q!h"%l]D6JVaU:0`TK>]
%<=@-E0jHN891N:jaKp*oFu)[<Pr9i7H<>*pp;9,+.-$SFEk?]6SgoicUp'AlULt-(eG]*a`.@313^I4<dT!.+asEX1NL"";L?ana
%6Ht`0VQRH6591B,$L:cb%[j`S@h!S0_FG1VR2$OP\>683b3Fg=,ARTUA9?;A9$>_X6i^R?'SrjQ80][ar;0iUO`dK6'gYWMa;VX-
%Kgc22C2:)7UB2JW]BLiGa,B;cA*Zl:lIX,bh8huOo5Ej4FL$qp7Rb[`V.EA7*Yqm>&<LjMZ^)&\DHNQI3^/W<q\^f_-cuQUe^DQm
%?0drI`Fi#%_Zp>RP*CtIPsJKKbj+s7dAWb(Q*s/IXK8O<,$lJ"_BrFsPgpFY%L@aHA>7@l&1,B>6kH9ukfUoC^Ue;^#$oot>mT>^
%1>BkgNhf9necn&l?39"@UA7&W4],em(L8C%leKd;n]o&qhuY/c5\_6-</+qM=j=@VW6>=%9oCLCX=]-^Qag29+L2NBe`14-cdK.2
%UWs#K(X0#f!`]5+l,#]#`sQgt#XHVLaUo6P_FCQE]8m[qO:;uVPD'@EfE_iU(a'F8F?tsS2%r@[rb!7p[:='I>>'%](e`jW+ZBW6
%lcDI>$1SU0>2k'cEe[+uQ>%]L9c(SN<*$94^^)CK@N7$.B>@n`4^"^q:M^.k_d\-aEt_[]S]Jb16p.+U2qAc>"J7G-p#AK7eefs>
%`sW!''+LU6;?TIba^Vh><+Re<X;XPh>Ns30c!D:HE[o8-*9(=QFt\0d\uB=bP8'X.Z`X\e#crscEi,$_"GM!((RhC-YsJO<$7H?0
%nBI2`LmOb?l9sFD_KqpfckX!YM>B/ITJBWA&.2E68\hA6lV);">'a/HRqC6YBMo&ja,;.oL6U8QV$aQ](]jJ#BK(f]1DhJ&3_UG*
%k0Z:l\G`[aQ82Kk)5`=;TWj4_/]YV.?b)\.WV!>'Ru*oJUI5;t0/V&D?lf`&=M8QCP7oNN7t^"jd'M)q@k./Q)5+_RYV-K$(mD<_
%SlotuKbXhd'bk7"#<Xh>q^W:$8oIh"p](5ZUF@u;<0AG@6MFnY5JYm'TMM6R"f#Ti&H.0T$r2\VCc&_td$*R#/0L2!LG/]k63jjA
%jJ&$=.B,,ul5D:%<T%QC)&pAS-G$Mp&6Khf<J2lQ2([NO1aN-upD8G3Q$U)5FDM(.l/]q\h/ODb"sNgO5YWJ[$+`C)C$6/GKCo+^
%'<<WW'00\+c,d-C(3g\o'RPf<1?^,J[_U6c8:7?uIUP,ZG9O!7CtjuD%GZ*AcFA;p$&M,'T_7`W`hRQR"#=P)QII16U@;/a12,^#
%mnk2>]R`q85mPt=!\k-WW'Uks(MRH7O9cdba"BE"5ZW_9aZ0Ic==,^,8d'HSjEBi!R/3FO%A_`*QOnR]';c$.06IUe/8u1$U)u*T
%:eCl3c2b49a-1!ML4aRO'O;%#f'F62\q]1V,Eb$\4=Q[/OMi?`e=7eMfN_nK&XkD.iL3=h,@Gs,bs_^S']!ehe2ds5"CE,0e-*l>
%&U#2H+\C'(%!5'Xl0(^5R"MbR*>4]fDAl'j+\Wt-)grn53fWp8?_]_mo=uLcL"$bm6,sjBT.V+@:E>>]Dua8g3/9ICGiGl?%1&SW
%",rfIrQHN4("_7Ef8#2Q^DI"#M8=3pRda;_h27m4B#"S),g\rmAdLVTjq*>=iH\pi_;lC8hN!:N"LJL?c_0tSS2>%;Ff+;q'EQNS
%Xod2TEPrX3#BO;"A:"uSF!e@&T(EZ[,#!MQ!!$P0@C^(RY#d)iV<bBQ-uj(B85nR@P(U"bPo/GiX)s]q"RU<#C7ti:_4](B)h?0a
%8*:L]K6AS;\KfRdA.i`QgH!=`[$)JAK&m$%;C5!qL+5JW/Mo=_=7'8<7p#i'/_DQ;0Z,YJ@T"$G-"u;B-c]4e9F']JSd5>uXa"MM
%&dU$%Q7=\16QVIW39%k*1I/`<nc&2`1BCFc$8t&R\<M:5<i%cqf`a\f91V@MG!R;0(KX/`ABUi3(hhVhRaVn8M$;h>5f?5t_S@Dt
%jgZG=&fM&<'c#HNM&/L8BlHJ<"3h7*-(I?@RGnK<\6p$8&Bf1b+<[Q;V(t^,'SQZd+JQeXVWDiTd(.);*0mkX0ND'1m&*-*"W[s.
%(_f6RViis2N*In7CfNP!]J'Bg<3rF#3NP:hZc<7L9:BU)j8?r4*4V`U!Ul^I=<-g^6pfg,5_-=T3\'\'4Y*`T\-tii3.3X]a)(]A
%1DiJi+C*e<VGc6-9.C];L)UqA/<\G=8U[2:;J:Jfo4(k`We;[mBnZ?/F^6d]eYoJ8"B3t_;M6`b$r/(IWJa2!k='39A!*lR_/r.(
%OQX9/cq$/")Io+,%?%O#JS(T"kW;[+eC4t+Ne*5-;ES)GVTUBWj9A=G>4iJMimSf0ZT9H5'([#72*hR&.)cT(p^_?Fa!+"a-@7EY
%Yghah?nc#n#fb5$P7!4!h/m.j0@/l@h/MBFFI,XOddd-,Gr`7&iLIs<O!\G1C7p6A:AM^kKj^$SZ/_PM$l4CB=ckbf1CZ>:(FlRn
%/u:IgK#8eMZ(2$&#,qBZ3N_PS:4.bP@2nFL8Q32SNE$Z2`$kohZ"GGjQ@TN*pb*CV(((0a$tD$+7-80XJl!sd&1Y^(TqDbrWGjCF
%%&sLDZ^UI-^Tn8AfK*7AUm)`9rB?Q-K%Ig*lc5ibMP+j=O>dL)+YGZl"2tVYKOC1'H;LQNjRrb2[KUiH_Ik8O5oR!rRUe]@<5&bj
%'O!I&0dZ4=.u:Sa(Te\lQlp$Di+`J"OpPGL![2S8P:16TnehLMPCd,--3jtI@MJ0*1>798.hm`+()#C+on3t\GR<mFN9n=pQuJ(B
%U'//-GXbUIM?N2q/:r<[XCDWsL*UBE;+PX,".=m$>f$cX1FT(072ARX%/)>n?:chu)N4Y"_>mnO!VC,).o:TtV)N3!Xn@VUD*abD
%McLgp5):@6)Bb'-*(N=\H_$Ap-Ko;=:p;L\ka)D=Cm8"l8Ie@aQ5ZD-_Ks0+:dY^n1G.(7F)QTNl/nu/gU)"WXM'b7-$R4.J>DS2
%,o-lFImm"O%Vs=^&5"KFqFF!M>?G:%]P)&R@O;$hAf>;m1m=[AXJJLr=p%0h&nu(=8ucoZE<1d\1[8@%J@:Ij#)rkRd#k\IWUU%]
%L4P4cmDS*WgL.n0&f;$'@$9&4%1E\E!0+aq8jKDd+e!OP'`q;[<WgOEo8's],>hNWD9/qQdGn]6bs$`qmY-Y$qSAV`Kl./m'P9`u
%.YNfu5_VR/*[tiSPX('XK5+*?!ET,A.5AVf1BaOs1eCo[:eDupC>'6hTN+(3#c5FTFZ9\Z\@T$SN(\e$Ql-%[d)Z8t5\k(=jB>#8
%_3Y[QH.kN<Y:l;Vh)Lf=W;839B.?W9/f?,6+h7H[R<H?%)<aMW5gU2Lq8as#[RFtKi5P$#&Dbj;..;q;7Cc4hTlDCjP<c!<:;3cK
%Y_$+F$5aTg$Cl$J'Zo$N@"t@L99]q[_"ke@"gBCEOKu[p<ckJJ\iC>7Z<(KXV>EmjHg'p%BXDW,SN`E[(<p!5NZ7m)*$/#prM>-0
%"C6Y0,cEc8;AQH/U0*"_9q=91f@;n[+t/9L',?IhNfjCr87DokTVIKD*D))UlP(+sQUuJ"GU`?"=I@l&j3>Ef6l*cI_50SSP(JDi
%$?/ZeJdW`'9@Jnibu*-@f>b1WXV9>ad/_`VG>F;?/hND_n@C<"iN/nbd-Pm#3m:3.d"S<Q'e^S@Y?2F&K5?pXncD,5TY(9R_=Or7
%VE,LTmLlApc22hk1[gtG`GS!9$L3/sGKU;E4OY'`?g0iQTO1OmY"_03e*0IKK7h@baAu_X\4LK-k^\a1""t@4jF@I:DLd:K5uBKr
%TkD/Je]9*E9@Tg>PP/%1V01q8`"4CJ`F)Z?r'iXK8Vo]:&;#KsJrG;!1h/f&H*3TLetA8?F^2BUZ).@hXCqUm)p437O*;8Q1m"l5
%M$TtER[-S6oG,pjKci^l[1$X^-ec@gcXNI`AtF\tDHMGdW*oTd>-&A)UOpTTRr-#sd%cNp?X]Xl!BMN-@\@dZWpO)?L%RhW&D[Nt
%6`1VG5md>6&B.K,TqfpIQ;i)]\`BTAV004YXt/LSC"cL/+WM\4'Yu`([%8gKfV*1kEE*.7I8/.Q$.A&`HEKrg%Q?""_D#G9EPhl=
%dNN8_7>c_n3<r1Ba\nLn6Gra`d28NM/NXUNKhILJ&\GR^\IlpdQc6m4ofad0WV=ZadTtWC_YL3J!@F3dG(jD%&@GpZ#jjD/O.Zam
%[KVj)oVZ;:HE;dj<umJk;'DeUKHBG/.Sq?6-,MF]+Ud#9(\E>G)!I[GE2o_NmQpo>.ZFP63ZEZ^$Aq7[LUM:U#P/1T$Qc02TnfL,
%7^T3R9FS`R$qc9Ac_lS_J,gm1>7d?G<,;l)S,nF`dFZFcJ5QE@J0E&KPR7Dq1l:7mQA,3hUl>!>K+eG?(Ee1"`LIdEd>7k8qjt6`
%.PPggO+uV70P":;X%,W56;Rs8YeqH;3g0W0,(UgE3J_7(j^hUm!WD#@l3/bt'Z<_a^c@;E/:^"(2)'smY#Y+J4\Ao&NRR<QSTC@2
%bs>U<,=H5!Ln%l[,-35H_nr+KYcX!%)"_2=4UbgCN2'f"L^=0iFr:$_,h3cO8i%m2^oX#a(]@an0N%sW&c*7@]VWQH6+Rjc@l=UX
%VoB>b"-3Kq2aE#J4+qqKs(UK;#3BBh=`qOKf-R[p+>GP_cu#I([L7c9!gb$&/N^#^+t;K1gL7:12JD0&TkIU^"g"/(N>-)eO0(\%
%E\3dT36""r2&KW=`lh;2X?&_$L\\O;@?Bm5fPMq>2b_u'%2:.B;4*%?Qe??"b5fYm%GG!:$e(n^PUE1rKU_3,IU%ZDc1J.V/ORn7
%f-JOp")&n?9FUF`=IG"S"N=@f7ZW9u,tqMS6qhX`a\HP$i>Bs-i(*MJ$!\K0\IdPA#JCpmSZstEG["-4CJaY-B+GWt,UJ#Hd(ohk
%dbY:Vf1]4L)Juq!&k_'CaU\ILRg^0&%XbSqI&1]S=D2-'NcWkSNZ+j,':225J.a3l`K33hVS],/)i>r=@jQu\8&?s(0kskMcg[.K
%7ist#:j8F3+f:l;4ba^ffV/n'#M2!r<)c8+cu0H97YJ\mbD;9B:FSiXd#AlPG.CFA42sJi(UaCb4.%I>"QnS<7)?\S+pq&/]Kh$Z
%dmOR3$;:#aDj!5;_Ot`jTo:`@K$lTO,X[FN6nGbK$T9:><=6C"UKFP.7\$;SAD8i1;McRoR#4HJRSXStZ,h)VS?8#J#pso4=5(m!
%fmSgU;G4qgMk60[[5_s,aE0flDm<99YmHgk93R&`k:WkH\Y>.u333O$HGEl=L#M#"`Zim_bs#>(&bUGcheW=H=-=]GUno7aa<]],
%S-+L0_tan2mW_VKb!<I^X&/:3g0j(8B;WKAd:m5-PZ%Kh\2F91^5U!@-7,Hn)cLgG60N3R9^M]nX7'0#^Q;=pG`S$-RfkHYTMqGB
%n'n(r"^*W%Q]46QE/u![&ZmA^'iE6[&kJq4Aj@u9[OMFh1KKR%ei=Q*C?,pkCD3U;4DCaQrsqlI$(^4:Y-S;+9h.+>-QLiEJE%&I
%;GRmLA3kHoN>.&]6]q[j".Xu:-:lphJ0jt\'L^n8U+ZT_"OE49&e=?<Za`]LgRFkO2(=rgiOU[mr.?7/Jl4s]L:H`-M)*U!bWO[4
%pleub:-i9f7Y3n9-H<\FQe3)&#ur0P!piV$RgLu&esh5g-2_;r$eiur'cho5mkSi?C'fMS`;CiY)-p]=%ME(Y2B+]/Zjink!AK1&
%<up;?6A%=@0Mlt!/d,A)dT[gX7Vt)C*cUHd5<IOY3dK[)*-`k,f8":%a^&D+,U"7?iuo[%-jbt3($WG*(G$'9UU1ltC-&66GVMVE
%.ZK0U`fdXi'I?2%kS.gjomf5V=bWZf=<*Z["GVs#2hr]PkV9.tBkLOM%<j#S>pW?L@7`-s2%0je>YT/m;-22^D-_=$`1R5PL4D_C
%6B$N!#&m6Xn3[<Y6,)DA>4EZ=?b)q3)0nUVGEUlFY/OVuZ,e[S>#Aj5!2=CP!A7PamKB$[0!S8^k-:JqbVdfVF(cmEM;'H*BnL(t
%7u`/c28d9Gbb1cKXL2a[403%Hb=;7&!51oH$ejKu)_j$FXg9/d2XV:"%@n,MJ3ZG2#\B`[#pk<_Z,FL1\eC@eL_*$9NZK\b'(:7C
%F`L=!)Ia_QJ<,I?4gp98\JgP49.[`fBuRo)^-r3uR(5Ik3s8NG$8SBn>q?,aC?Sn*K`Z2qYcn71PqCuA^aCBI5nOm,;rSo6@99*A
%D2J%@,H;Bq+_d\a$`aHt%gmcigtSuK`bXQ,%npF5'Gg+RMNuPJJ.,LYLd]X9??'%$;2U:d.&$ZpNRIjbSi[a46-uoq^jQfB@s<DG
%0.')`#492.J!ZIAG^WR>s!iY]NPR^2Jg0hJJMMP]du$c&8!^\RF5.`eBlgXi?nA*$MEn$rhFKDt[%8h6]GW4`#ju?D9jTPf<"Vh7
%E59t4Ypul^kW?/,,qKeZ^ast_OEaV*j,h]8Z;dNR;QJJOS.I+8RWOK6*JK-X*pA(+(``bs9B#/mjt:Ps0T6jT@RU<!Z,ciAl7c7p
%98tXC@Un?1Ea689!>?.j@rUn$(,$rd_2Ts7]JM6OC5bGer8mjeOQaMQ[>b]@UKf)P"jTo5CoJXnCHV%H`iYijWo8r^nKK6B:0I!Q
%79noJI6USQYp)%V[Z*m><m&@,'=e(aNfU24PX/<r"k>pJJt<29]R`6E6Q9m+fl]\Lf?oI:/hINpW>/h(aI[>gRK_I\Dqe,P+jfPJ
%X^RHPQa%0,L=BJZmSR[`KABr;O=1Ok`s]dnE;,E*7aMU;O<78.2!'r%VbLs(,8kD5K+3V&W/bXG38*fj"c#jK0^sO->-&ZZSg$@l
%+A^pI$8$s>\fSD^KB?TDab`O(::0*bV9_%/hWO$O$VnLsL0iTl&/6=n+T1>#:f&!#[t?[M#h#F[]N8CeNo2':"+*DEW1QS[9XTkF
%K`.+0pA`nEQ6"///%^'/r=:at+>c>-hN%[B;RY@u2usEP#>cX28/#hB<S`C?Q,14ZXL35iM0%"f;H>N1Ut*s_a]3?@`&i//a4bBG
%_PR'sTKhJGjSpo@`XEU;H_JQ$@ndXqa.o;_1@9VA(7gcs31d\-*W_Dh7>L\',`7H36"oS5SVrXO)2aL0-Uef/1u<De3(pue2$re?
%'%.:0gcdJp?\;>j8>CWa^8q/T<)JT$KK@?A6:9WlL1N3#:1b&2=5tN3]c49MEIl/4A4/2k\rYKdBU;==g`4?VdGfT"HG)=I*)upn
%!icS/p+XO3cSi?::))&P0L.\UTqG9oqQ8+).ZYqgd:VFoK>Jj)NX_)(D9!X3_q\F(/&eit;fT&?'G^]JF?Gf->j9K:#?(o?0ph^3
%C[ee97R'3`<2)4f>p\5E:qSa"\a0*_03TtL>"9Pm<XNS%(Pn"pcLZ6SAf7,eI*P%S73D]$/JiB9_6V`an++lf2%9<EZ&^k'[U2@2
%VU7fe$tSE$l"`:"i0p:Y1V+p=i%`bXdsY@85Q1`'#+%j9^-E.`=!Q5.c(CZ';Ps]`l*B?lH%c;/O<4.W,Sf*=A'gFn=I+>I"m`S-
%HMcNf8[:829[`4MnWDA`bLjITP!261r56T<&V2^I`8J4qFnZ.9nKE-hK%q,tf7Kl-K$]q.20eJ>#VGFpd*k#/`]2?Dnk;0VDm.gr
%SMcqaod)_5'!Iq\RbNk(MtM,pNG7W;m=ZY=k,c)>HE<_=kM7-]Eg5%1g)sUG:\s=,L+qb6X"DZONj%STB5K6E7p@1M\J`8lIZC=l
%'qF/@6)u^Z3a99t2u@b=R31[tM@bd?p=lGm;FqgFV?er(U0m`DO15q3hB($-/3@V,G>u%@q=sAA8Oj`o8LdQCqU<au*Z?rWG%D[*
%6:,EbN=1HBTdbB\N%t['<jQ\k$7s5'@tb>#pRp_Dq,FS(CMUDOIF)nNReV+sL\->jKFmJ:iH])4^?Bk=ME9F[Fbi!mC.E]*<j52:
%+/i6`k!Yp-m##nC0L/Y^StY>pI'4XY2;Oh?E,qCc$bXP'8e3V_W5i5BC[XM.'M!Ct:kJhK\KfDq8WOLPl9Ul(n.Z*^*5bfR$pLj[
%BEVr/7?KRn5uZ,iei"eG8"i(;lN#ZhHSIEODq<I=Y!Nao<iW^0\3dije6*WP+kI<`/Y@d^17g-RZG5Ds+rHuaT$K48&:lSaM^T_P
%8'VSFb!cG<8'c`UkP$,$1g6!LJHQZ<^<oF*?DJ"YSTFBN/<U]5;s=%C/Pp\-R^6>0'WC`EJ1)I"go`NP80Z.(CL$u2a5V_;]j#I'
%YtcAM%I%!?T%^^(DFWi%."C0s%']84B3/3&f0l`u^cYFY22U<(dE`BJ/'&%'SR`a<ILjlE3!H[A#mZdW7qlP:7RUhKS>l)mN?Gba
%5R:ZS%?`;jWZuKU8JN!K#_UgI,o1=N"SchkWblQQK-F@IK=Y,tJKHHp_3sDZiQ9u2_KXoITNmq.(lp3jUD>qTK5"I#FI86u^&bZ=
%68&&^:gM*5UU0f@?[S?;99.>4\gJ=@StTIC%`XZui$Ycs3$0_]Gse;(Ksc3,/md/:5u62D-+%bD#ab+&Wc!Htmr%?*i)\\#`jNQ"
%FoUUm5B^_ZjDVNgdIjb0ndT]JC.H7P\5cV5XYRse6XFk=6,.QuWq1F)@n3YP7s0=GAGNieq$ZNXn%ZpuZe\g*@`/F'A)fma!NeXg
%'q=M03eh'5D>!8G`TqAd/B1MZYrf'kQrKUn(67YiB`ILOXp,rtX_qD?].M%cAKjVLO-<7ZFIdK$L5o=%-s+`$?+IE/=H!qjEc7k-
%FmHV==7;0hN`lOGlMcsjnfoa+m<n=5$eCjb%eC1W^^+lh+asAE$laj]1?]<l6H?%j^7<`=lb-[;IlgEUdc7<7[rA"B\fEiGH_@Ej
%7s1jOQi?E2nQ?0k[Ld=%J>8=^+t)Sf<S`Ch4(GIs?!Cm%h6>Rjl!u;hFOI1)G=Q.5XarubJ*D-*DDCR[YdT]6UJPFhoH6e:q9plZ
%7%R)<PJcEuqBmUA:,rR8QqD&3khtOYd<?r?8d*JV]/r6+OgA7308LlT^_GiC34dE9&/SNH"(<)Efurj4i]\&RbU.s4-V'*%:W8e4
%Cmqt2NP6mFhVG<m"YKbu_!)\g.lo)+%N^bull]sNE'DJUG1Y[mbnrh*i-OUd[eJ$U%,iqV-fkIQGHatTho$!^Isr3hIf@qejI688
%M;liD^-<JV?TK0l+.^Ul&*<Y/g5k.knuGRZ!/j4QoORQ,@%)'tBFbYu))Gl`[rc\/4)_:BdM'nUaL6@I"Tfb*f256MR31MY('sYp
%ED`g+k#$:b)tCPjXB"WNc`HBZ_q0%)iuJ\0JHK\aIC8%!q#1C?W5$!%1mPp2@PsJnZY$lso'kEln?K-"o`nlaGWJQ<#MDi/k-EJ+
%12^S`&[Z")D1\R!S39uh4ZYUh^Pp.4%_+.I#Z7^I-"EoCnH9HDmC7e0-ZJClnajBNnajMmqf?Q[]#";lJ,WF8cQ>Aa(<Cc+GV1ql
%J#9jLPHR_@Eg*F%WD7gI3eA-'j"l;L1s<UP*1<-,$0O.pRQ52\86L]qmAfD9m">)h!J6bM4R%lplkI&QMu;FHege+s^1t7HiN&R2
%&Uk/t$Jl$W!,&d77u)A:NQgMR7Xq-g#E`!p9Xs%<J-W@hhuV,@+'$RZ\_IVgiG-so[@09p](GK7#B3trb`rn(/s=!gelP2>."@?g
%FldCO7a.uhqrh(u?dh^t1<T$7^']A($@fbs^\:`q]`4ETI3;'#7q^:2Zp5IF6##F(J-rU2k0C47.L-IpBm22^VP3=SmXXZ1r9Zg6
%36[,i]2^f9ZTEpfJ%HVD'V)irC:im"lQ5>R+n5FmQof'=+.XC\F,\irh)WcQp.*k<E5'`.l43%Af7qTMDq3)u\oV<L\#Y(\i6dNa
%h6k#$/7j?DO-057G])^bJ8r^*P4Ce1OV[qceHq)+\"6=uiGI]Me[\'%GTQ''!3<\@R+?KUnN7`"$6J#*eQr(LWoLY\`5YDAIj;^&
%cum)fUL;^E:u-Y.\*]n:dc3m&2!!WKfDG/KlLBE76;+-LfK^!%Q*cD-a2G*@0'GUtW+`s%`1keCj6'Wbk=;\mo#a;VYtrp'pLeFT
%b+Yi',BmgC[Sae5`M<'MZ,QYN;*D3U[*uB'd*^5]>pD+?gW&V9^^naaUE;Y5k!q&AnuAJa0:VKE58+D1L@`Y(0YqJrf9<LF:WfD'
%=DMNC[b`!P$eDMB@9_XA+D]3MB`Z+"eAIcN11^F'HY<6>K[+WmdIS?ZT5X\9:L(s%95+<bZOqpo01raf1PS)bdB,3/%JS8FL;0TU
%:\grWjQAJJcYoDIh`RNM%j+:mP4'MFpA6WajLG#[PEu=YhA'HP7tnXh>%V=bA7+Fo%hoL:*GWVpS"4/8Nl\-sOu^Z*?'pm_qtd."
%oR/8LFE[ZqJ_)#M:\1oOIM?%]pSr+`[aEmW3<39+F-s-)`E>Z;"h/BnlE:)6h=:,2Xr>Sdh$#E8/?`cd-^VO?i`Eu\+e?:#M_Y+F
%?IK%#U[H!r-$IhF9UHWW(&VsWl6s*P1TS*/n?o++:P`WYhL+>e,XL4Qj2E"<18mZ1$.)AXd,_`il&LIbUel5JX=5pu6\l*U^@#Ds
%+&D+uGm#@7AX:I6OZT[jqIIUUR*")O?4l7WcXn._L6>^u1c[tFFQ932#X!YN-7UssWCrm`ErNL?#E$_kUY-5cTlopCn0<-\o<L")
%EeF9D!>=R/VO0F^_8i4bDP*]\HOF)RnSX=U\3Vb_]YG3K;ne.eSuq\So@;/p/fI(r8O2J`BRZ'q("lNQ5,K,tkurlk>^ll0MVUK?
%YCNNt66Bj'<i/Cd4H#V_2rXOmZ%9_G$fWW=\poetKjonY_2%pJd`LsL)\6TkCQCCsU48DIduug/Aj8EE'Ve!(]Z(K"Q,5C5I7,@<
%]QW<=R=\p#1Y[jYYeH9n7@^&o\u2\;7(cc^q$+O`n:K3OGhPQVKe@mr&V!eS'1,<<b$]B+`OZLnVI)u5U0)cF25"h%L>8'@1lT%q
%hQ+^Up>OM5j=Q=87pgT4S[9H`[jan5U;Kf1SB%$#:/3DC0J^nOC'SpKCQi*Z)'[W_9ZmREcljFVWHXm.QDiFZ,m`M[kVbI/K2+3E
%[g5GrlRM8%mJY3DQ9%BCEDbL0BGP&%hic46&[&^lRK[`OJcqg:*YXbf"["p*LrA,8O<l37Tp3Y&To&snK?-R'JCZ]$K-H;j&n*Ld
%j)>uTdnF5!j3C0I?HSQ:3-M-0]!JjemuG6EB98X4mnDrcENlY%%'o/gc],PXPg[Y]iJ[7"hM/AFFda3%3cDC.,[<kY$AK<]/^Hh[
%@hD9<A"#'*W&;r>mq:3fUc@>THgA0Eb;`%\+rcDUhHFF?1J(6W]Z9paAGhQunX9A`>B"<@#F2oCl.Y[n#X-s+*?OZ,kL3Ld?)]Um
%!*&:Qc1J2mRhGr^(6CrsGY-#M8t8ZXA.#"M"--ui^a<3@<..#;Sr(sZQO-J>bhiaF0+fUp_42(+9eZ\'?&45e6m#_?^+uH$IL11-
%5_1pG=aq-B17o]sIRM+5ph:h(-9oBU43jM?GXQ[+n6ABRAIEQ]@[mo?j18N+Kc(:fiKNGU\f&n^"JC5D`OR!0gIqZC%$b-."9eO/
%lNY\5da$\9i,5%&CDrK>NK`?YF=?85dc;8:*(uU+HVVVVJQ9.u3H(J!.H]\\+jnI=[&noiZBf@0JF$F4ZYM]5W75"[KkCX*Xsn1F
%o[-KB:5^!ALQD7ST["eYK?WC'8f\R:0Sd=rKIl?<-5'.SY+I$Ri$:LjM$+M`U:)B]:is+8-^'OUgl3hA1<$$8'XV13dmU5k<m//8
%>jn92>ZGc`]-\j=9NGX'2%uWRXsST#r*Y2BFtb'-60bd66.CtMC_AVn5FYA4cI[(u>,P5GIPSYDnaY]&cORf,K5$E^Y?EUhpl6N>
%)oGF7/Au3FaKL:(Q9^@bnF61,OpYTjJ5Vfs)VAtZ=RnO-C3hpK$RPg0;[N/rK$46iaGk%dL<(D7AA8l%E?)gs6hMoB0/*X,n"RrN
%rP4"9cngjCi@"t?PBiK\<p7Yl>@u175iVfG-F<0NAueb*F8uD^<A"T>5`QJ1>[Vlc$'C@%bJ*<H1Kj%3!W`4Al%C1ED9S3f@\U(.
%`A_"49JQ\/PiJeXH;]Y5o!K9eMR(R807o5+h1(>Q)/n93+S-p^C-rLAdLB[^l=MhoTNRH><o(JjDALdC<(rLf&`O%0Kma3NVND&q
%'mW#GS&?c*!m_ZpmEPV7MI)\kG;MV-!-ZPAr77/Y1Edi0TEU?'ab90<+o4:V$:dAb_bjSSidHT'53VF(dLq(**<HV7PP:@O#>Df?
%@N,Rm,Epc'-rItj7FlU%:bCm&Hsf_BX`ErIY!XN^nE@VS(6E&O1@AMSf75YR9L]jHUd5,2/D$>r0LFpU+c+])1[\oWnIK;6SS<[D
%O.Sk;O`TD'[[8Rb0/qsg'"DK`Ln*>tk,69q_$n"I6%gC:B*T:CII0*/6,2&!\W_U&#mRFEP%7OhTgW4.UTM+1:(K"'D1B8P14\;M
%/-ek=f9L#p7u%Z@_rRi%P\d`^BJq;MB-@dp!mJ=;J<&0Y]^_Y/ahDS&J[UI38fR'9?B&\!n;^TQaV1r+bU`tn.B&8O9Hs"7#9=0(
%,W\kKJX<c7EN'L\!YhA<%ftrYZaODcjt?8giuqVR1lg4<<Pd\.TgKeY-CGG33tZSk>E:.BKFXiuE*KR<^aBg"<M/#tJgb#]9^]K'
%@.Y<m&<O\a#C\Qh($<m7)An+n^s>X+ZjPAlbbM+s.BL?;h3eS?rU"IMRkQ3QLUH\L3EF0;I"oMp=[k&(4o]nbN>YMWV+[@pir-4L
%B1!i#JZb.r<g?dC3I2'iZ]q/15rKpP9Lq[iMG+gk(C3.c)8/<J4qE(I`>kgH+op%%P^2<.9HsL0:ED^q3D)G')^ckuf^_"LR=dM\
%h9h_a'Ud'Fr63GKM$V"m!PPeIA`s!B-aL22EDR?BS&Q]rbS]\g?UpVcTXd:1[m<fIe+U!Qm0+)o?i$b5Z#=)FgNQHVKa/'d&KBP?
%j6%h8>"$q3N`SW%5-l4hbOX.W%nCB;/Hnf.'?%c909'ID3muD(':,+us2a\u#XL2HX?0*I(Mle[A;R2-'W)_2@Nu1`FdC143U%WW
%lb6(jq:HDClP/Hm;j>&c'R`_W6'M(l-/C-0JVc%thAYVe`n](5,a";K^kk7*dh7a*:m+CMZ4J7S*nOdTaT9!R!`A>W%0P53+U>]G
%W7.-6$2K)Y$/)!(V<2I(Rm>/n'LABUNY7q=i!?o>N'Kuk!HJ2Ga]fMP.gmo)dq9KeEsj%u>rJt6BCIK[Hhi7MSBR^`QRE7h$q11=
%_9?iZ@UP(]R7r>\.jS]1kOpQYpWZgi+>+[mo[i!=[-'`c],AEIP*j:KdLQgO4C"+=E(HTBPe/"_S-H9tEJV:V?<pR.9A"3Z7H^0\
%a`9+Nn*Z4t]=Ud`JT9\[>n,8inf5o75XUs,;/bnoJS(dUXWumon_p>if=U(6%Zd)2p?<Un%-uR`q+g4:l5f+K3jbaa7Sc/X^9Won
%fj3UF8soP:]'eJ5?2*fZS\aW.^CuT5USL8#jpl+?,''^<S%&k=Qs2:3MjeH46:eZ9U_akV?K(MoO5&0Kcu>N2hO])u_Jfdee$=He
%1Y^M"?=HjNG0R9g)cF>OY;c)F;.Ie^qU8lHG^cc-C-9<^4M"Shg/eK]nOtAc3.?rCjs3YEh]Ie?GM5dr:2ahWE$IfmoFNjKDu86r
%NT9`sg#RKM8`;EmhgOq<rZZ*W0:_)\AnLsu3d6HS$<J(>1;o<fU#W\i/i103]g"fmTZfC$:srJV),qZj$QTbFh!*3J5Jec[]Ln48
%/EfZB*)dkQ"lUsu;r=VCJED('RY@n&5+^0TRIu];bLa#pfQ6hS?dXZjrq?_J5PGlD`q*\f9OlBP]qd.gL,+%(jCqGVgj%Ib@G5b<
%gV@FEP-Lc"%e=me&-<-X'ed,9*iDV_[NQEM':EEB'r,;2e'P+0KC#**ks@HFM9B\hC;Wo,jDN^R-cB/[NB>:b*j"(u?2^^7en\!B
%gS_!#pf/S5j*Ka-n7'9qpdT)NQJ7t:P@3FKf?>'o=3[3Vf0=E?#'.Ta;LLi^fGFqFE7&2^"Zh5_rA6I5jr9if>1.=.c$O:IC.R:t
%RJVX!]`t<0[bkQ@PTpkkcFPTR:BJn_ggFoHdK\C-CpsQkk0hQVhh@q9LCu.0MV:%`"V(Q[F_S3CqU9WtZL<,.o3O,eX'eu[@FG:B
%`+k84c-=T6%\\!)rFiQ5+XRsg7fIR_?@CF\e!'Q:l-DS.C#+)UXl8T=g9(dM)XjgolMQ?*lFLXhmK&PbIYU\Qq*6GGS\fi5di;q$
%`%^hfhXWCPaXt>`*d#9EVCg>g=g/.ng)<eBU(T!.;nL"KNss"9`'a"%4$4qJ#Y@mQFINck:fM(o#;Ue+FaB<DCGK-h19\"][A#;4
%bLA+a`fRmC'C<dlctA"(-;*c%anm!Id!9OL"kSq+UjKgA`XAj(C^gO;K3rW%D,/c,DL^k=qPee:0:E7FB'$qt;TcuK(oSQ/HnU`Q
%To$V/3k'!'J15_uU'/@=H$9XmWYJ.t`tO>1K;^[)!lYiYDPG[C"e!8PZus+j1A,M=lWVC-k(A+4FLCT-N382bDf"7CN62Yac@"n_
%$#d"d%(mPc%i!VhUDGPqH*PK](ksX"H<W>l8^8Zn[SoKeNI0dg>dYU!r9SMZ2fq10Od,X>N[4!_M0=8j6(Dt2hbe:Wg8s\qgRl,4
%K-]hM[n5c;<]c;4L2B9aaYO/uWK#9WrJ%+'I<mC7[o2P16T;eSf^h-sr<]dC@BN1Vdc?:d#khh,eAAr2m=MW0[O%JTMH(/'PTaoD
%:QL0RFoH-,$,!?D4a>#uE;H.lCb,EqBZaQ`iA6aW8Lu;L^I+oJ*[h/pWjljL7W:))X<GTA31X2Hb"&lW()+]VFSKH%.)jMF=9k*B
%6W]@h5dShWP-hcN"d*LD0OZR\$VJP*G+rnU`;capdkPhrL,OAr.iD%8d)`#Oc7J3+_4,O3^=u2<WCh70>+]"A6cfIE[*eRI;a18^
%neLT>els[hd&+,SI/dN^(S.u?-1L/]>H#\jhdC[^1H)5CB![mMp'!QLEj^th;Z"1'-Zn&Y8%H1m41U15Nkf%*dWoWLiF(CXa1,CZ
%pr?Sf5GVO^Uen#:mFdY3<mV!OaYN$>UCrFU(Qs';@*Or#;&KG#ODZ%eaL(n**@%E:(kW;g'7)t83CN$45''OM:o=cFi\1JW.Wc^5
%l+7uRTtnePUub:K,ddf5C%ITZ\lhg),a\2m-CP'M?q''F8g_ZJ<lH4%MhOL'+c&"X-04)+X\93)VR2nhYf>s?9RlV29r&`;%<@<F
%WN`);\Ji/8+&ZD/7P,oXi^g?M%C.LX_i9.!R#lOd>hoG6GO=+S-k,uQm^oednCm'sG7@a7LH4`*[r0FTY5S<MjI4EGTYUr:d@V.L
%ak.;'[\;&1GhmjCP=t:4Y'''sK'^3I?#S1p&7ZO9<nRN+2s1GS/9%289QO/jG-GoJD]88D"Z77.$6D?teQof`PFihj!mOrYhVWj7
%%`f7911.MN`<bprW>&N'%-'[UiD^@nH^%6cl?;A.ir^<W,#6jo2FprGjuGV@&:]#5D\ZNJR$HKNod;s_0W5.RI#OVfk/NhQ\Cmg#
%JV^:ilu;8#dG=s^d4NF_:+OdL:^+bZn@kpW+T&>?G+ok_ddh"R%R06YT>#*fPa&;$X5MBb=l$L#?[d`9XEcfhm(Q!*E%8;F@@aI,
%V\q,EI@=KcY[L"^nYULd`Qo!DO%2*^o`;pFWS=Q#]*0,@jJ7:tZ>r;OCQE.^2Sgi)@)I+*iTc?b=8oRNBZgaWm9(pF)\Ra23+S=a
%3/o6&^;S76V"A=f#VaLq"/><E6^TT#CM)+Tk.Tp*k^IR93t72fWNM#L]0Xe',#/0qoc"6fGK-SH:0/H<+<<g-%LDm!e^jn^E!+4>
%&`=$8:-R]p(JYMCeAI.sR&Ea2&@\Me!?e;MNg(sCN?'b1Nd27!7!\7:MZT=V`%F)!/6Ga&p<.LOfU?0s+M[m*5QB?ms5Q?BrkJEs
%\%hmlmiVPjGQ7N/H\=Ji/pR^rGHRA&70lMS*Ut255b$u6Y>1rg_`rfcC/3`a>:EZDjNTQ_#7cnj?Ya7r6RQ;PVd)5O]Af@o$g(+M
%p'+AAN8^OBZjI:O.='(`Z,qE;K+bhKk%Sq1:c&n-psTB]8opM5):f$RJkQHbX^g^U58AiI6D:"Z'\2\E\2.);E.a[>!b43`@u')5
%N!o[qL%5>lX@bFZ4;JaH(TKf8n]1UpX;H9@K"4R"pdlCIJ9MVaU$9UhCRD26MM_b5Lgpi/A7H]J4Vboa[P3<L_gfCc*LbkC%BcCe
%:9,SLa/rP+@'H?_mmYOmA+hHWaqsnf7AS"W%AHe:[3ah<*-Bh%oCp;!a'bc%(@sV+2+!FO"8[="!qA<b064Z#oH9IC&=_LJ;$_#+
%[oMb7Wo\f>Xa!7'"cG4M/:(6XV\C\RU>U`a7GkMZYY#KqnmU7-qXdk+jg"1UGUnfh0PV>Oh9HMWJgBq"5/P"e2,b+Jog+dG;`&.-
%<k(@H1]-l&hm5E-<Nu=ZS<4HXf'$@onR[a$\<"=d.!^o=aE_s9=1\p1+M-5?m_<lpf3Qn+L`f%]O>CUN`^a)n,?bY)J7m]/c1L_T
%9_[/+l"Imi@u:V=-')>u(&IaBoGn9_$;^_I.9e$B6/Y\u?o#B<n*/;+E#m@b2@;K4b"ct^*ijg/B]B)pMY!=-!+AJbp4o#5P1`Id
%+6J];qn8[H"Z;V=_u_r`3ZJ:t8)>=AV,jq2FDkp!EN=0cEP`0,*!D'Y"uu[eXTN#ljipS`mT2(2oaU]Z1IgkI$!cY]olW.FId=Wn
%!cc*uB.UrHCjU8KTRWlR`T95&)s!R:*5*A76]aS(O3>n_i2$4UUoAFmhCgR#ki5#$7.FFq<$qfSX.VYMR&A;S^L4]T[sdr`IH9A?
%3$qup+:cea3ecm!rH('./g?UB/Z\elfDRI*%Qs/()"cn=2hjI<3m:,\;K!le162d\(PX&(cGoGRkZltlr'gN7QY#hr[d"WBlPbqZ
%",@U6:Kdtt'G#b"6maTh1J&Tmd#fAD(@3krJLj9Q40.r.h64Sj45MEug)CN5eXQg"0,/6:DDUMtK!geiQ,eRW_`)"oe\D)1CjBab
%^gT2YGbZ,2nc"3QWn@O"7o"l\M%1$ELuiXGP/0n!crePSlQGsRXMMLpmr]Ylr9!e1!?u7p<eXOPFF"+-+.NldKoVJ$Jk,]NATp28
%6[Idl)E1ftJSq1;na&u@Y-_/2+d<YCUDA<Lc1T\QV,46(.JY("JPk^ahfp6P5utV<VfClId;gH,?3O-EJML<t//JkM[37hI*qW*V
%cLQBIT"o>8@p<dlT]=rYG;NhS:MO0FeB_/J?Rj5Xhdf+F:$Wiri9J8W^sUWc&QsnB`sa%sI"$YpH\pl40gK,63MK?!&b7emONH,T
%#-hLrJCS9ZDCdYC-p/+^03;*XVf0MFSe-ZrhsH1rKGN3:#g,K<*^J/X^oYP6q*;qM)ds8t%rHW_a"7]W7`Nhoo93Pr-JC77nq$pL
%ogSIh^RZC79-qAWZOK0OrMQ9Bl#o%YTA34&pi\I5kBM6([&mgin5RI?bho$h88edR,mR[q4R8[$))K1[YHI7(NuiON(V^dY_-W*k
%FU'b<CWDa71mh`'O6WC&6IrX5]+`&"Ns;b=7lOIkfD`K\i;_6gTfRmUPf9_SGlUK2B'0U+EYP9>^-dp7*qW)-4m8@T-*ePFa5.@1
%[ndEg"h1@&kXc6-"muIs_02r`h0t]mBfAb64G0[blPln>\&7d3*f<I'TM0tUhe%_:P6]6-mCI+B!f.b.7\103U"MOos$$1.#MnL:
%A<#G.%hOgX]K$)<UqZjA?3iut&X]mqUWJ,m(-U!b[W7#M<q`.LW,i]Y4C?K$$n_sX,s"ah:)>+NGGN$nF8r(ZD(_2p)M'AYPC8rR
%"8YI3`U>;iJs)]f0Q_8K$?JGIECOLB+d<%X*c@)`=l[o!Th*LD6cR2DYKa\/Jd=V28G5p2J]oc628$_\X([Ie;,tJ,[f)*t)*^5%
%2Sl0YZ`7d_IkY;-D<<1k](O,5,1N-&Q4"\R/=,5'kKaFW4Re+11:KoLW3Lnm9RCj1NgO`!3Z9^b9N=%2S"j*#WMn^'m=@L6C"MAS
%W91;;<u3M7nRJ/77r'<:FK)#:@1-0o%M3-<@hHT$,TD4?O\d%j:4-n>Y6BYLqa`9ckDqe7nG,-hEP0ENCqmk<?NufY8W!L[*'$Ra
%9L$#h0hLm0Tr,iY>)8MB6d3-=##X!:'*@N44"q__S>uB@ld6B$U>mf]3o1S'Z45)j$t%tHRhjkrcj+5=5UQld`*@DYFkAU^10UI8
%?ht/oRct"[iNFCgME=!F]%02N&<.%a/d!sRMh;ECRM]_[$A((4`>Cs9WP92t%*!U1PqT11[<gtL(qBo%Lb^`(Kbib,1;G$X0gr^"
%b0O'C1>I,,j6s"L-Mj8]CT-kqRMl^k4hU49L).hNHJ%:M$4,Y+i:U$@SG>8*AH`1l[GrorrFA=ZAg'_dCC9C01pQ&Tf?m>g$)Ytl
%j0C0P76VX*#)h<jk[h\U,?e,S%*4Xl^d5efEDW2MInA[o%3$AT>i*r05\OsIggn'2"#`$N0ZGW1(mUdML2sRE:sL;n@,n"5K=PKK
%l9k"!mGT=A-(INq7)rh>V!tm;o6%-ga!L\PVJRAZ\?3g54q=an/1#=hQ'5#CoQ=nGfu>YX)Q,j:,8B8ckjf]3:pHtX*WWTPGHqdf
%+gX!h4pr5&pdh(d@+hQ,Hfr"jAI1]]CAi3sOT,I:6/2jSK7%2qr$P)GEbgsO"\qk_rss?;n[VM3c+?X>1A,rQB8+SV\WTKnPKE6`
%B%PN1SPFCc`u._YG\eO%Jtm:Ji;q_*N<%-nJ;5=b>6U-BG>>JkVs"Lfpj]0rD%A`GTtlb@>7qCEFTXGtRjiI[WM?j=rYa46dsBQD
%f?Wl#kuMV*Pb)>SX!XAoMMnk')\VKXK.lL&L>2HIlQPbb7+N35KTI_:=m6:5aQ4R-nDWFn#h:c9%Z/?J-o&Nu.u(">H*'@$PiB,D
%B#bGPR[;5q7.SJ.eJf,e4]+`X<eZL+f+1/siN*kr`8HBK<;M5g#9a2')+TRGXq1[H3i4@8d24t!jYQ!CLrM$Nm>`IbG[2SQ%gVKA
%:qmt/F#q<1S6]50I*P*r0,0d-b4_b:70DNg1`8!p@43G>XEhKQs%D3)YJ"QU!cf]/J]Obp^+T^.l*S1?K)_au%g3am+:"!@^bV>^
%S"V"jo.^]J?n=hAT+V0lS3U#*1*N..ft=uO$Rd\'L.H:N%:ki\fe@XQ3@Df4$Ujo;1;"KFSWfTkg%%QfTO-T;9]R<,-rqXr,VRIZ
%PUTNI;"ujNeJS$RZAnQK/21?KH^#KGh9t]Cg^N.7-M%%SO&`J\R&JPFj(X9Z$:Q']El+:QbnQN#=Dkj4_5qm2#2?SgaK5QJ$2P%(
%$T3opWar&X,D?qIQ/ASU8LcHr'n\6:moj2KNc2/NNcPjZXbi+eEE\Hq]](r7ZHa:B'N[\9KK>r"W<PijRJqF4LBK]-5;l:nK\a3'
%oI!kN5t)\KW"IP9gd*f,O_h*nH1KF#<'B<]9\YYr=Y9k!]6Hs,jn-hL6t@mE)]W24Y`Qq7(HV?HMV*-kY\>Kr8>JDni&19:INf4N
%hs]u\qdih;&dXk:'o\+3"1$P<SQPfE!YVIfmR4Vf!M\0YOQmNJ"-EH'7'R_7/n@.j1\)6*6.M9,5Qfa<D9qS%5X!2?d6:>e#O&C=
%VD5Nrjjqr8/MsffJrRJKTmU5-&l44>,@_,!1'NSle>W./W+J*,]A;2-4.^h-GmumUd0oESeWu@@H2u6'TQ<"Bj:MLT?(9l;Wg_`,
%\%oh$,/XU7g(eA6i84TL<#na:J!luH>m$_4MIB%jQ&ULX0Y#fm)_.WK6jY/R%!F&%T>iW<;ZT)16;toA_09-'hM^6^OF7mZ/89rk
%p;f['OO#2nF!.i-iWfW(8mO3#n=$RaNA=!:oo[Z?!`4cr.8[;NBeIUi.&I`0Y+S=8)BnJoWXij:dpM$^bB9pKM-D1+7Ed_5eel5!
%9rJhs66(nK8-m)@`EMD*HO9s8"EjeqY*_*k5X".A#+Q$X3^3s?OHren%En/E8U!qP<BtZYjq)0Dp3NCb-C3(%OQ9]WS_3P.GQh+&
%B=b'5J(H_\SR;fJ\L:I9#F@J4lP#fp__b7VJZ"D]0;%'Q'c<_\FYOal.*-(P*AY"c"I$/K%4CfApJOk)0_D#t[fFKHa&tChqECr`
%=S$StK9r4f<(jD2EJ]gl??\cRV(=etW1c2k4*^@4WtX'\R`s>h>IA5)oe$^23$[BoD:EUsk,2/_k>E#dP(&1rm0\]N)u.3mkQst8
%E[Y`H$/3PRdd=1Z%tVAJ\GQ%(o%XSWVP#u'LcW;YRP]^DeL_]`!*'a2hF!EP`ItBWr^>A\5GR=&G0G+oC+Eb:_]85tn1[l[k9M=C
%Ee@YIDt@uH"+626W08;]"YCC@:!#[4%#O!fe8N]L%G.VLo(fs8pLRl'GGOM-0smU<Mj5C>d;'2tC2iT>mg2(OO,KPa22Vs8rDk85
%AC:@F.(eY$.&`A4FG'"tG_7M225)DjfJ,D76JmVJ02&fW5;15D;"fr\7&SMX10a?\*.bY:%=`#,P`?i@Yng2EN&q<=S=iNQ5Li9U
%F<%-g`_1TIeQC?Keg&=_41DMoEFkXW$\fHTi`Nk3-#h*Zo,e9]Zr+Z1"4Ji)2G>`Y;PK$$]kR9f$J!/_Nm)s:\e>3qA1&Kc]!Jr?
%[iD(+UAZuZOrqUj5NIa"%3=BR5W2`M`*abjBq67i^bR!^_.\dYOp%(!fH^HVS%RTE=U,VYJ(^X]m+m:W+H)./Q\r7mTiR<'PL,I_
%9/kf2m46_YGS);PJohn$89)8W-QSnnN@@L;b?1T7@0hYFF:f`TDBagDaHZc-4QKUh2.qcVGS#kPEYAA\VFN>3X^hA7j>I>9jlGa;
%@0!]3luD?S6tF`>lAS+Z!HNNAd6OHZ!>%"K!c$;G%R44gM=[H;#/Y1EUdp%U9J,mdO2[-4<[:u2oQM3'TJ2muDFY'ZG$-?sae0+H
%O8F_.;i5?-;WbH=a%MmTQje.>Ge+]'.0*o.l+ebp*FMDk"/q@u'@E_ko:q6Eap,]<m6SKuTSdRX[>:!uBDHZoq]&Xoa6RqQ?YOc&
%G<mjN\@uD"oLoC=-"Y&_5TiDN&9Z/+5u-YsJ<J$D;>mIu_.L0]EZ9t\MfGja'!,=KqIPSL&&8n\2'"YY""=3ek)YaUJ4pE,.ko(P
%2)$%O2tLd<HQ[BfZu!M%A+AdFP8=XKMQE$LR2NmB1B//`EDLihB8#]3V-97=DY\$LOE;s=X^I9T+!Dn?!G&ktLc7;X1GS>%6'B,B
%Z^bk$OO:>EFk_0B&#fej1+?)<)L4#q^*2W5Y*GY.6'dW=eY]K'+oEfXA'%AE%(hZ4iTNLi/F61:-'G^mL,Pkm+QTIK_7K'q,"MWB
%Hdk,%cluRK-pYWDb+Hu2s#;+Sl*CTaZZuHDF=J-)@Y?B'3+_"bS"uC&q9O4L>%[h>:e?qD_Gl5#R$T7Raq8AT:V,h,Sm!s$fOmk8
%S*OQE5tLF<BY>E<G*7EN0LaI@G+Np)s,s+Bf+6kO*q\3loWqAK0HcD+LL^Q[_%Gm-0+DeD71"GO5<,c.?!ZC)`I6]>1`4gk1?K_K
%PWEMN$asuId7o#UUW*r9>=>d]IcN69aO=@G.2ZafIF(cjU_f\K1BM;t\ml"D;&$bSWM]pmC]Y%Ika-c?hN*W$Q22>t&ibE9<%H@T
%&T\UN-XWl::c!/<iMUg5+u12bJ@ni*Ls\e[7L06MN#U,QK(#36Ii`j9UbiEP+\I^rcMa/_#T"HWJ`M@3(O\[-%!Y\pfSY@%;L!PA
%2!6kq)lRt?=I6NAT1=Ne=HHuP]ufdfKP3XOWn!T^6?^RTP@`KV]:Cn,5/aOl>,?hX+L#6g.TkUf>pq%raqG3l,"PLfJmGM^OQC9*
%7uEr-q1'^RN\'lY;u\5oLuSPoEe6b2P'Bpp>Wm2:GV%huER?<TWDr!2nZA5,V.&M3ng!rr20?Js.`p^<kbbD_!DLr2Ar@X:5YYEa
%U03rk;Ij8-S>c=>]+c,WR.RMM=C7g;.n&^1pXHtdBA?KJ7o,4'S:nNX4oBI<9TV^FPH<$XJbB=8r]"][MQHE@9;)=V\g!W1\;Et3
%R5[sGe/.)rKn8P]n&d7;'Nupk9t5@5[P3DgXDoHFedE;'[^03OA\#s6'"7>4PFTWK.ShCaVY7koB\ndb7$q"-,D.#0+ZJ093*3h4
%l]S+'Rq&c,[!MU!$+Q@cb9d$V"p$*Fj<eDt1dG:1<b$`N*M>%"8O22bd.>JL.Ng4Q+b,ql+[EmnHcCcnD=%&;6eE/3EAFk"g&$Sg
%fj)O`^iG!bWC2n"Ji_4b5]]dFmQAe(C*oQ6rb,5pA9^Du0;`^IIC*c"'"0aPKY%UnA0V0oV3"<O"?(T`%6Vu5-g>N+*i!BLe;T(7
%PS"J*_IPQR9'.an4HQf`XB:0[M.@0X!sSFGDFQ$<1h@NC,3N%?9mm?q&J^(`_PU)/@)U$SE>V`?bY+3Y(2+0&CgMQq?n=j;%n[+9
%,.ZDM]5CCqTJbeal<^Ve@3Pu4!1oZRO1Lu3h90:=`D]'/$Zin!DW%O<?B)ka>4$?aD4m;eP]Y)W-Ztp#%QP;K+[a$UaK@"Q``B<?
%Y.(fjL[g+,b85.DlmVcH0p@.;P!i)6h2pGTj+:P"*d#$f2DGIMpn^P4=Dl6q3S.'j8QloHrM^d$jOs6?C/HtkI$e*&fT`!8B^YKe
%n]W+G)g\bJYX>,i5_Uqc$fYg*0"&B#Kk%aJ.pHYLV#u=(c]6Nh>-%T[9D]0=kuh;R/KM,?;H5mD[okWj=LUT/%&g";:k1kH)*aXU
%e(H"o#NYu#aW6^LA%F')K7,"rH4buU?!Z=kX#8U9OggNk7ZB*S!,?,<nk*Vt'OAiA.qd$;@%&DBAiCs1G=H0MJppmF4TP%^(C:hm
%CYjN0@/:DXTUni]n9dK&4ClmOjg1hnim=:fa8B@(.gFG$!NFpY<IB_pRi1eV1lHlI*VhFTCmDFBm!'3OP#h+Ge"p+`@4/Uc`S&m)
%/I*+moM^nAP21MTA$i"okQ60gIK(]F0b4=Z<>ZC`"</=kT+\"+$;!G_KeCh\#@XP;22ErIk)L&4%S=41<Km?.K4p0j-a&p>,o+B?
%1AIGt3Ij0)X75>>m1o177GFj[p8VTYp[d[G<F]UYOb^#[dg$.nQW2uaktRX=MG38PR=9>C8_U370)$=-KU/n?Xh"tIcVj*n5U]Y&
%Si^\&gi\)Gm"Ct-?FT=chR-MBV7.P9Nn]As9*W&(-(rf(NdNJp^6r+N)G8&I_'6"C%X?8@&:D<+RS=,QF[I7skkmFLiZu&p5&tMb
%VlH,(R,I%*(f/11EHE9W)D`U,JXRFime9W1+a67XWajNF-Y2e.VBZMZ[jdk.).c(+(aqA(D_d%]U8t6u5TNi"/FXMn5b^@]Jms9H
%"Fi8IbO*&5p<M,G^r%HGS^e9RnFTD]#+O2NQ=s<0GjO7S)!325)LHoL&Nr,J[Rh&$5r+E-m+O"6SUFJ(_1sCVBD_%,3+'[F'-g0Q
%SAoPW)_kVQC7@DHp`1_L1#qD22b&2KA72sNk&nLZ[_SOlFp3_Ui&pa"YJY$lm07@4*gYYYaFTf>4.Xs_/QB+W^qn0P:b'MJd"()'
%kU6QWEWNH_on(`623<@K3nEcfFlXio`pWT8.\l1XHUrRRn%JH,jOL]hqnr3:pE"&qKm1bt6PH>;>OV*flO())hBtP.pGI<t)9L"7
%2c#ChI<#PR9B=/g-c6#*g7NSPFlf_6ONm\B<]Tdreuce"gA=n8@6!&YV<kL@hFb'.V-X,b#)5Q8*kAW0m>S^.ZSX)CGCB):gD=\a
%ccLIo3uEicpu*b40fU&g8t4dQ/"'d011t'IG.eJNkpr"pUsK+MJKUA[,c7KG!N;'ENYcn;dQ>8g:Lt=u=JZA]WZ?FQaeU&JOoudn
%!=j/2j4u&0/:?J6Q>J6FU;p,&:uX6*#Sn^A8APG7;,u5i6dpuV.RC8apEJT"K@02HokM=#_<!d^GZ(BpaGIFs;*7<.;hU:`:1JQn
%JF<ud1P9k#J31t@1)F)'+7FC3Pm=gD:KJH!h?Z!]N=79Q8>H]TmcY,_J%+cu<R/N&A3>f-7WA'#83Z9bR-K]:##1[8)bS"P#XY6+
%Udb>@^ei"b'*Hs5C=&e%_BS5uhL=gV:W`/'0eYPUdD7Zk$BN-5g?Q&p\*8e)FttWd:!$`GY'ZO.hVVTZ7T*2`mC2;UL0*d&Ve,W$
%r5/i:[;oS`aF;OJ?s"WA;<GZURnRXS&=pHU*PS)Q+i[r-P<C04j"1B9W^Ob?ZTooYl=N0F\1\W<iCt8?C7D,H]Od$9_97OKL_]N@
%%rX0qk')<6mZ6PeIQob\pVo#*79L3C[%PU)$ttop$=pS)3WXN@,33`--0G#g1"W(RIHU$rgSOeN3^6ui47R[aM<'ah,[+#h7qu-/
%=ZYX:N+V3q,dKjn@>ZI(=Ub04TQ+>lTOq-G!H!8\VBFE;69&e=VB]qS\q$A2LMGQ3:mDFnBN&"r>d\t0Du2r\#_OlgMB+.4'LMsZ
%R5Q)[gF*8d:N,QNk5OH">YrY,U>qbk^b<r&:<ljFMi+*?k0RGnrsXol)EW+M/BtR#nj2WYN3]/O"quPMC.sdQJ+8D4SR^7YXla#0
%Cb<E41D:k\mX-db2>BUDk+cd@Mn(acD,DK%EBlQQVq#2D\hn>gX?cDbrpH9G';X@O+<(Sjd-b"Wj&.;&\#7%JCC"h*1@if:6A/'W
%-@tBOft,DkrJA:q4t^X7raNLG.dsIpk8*l)2r*.Cf*Qk;k0M62c8'^m)&a4F!$bSRG0a!/-nmF`%asM$=jA-`9\k0nT^t7djp5n]
%U>rG7g/+Q'9`W8"=j/"A^!0Ht1^"Dr[()'Oc,<=E8]^$dQSC^%n#'d23mq:EiCa)lLp]L.UDfAeAg'&:Sbpqk]1(cm3.D7oGd33=
%qS-E+62!b)C>&]O;W`-jKN0f_Qc22Dbd!O\J22To/Te56neO[Sm:+eB#HdglK(0e;ea;>l1Asq'!pWnm<B*%%;`lM[K8,F"jY26(
%;^l<;C%,a<eGC.t?eU%gb[#CJXb!<pRS&E#C:>tOeGf'B9[,Eo7(B8Rg!^J8c*..V4lU,?UN,!5j)BP*>s@BePiD%i+q%K#=jgS6
%Iu]*`:Co.)Q6VDU:WdmC7%5sZG9Z=u0'<\?mP'=$I:S,72,BtC4eYp:JKdYGc1Zu\en&E'YdR42ojP#b1-/:^V^/!Js*:?8_IA=2
%-mttQ3F\fB\)=kS(bcQhc1Zu4Ptc=8bClJ*TU[79nO27P?#oOcs#CMCh=sUH1j0!VJ<n4M#%ZN\"sWpqdOZC\B[fW*2d8p%K_da>
%3I(0ioURW4/?d-Oi[/W8VR?5^*O<[I8]j)f<U9->BE+!QX?egLZ]AN*EWA+\+k(J`dhFW`%I,0ZU,M5&jU:kO"Kj%kHt"\'UFk4]
%h"K(&%_%EUd=")sWScCP0/0lj:MkWohc821o3O/NpHT<'#:fA#!(d?cAOWgZZsK?:'=.!:bGcKV>BT57g,@#9bCt88nG"TXj;Y!'
%e03Z7r`+S14\,)Ph)f&Qh<F=)(oeRD6OP.4\r2tPM9q@[)M`bMN.5#lM\Y+3V>10O>BGrH"/EK#:XTGJImm$t_j%bZ/jN<oA;%JF
%]<Qo?1)[nUbIs1$U/^Zc)>\SEB:W[W%`m\d75:F*?%.(Ga2c1]^a3WRD].u*+7s6F.Z!kL'jNVZ#^RKXDfoU/(sEZ3j#_IrrZ]h8
%G^2@4b(DPuE#NJE!/m0d4UitJ)V%?Bj7U@*N8T&0]84dIp7LV%qHNb7["ULijJ8CQ_kl3+fLoP'k0LcsDL-EkXF3g]eTU_r,?eZ2
%Qn9Y,n`;EgbRD]7EnS9I:LE![%e=DZT/6*o1?CuAduA0l#DkFgN")`.c#N!ogQsGsf4d$kOi3G?XQM(XTQ@53q9rt1:UQE2VD?-9
%mH1hlS./j0/Q]Yl&icZ:YnK0o9qS?\&^7?Fmah8u-1Rh[6;dfmNE4'J-s16X^7((Pop3UH]T]X-"p+bF>T!s<1T+ieLnhsM(uO.4
%@8,>oK=i(j,!H:?'m5OgPA8t+q$)E=(SDZoeUp4e%X]PaaWVPKg*cd)7=DuC#ZBi.'#'PY+nfO9O<'d**cYp;UjbDYBS[5\n^bE1
%LbE.E,BFgZ/+JBC%WQa0OM]8V/eEeLBnZHZV[H6n2I19)lH"k@k*_+E\'AE8<MQ$Z8\fN(L&rThk>3/)?#3h?h`enQIo&F8!">X<
%Vk4j^1-_>":qDLmH1(:52Rk?b81&:5I,=A,^1-X&f)tfu5N^l'k263Ziuc#4p5`R/21T'3p(.2sm6CX@&-(tO[t">1^\P?'rSbZ'
%DuT7ps,K%p\,UgQe!kjaj0sO75QC8oDr:KWJ,[Lg"bIhu+8k+7^\R?uj_t1]rrLh1k3i~>
%AI9_PrivateDataEnd
